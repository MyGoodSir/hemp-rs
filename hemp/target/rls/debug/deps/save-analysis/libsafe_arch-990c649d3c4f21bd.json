{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0","program":"C:\\Users\\joesc\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","safe_arch","--edition=2018","C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bytemuck\"","--cfg","feature=\"default\"","-C","metadata=990c649d3c4f21bd","-C","extra-filename=-990c649d3c4f21bd","--out-dir","g:\\.dev\\_current\\rust\\hemp-rs\\hemp\\target\\rls\\debug\\deps","-L","dependency=g:\\.dev\\_current\\rust\\hemp-rs\\hemp\\target\\rls\\debug\\deps","--extern","bytemuck=g:\\.dev\\_current\\rust\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\libbytemuck-e07327898efba2b3.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\joesc\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"g:\\.dev\\_current\\rust\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\libsafe_arch-990c649d3c4f21bd.rmeta"},"prelude":{"crate_id":{"name":"safe_arch","disambiguator":[16300533217834157966,8017822635543081315]},"crate_root":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src","external_crates":[{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[5048311760381386034,12753961808535803278]}},{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[847775214756591688,12437863933651081164]}},{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[18098153966720408130,4102567439342721650]}},{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","num":4,"id":{"name":"bytemuck","disambiguator":[11566433666395646027,14135150758237984856]}}],"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":0,"byte_end":13656,"line_start":1,"line_end":331,"column_start":1,"column_end":4}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":0,"byte_end":13656,"line_start":1,"line_end":331,"column_start":1,"column_end":4},"name":"","qualname":"::","value":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":92}],"decl_id":null,"docs":" A crate that safely exposes arch intrinsics via `#[cfg()]`.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":34,"byte_end":59,"line_start":3,"line_end":3,"column_start":1,"column_end":26}},{"value":"allow(clippy :: transmute_ptr_to_ptr)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":60,"byte_end":99,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/ A crate that safely exposes arch intrinsics via `#[cfg()]`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":141,"byte_end":204,"line_start":7,"line_end":7,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":205,"byte_end":208,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ `safe_arch` lets you safely use CPU intrinsics. Those things in the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":209,"byte_end":280,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ [`core::arch`](core::arch) modules. It works purely via `#[cfg()]` and","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":281,"byte_end":355,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ compile time CPU feature declaration. If you want to check for a feature at","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":356,"byte_end":435,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ runtime and then call an intrinsic or use a fallback path based on that then","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":436,"byte_end":516,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ this crate is sadly not for you.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":517,"byte_end":553,"line_start":13,"line_end":13,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":554,"byte_end":557,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ SIMD register types are \"newtype'd\" so that better trait impls can be given","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":558,"byte_end":637,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ to them, but the inner value is a `pub` field so feel free to just grab it","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":638,"byte_end":716,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ out if you need to. Trait impls of the newtypes include: `Default` (zeroed),","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":717,"byte_end":797,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ `From`/`Into` of appropriate data types, and appropriate operator","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":798,"byte_end":867,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ overloading.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":868,"byte_end":884,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":885,"byte_end":888,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ * Most intrinsics (like addition and multiplication) are totally safe to use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":889,"byte_end":969,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/   as long as the CPU feature is available. In this case, what you get is 1:1","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":970,"byte_end":1050,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   with the actual intrinsic.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1051,"byte_end":1083,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics take a pointer of an assumed minimum alignment and","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1084,"byte_end":1156,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/   validity span. For these, the `safe_arch` function takes a reference of an","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1157,"byte_end":1237,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   appropriate type to uphold safety.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1238,"byte_end":1278,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/   * Try the [bytemuck](https://docs.rs/bytemuck) crate (and turn on the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1279,"byte_end":1354,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/     `bytemuck` feature of this crate) if you want help safely casting","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1355,"byte_end":1428,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/     between reference types.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1429,"byte_end":1461,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ * Some intrinsics are not safe unless you're _very_ careful about how you","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1462,"byte_end":1539,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/   use them, such as the streaming operations requiring you to use them in","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1540,"byte_end":1617,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/   combination with an appropriate memory fence. Those operations aren't","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1618,"byte_end":1693,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/   exposed here.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1694,"byte_end":1713,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/ * Some intrinsics mess with the processor state, such as changing the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1714,"byte_end":1787,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/   floating point flags, saving and loading special register state, and so","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1788,"byte_end":1865,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/   on. LLVM doesn't really support you messing with that within a high level","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1866,"byte_end":1945,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/   language, so those operations aren't exposed here. Use assembly or","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":1946,"byte_end":2018,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/   something if you want to do that.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2019,"byte_end":2058,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2059,"byte_end":2062,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ## Naming Conventions","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2063,"byte_end":2088,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ The `safe_arch` crate does not simply use the \"official\" names for each","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2089,"byte_end":2164,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ intrinsic, because the official names are generally poor. Instead, the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2165,"byte_end":2239,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ operations have been given better names that makes things hopefully easier","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2240,"byte_end":2318,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to understand then you're reading the code.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2319,"byte_end":2366,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2367,"byte_end":2370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ For a full explanation of the naming used, see the [Naming","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2371,"byte_end":2433,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ Conventions](crate::naming_conventions) page.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2434,"byte_end":2483,"line_start":47,"line_end":47,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2484,"byte_end":2487,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Current Support","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2488,"byte_end":2510,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/ * `x86` / `x86_64` (Intel, AMD, etc)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2511,"byte_end":2551,"line_start":50,"line_end":50,"column_start":1,"column_end":41}},{"value":"/   * 128-bit: `sse`, `sse2`, `sse3`, `ssse3`, `sse4.1`, `sse4.2`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2552,"byte_end":2619,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/   * 256-bit: `avx`, `avx2`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2620,"byte_end":2650,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/   * Other: `adx`, `aes`, `bmi1`, `bmi2`, `fma`, `lzcnt`, `pclmulqdq`,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2651,"byte_end":2724,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     `popcnt`, `rdrand`, `rdseed`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2725,"byte_end":2761,"line_start":54,"line_end":54,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2762,"byte_end":2765,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Compile Time CPU Target Features","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2766,"byte_end":2805,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2806,"byte_end":2809,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ At the time of me writing this, Rust enables the `sse` and `sse2` CPU","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2810,"byte_end":2883,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ features by default for all `i686` (x86) and `x86_64` builds. Those CPU","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2884,"byte_end":2959,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ features are built into the design of `x86_64`, and you'd need a _super_ old","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":2960,"byte_end":3040,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ `x86` CPU for it to not support at least `sse` and `sse2`, so they're a safe","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3041,"byte_end":3121,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/ bet for the language to enable all the time. In fact, because the standard","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3122,"byte_end":3200,"line_start":62,"line_end":62,"column_start":1,"column_end":79}},{"value":"/ library is compiled with them enabled, simply trying to _disable_ those","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3201,"byte_end":3276,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ features would actually cause ABI issues and fill your program with UB","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3277,"byte_end":3351,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ ([link][rustc_docs]).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3352,"byte_end":3377,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3378,"byte_end":3381,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If you want additional CPU features available at compile time you'll have to","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3382,"byte_end":3462,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ enable them with an additional arg to `rustc`. For a feature named `name`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3463,"byte_end":3540,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ you pass `-C target-feature=+name`, such as `-C target-feature=+sse3` for","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3541,"byte_end":3618,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ `sse3`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3619,"byte_end":3630,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3631,"byte_end":3634,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ You can alternately enable _all_ target features of the current CPU with `-C","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3635,"byte_end":3715,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ target-cpu=native`. This is primarily of use if you're building a program","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3716,"byte_end":3793,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ you'll only run on your own system.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3794,"byte_end":3833,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3834,"byte_end":3837,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ It's sometimes hard to know if your target platform will support a given","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3838,"byte_end":3914,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ feature set, but the [Steam Hardware Survey][steam-survey] is generally","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3915,"byte_end":3990,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ taken as a guide to what you can expect people to have available. If you","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":3991,"byte_end":4067,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ click \"Other Settings\" it'll expand into a list of CPU target features and","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4068,"byte_end":4146,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ how common they are. These days, it seems that `sse3` can be safely assumed,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4147,"byte_end":4227,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ and `ssse3`, `sse4.1`, and `sse4.2` are pretty safe bets as well. The stuff","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4228,"byte_end":4307,"line_start":81,"line_end":81,"column_start":1,"column_end":80}},{"value":"/ above 128-bit isn't as common yet, give it another few years.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4308,"byte_end":4373,"line_start":82,"line_end":82,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4374,"byte_end":4377,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ **Please note that executing a program on a CPU that doesn't support the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4378,"byte_end":4454,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ target features it was compiles for is Undefined Behavior.**","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4455,"byte_end":4519,"line_start":85,"line_end":85,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4520,"byte_end":4523,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Currently, Rust doesn't actually support an easy way for you to check that a","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4524,"byte_end":4604,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ feature enabled at compile time is _actually_ available at runtime. There is","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4605,"byte_end":4685,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ the \"[feature_detected][feature_detected]\" family of macros, but if you","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4686,"byte_end":4761,"line_start":89,"line_end":89,"column_start":1,"column_end":76}},{"value":"/ enable a feature they will evaluate to a constant `true` instead of actually","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4762,"byte_end":4842,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ deferring the check for the feature to runtime. This means that, if you","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4843,"byte_end":4918,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ _did_ want a check at the start of your program, to confirm that all the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4919,"byte_end":4995,"line_start":92,"line_end":92,"column_start":1,"column_end":77}},{"value":"/ assumed features are present and error out when the assumptions don't hold,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":4996,"byte_end":5075,"line_start":93,"line_end":93,"column_start":1,"column_end":80}},{"value":"/ you can't use that macro. You gotta use CPUID and check manually. rip.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5076,"byte_end":5150,"line_start":94,"line_end":94,"column_start":1,"column_end":75}},{"value":"/ Hopefully we can make that process easier in a future version of this crate.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5151,"byte_end":5231,"line_start":95,"line_end":95,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5232,"byte_end":5235,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [steam-survey]:","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5236,"byte_end":5255,"line_start":97,"line_end":97,"column_start":1,"column_end":20}},{"value":"/ https://store.steampowered.com/hwsurvey/Steam-Hardware-Software-Survey-Welcome-to-Steam","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5256,"byte_end":5347,"line_start":98,"line_end":98,"column_start":1,"column_end":92}},{"value":"/ [feature_detected]:","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5348,"byte_end":5371,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/ https://doc.rust-lang.org/std/index.html?search=feature_detected","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5372,"byte_end":5440,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ [rustc_docs]: https://doc.rust-lang.org/rustc/targets/known-issues.html","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5441,"byte_end":5516,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5517,"byte_end":5520,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ### A Note On Working With Cfg","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5521,"byte_end":5555,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5556,"byte_end":5559,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ There's two main ways to use `cfg`:","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5560,"byte_end":5599,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ * Via an attribute placed on an item, block, or expression:","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5600,"byte_end":5663,"line_start":106,"line_end":106,"column_start":1,"column_end":64}},{"value":"/   * `#[cfg(debug_assertions)] println!(\"hello\");`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5664,"byte_end":5717,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ * Via a macro used within an expression position:","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5718,"byte_end":5771,"line_start":108,"line_end":108,"column_start":1,"column_end":54}},{"value":"/   * `if cfg!(debug_assertions) { println!(\"hello\"); }`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5772,"byte_end":5830,"line_start":109,"line_end":109,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5831,"byte_end":5834,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The difference might seem small but it's actually very important:","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5835,"byte_end":5904,"line_start":111,"line_end":111,"column_start":1,"column_end":70}},{"value":"/ * The attribute form will include code or not _before_ deciding if all the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5905,"byte_end":5983,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/   items named and so forth really exist or not. This means that code that is","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":5984,"byte_end":6064,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   configured via attribute can safely name things that don't always exist as","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6065,"byte_end":6145,"line_start":114,"line_end":114,"column_start":1,"column_end":81}},{"value":"/   long as the things they name do exist whenever that code is configured","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6146,"byte_end":6222,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/   into the build.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6223,"byte_end":6244,"line_start":116,"line_end":116,"column_start":1,"column_end":22}},{"value":"/ * The macro form will include the configured code _no matter what_, and then","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6245,"byte_end":6325,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/   the macro resolves to a constant `true` or `false` and the compiler uses","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6326,"byte_end":6404,"line_start":118,"line_end":118,"column_start":1,"column_end":79}},{"value":"/   dead code elimination to cut out the path not taken.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6405,"byte_end":6463,"line_start":119,"line_end":119,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6464,"byte_end":6467,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This crate uses `cfg` via the attribute, so the functions it exposes don't","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6468,"byte_end":6546,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ exist at all when the appropriate CPU target features aren't enabled.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6547,"byte_end":6620,"line_start":122,"line_end":122,"column_start":1,"column_end":74}},{"value":"/ Accordingly, if you plan to call this crate or not depending on what","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6621,"byte_end":6693,"line_start":123,"line_end":123,"column_start":1,"column_end":73}},{"value":"/ features are enabled in the build you'll also need to control your use of","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6694,"byte_end":6771,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ this crate via cfg attribute, not cfg macro.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":6772,"byte_end":6820,"line_start":125,"line_end":125,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naming_conventions","qualname":"::naming_conventions","value":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","parent":null,"children":[],"decl_id":null,"docs":" An explanation of the crate's naming conventions.","sig":null,"attributes":[{"value":"/ An explanation of the crate's naming conventions.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":13989,"byte_end":14042,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14043,"byte_end":14046,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate attempts to follow the general naming scheme of `verb_type` when","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14047,"byte_end":14126,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ the operation is \"simple\", and `verb_description_words_type` when the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14127,"byte_end":14200,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ operation (op) needs to be more specific than normal. Like this:","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14201,"byte_end":14269,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ * `add_m128`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14270,"byte_end":14286,"line_start":6,"line_end":6,"column_start":1,"column_end":17}},{"value":"/ * `add_saturating_i8_m128i`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14287,"byte_end":14318,"line_start":7,"line_end":7,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14319,"byte_end":14322,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Types","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14323,"byte_end":14335,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/ Currently, only `x86` and `x86_64` types are supported. Among those types:","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14336,"byte_end":14414,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ * `m128` and `m256` are always considered to hold `f32` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14415,"byte_end":14481,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ * `m128d` and `m256d` are always considered to hold `f64` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14482,"byte_end":14550,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ * `m128i` and `m256i` hold integer data, but each op specifies what lane","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14551,"byte_end":14627,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/   width of integers the operation uses.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14628,"byte_end":14671,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/ * If the type has `_s` on the end then it's a \"scalar\" operation that","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14672,"byte_end":14745,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/   affects just the lowest lane. The other lanes are generally copied forward","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14746,"byte_end":14826,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/   from one of the inputs, though the details there vary from op to op.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14827,"byte_end":14901,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ * The SIMD types are often referred to as \"registers\" because each SIMD","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14902,"byte_end":14977,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/   typed value represents exactly one CPU register when you're doing work.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":14978,"byte_end":15055,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15056,"byte_end":15059,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ## Operations","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15060,"byte_end":15077,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/ There's many operations that can be performed. When possible, `safe_arch`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15078,"byte_end":15155,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ tries to follow normal Rust naming (eg: adding is still `add` and left","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15156,"byte_end":15230,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ shifting is still `shl`), but if an operation doesn't normally exist at all","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15231,"byte_end":15310,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ in Rust then we basically have to make something up.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15311,"byte_end":15367,"line_start":25,"line_end":25,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15368,"byte_end":15371,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Many operations have more than one variant, such as `add` and also","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15372,"byte_end":15442,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `add_saturating`. In this case, `safe_arch` puts the \"core operation\" first","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15443,"byte_end":15522,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ and then any \"modifiers\" go after, which isn't how you might normally say it","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15523,"byte_end":15603,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ in English, but it makes the list of functions sort better.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15604,"byte_end":15667,"line_start":30,"line_end":30,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15668,"byte_end":15671,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ As a general note on SIMD terminology: When an operation uses the same","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15672,"byte_end":15746,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ indexed lane in two _different_ registers to determine the output, that is a","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15747,"byte_end":15827,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ \"vertical\" operation. When an operation uses more than one lane in the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15828,"byte_end":15902,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ _same_ register to determine the output, that is a \"horizontal\" operation.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15903,"byte_end":15981,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ * Vertical: `out[0] = a[0] + b[0]`, `out[1] = a[1] + b[1]`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":15982,"byte_end":16044,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ * Horizontal: `out[0] = a[0] + a[1]`, `out[1] = b[0] + b[1]`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16045,"byte_end":16109,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16110,"byte_end":16113,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Operation Glossary","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16114,"byte_end":16139,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here follows the list of all the main operations and their explanations.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16140,"byte_end":16216,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16217,"byte_end":16220,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ * `abs`: Absolute value (wrapping).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16221,"byte_end":16260,"line_start":42,"line_end":42,"column_start":1,"column_end":40}},{"value":"/ * `add`: Addition. This is \"wrapping\" by default, though some other types of","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16261,"byte_end":16341,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/   addition are available. Remember that wrapping signed addition is the same","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16342,"byte_end":16422,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   as wrapping unsigned addition.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16423,"byte_end":16459,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/ * `average`: Averages the two inputs.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16460,"byte_end":16501,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ * `bitand`: Bitwise And, `a & b`, like [the trait](core::ops::BitAnd).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16502,"byte_end":16576,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ * `bitandnot`: Bitwise `(!a) & b`. This seems a little funny at first but","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16577,"byte_end":16654,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/   it's useful for clearing bits. The output will be based on the `b` side's","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16655,"byte_end":16734,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/   bit pattern, but with all active bits in `a` cleared:","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16735,"byte_end":16794,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/   * `bitandnot(0b0010, 0b1011) == 0b1001`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16795,"byte_end":16840,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * `bitor`: Bitwise Or, `a | b`, like [the trait](core::ops::BitOr).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16841,"byte_end":16912,"line_start":52,"line_end":52,"column_start":1,"column_end":72}},{"value":"/ * `bitxor`: Bitwise eXclusive Or, `a ^ b`, like [the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16913,"byte_end":16969,"line_start":53,"line_end":53,"column_start":1,"column_end":57}},{"value":"/   trait](core::ops::BitXor).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":16970,"byte_end":17002,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ * `blend`: Merge the data lanes of two SIMD values by taking either the `b`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17003,"byte_end":17082,"line_start":55,"line_end":55,"column_start":1,"column_end":80}},{"value":"/   value or `a` value for each lane. Depending on the instruction, the blend","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17083,"byte_end":17162,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/   mask can be either an immediate or a runtime value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17163,"byte_end":17220,"line_start":57,"line_end":57,"column_start":1,"column_end":58}},{"value":"/ * `cast`: Convert between data types while preserving the exact bit","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17221,"byte_end":17292,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/   patterns, like how [`transmute`](core::mem::transmute) works.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17293,"byte_end":17360,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/ * `ceil`: \"Ceiling\", rounds towards positive infinity.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17361,"byte_end":17419,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/ * `cmp`: Numeric comparisons of various kinds. This generally gives \"mask\"","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17420,"byte_end":17498,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/   output where the output value is of the same data type as the inputs, but","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17499,"byte_end":17578,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/   with all the bits in a \"true\" lane as 1 and all the bits in a \"false\" lane","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17579,"byte_end":17659,"line_start":63,"line_end":63,"column_start":1,"column_end":81}},{"value":"/   as 0. Remember that with floating point values all 1s bits is a NaN, and","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17660,"byte_end":17738,"line_start":64,"line_end":64,"column_start":1,"column_end":79}},{"value":"/   with signed integers all 1s bits is -1.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17739,"byte_end":17784,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/   * An \"Ordered comparison\" checks if _neither_ floating point value is NaN.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17785,"byte_end":17865,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/   * An \"Unordered comparison\" checks if _either_ floating point value is","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17866,"byte_end":17942,"line_start":67,"line_end":67,"column_start":1,"column_end":77}},{"value":"/     NaN.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17943,"byte_end":17955,"line_start":68,"line_end":68,"column_start":1,"column_end":13}},{"value":"/ * `convert`: This does some sort of numeric type change. The details can","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":17956,"byte_end":18032,"line_start":69,"line_end":69,"column_start":1,"column_end":77}},{"value":"/   vary wildly. Generally, if the number of lanes goes down then the lowest","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18033,"byte_end":18111,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   lanes will be kept. If the number of lanes goes up then the new high lanes","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18112,"byte_end":18192,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/   will be zero.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18193,"byte_end":18212,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ * `div`: Division.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18213,"byte_end":18235,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ * `dot_product`: This works like the matrix math operation. The lanes are","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18236,"byte_end":18313,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/   multiplied and then the results are summed up into a single value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18314,"byte_end":18386,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/ * `duplicate`: Copy the even or odd indexed lanes to the other set of lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18387,"byte_end":18467,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/   Eg, `[1, 2, 3, 4]` becomes `[1, 1, 3, 3]` or `[2, 2, 4, 4]`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18468,"byte_end":18534,"line_start":77,"line_end":77,"column_start":1,"column_end":67}},{"value":"/ * `extract`: Get a value from the lane of a SIMD type into a scalar type.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18535,"byte_end":18612,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ * `floor`: Rounds towards negative infinity.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18613,"byte_end":18661,"line_start":79,"line_end":79,"column_start":1,"column_end":49}},{"value":"/ * `fused`: All the fused operations are a multiply as well as some sort of","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18662,"byte_end":18740,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/   adding or subtracting. The details depend on which fused operation you","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18741,"byte_end":18817,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/   select. The benefit of this operation over a non-fused operation are that","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18818,"byte_end":18897,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/   it can compute slightly faster than doing the mul and add separately, and","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18898,"byte_end":18977,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/   also the output can have higher accuracy in the result.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":18978,"byte_end":19039,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/ * `insert`: The opposite of `extract`, this puts a new value into a","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19040,"byte_end":19111,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/   particular lane of a SIMD type.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19112,"byte_end":19149,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/ * `load`: Reads an address and makes a SIMD register value. The details can","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19150,"byte_end":19229,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/   vary because there's more than one type of `load`, but generally this is a","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19230,"byte_end":19310,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/   `&T -> U` style operation.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19311,"byte_end":19343,"line_start":89,"line_end":89,"column_start":1,"column_end":33}},{"value":"/ * `max`: Picks the larger value from each of the two inputs.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19344,"byte_end":19408,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/ * `min`: Picks the smaller value from each of the two inputs.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19409,"byte_end":19474,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ * `mul`: Multiplication. For floating point this is just \"normal\"","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19475,"byte_end":19544,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/   multiplication, but for integer types you tend to have some options. An","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19545,"byte_end":19622,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/   integer multiplication of X bits will produce a 2X bit output, so","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19623,"byte_end":19694,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/   generally you'll get to pick if you want to keep the high half of that,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19695,"byte_end":19772,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   the low half of that (a normal \"wrapping\" mul), or \"widen\" the outputs to","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19773,"byte_end":19852,"line_start":96,"line_end":96,"column_start":1,"column_end":80}},{"value":"/   be all the bits at the expense of not multiplying half the lanes the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19853,"byte_end":19927,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/   lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19928,"byte_end":19940,"line_start":98,"line_end":98,"column_start":1,"column_end":13}},{"value":"/ * `pack`: Take the integers in the `a` and `b` inputs, reduce them to fit","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":19941,"byte_end":20018,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/   within the half-sized integer type (eg: `i16` to `i8`), and pack them all","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20019,"byte_end":20098,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/   together into the output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20099,"byte_end":20130,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ * `population`: The \"population\" operations refer to the bits within an","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20131,"byte_end":20206,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   integer. Either counting them or adjusting them in various ways.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20207,"byte_end":20277,"line_start":103,"line_end":103,"column_start":1,"column_end":71}},{"value":"/ * `rdrand`: Use the hardware RNG to make a random value of the given length.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20278,"byte_end":20358,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ * `rdseed`: Use the hardware RNG to make a random seed of the given length.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20359,"byte_end":20438,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/   This is less commonly available, but theoretically an improvement over","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20439,"byte_end":20515,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/   `rdrand` in that if you have to combine more than one usage of this","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20516,"byte_end":20589,"line_start":107,"line_end":107,"column_start":1,"column_end":74}},{"value":"/   operation to make your full seed size then the guess difficulty rises at a","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20590,"byte_end":20670,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/   multiplicative rate instead of just an additive rate. For example, two","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20671,"byte_end":20747,"line_start":109,"line_end":109,"column_start":1,"column_end":77}},{"value":"/   `u64` outputs concatenated to a single `u128` have a guess difficulty of","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20748,"byte_end":20826,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/   2^(64*64) with `rdseed` but only 2^(64+64) with `rdrand`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20827,"byte_end":20890,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ * `read_timestamp_counter`: Lets you read the CPU's cycle counter, which","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20891,"byte_end":20967,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/   doesn't strictly mean anything in particular since even the CPU's clock","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":20968,"byte_end":21045,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/   rate isn't even stable over time, but you might find it interesting as an","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21046,"byte_end":21125,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/   approximation during benchmarks, or something like that.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21126,"byte_end":21188,"line_start":115,"line_end":115,"column_start":1,"column_end":63}},{"value":"/ * `reciprocal`: Turns `x` into `1/x`. Can also be combined with a `sqrt`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21189,"byte_end":21265,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/   operation.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21266,"byte_end":21282,"line_start":117,"line_end":117,"column_start":1,"column_end":17}},{"value":"/ * `round`: Convert floating point values to whole numbers, according to one","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21283,"byte_end":21362,"line_start":118,"line_end":118,"column_start":1,"column_end":80}},{"value":"/   of several available methods.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21363,"byte_end":21398,"line_start":119,"line_end":119,"column_start":1,"column_end":36}},{"value":"/ * `set`: Places a list of scalar values into a SIMD lane. Conceptually","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21399,"byte_end":21473,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/   similar to how building an array works in Rust.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21474,"byte_end":21527,"line_start":121,"line_end":121,"column_start":1,"column_end":54}},{"value":"/ * `splat`: Not generally an operation of its own, but a modifier to other","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21528,"byte_end":21605,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/   operations such as `load` and `set`. This will copy a given value across a","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21606,"byte_end":21686,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/   SIMD type as many times as it can be copied. For example, a 32-bit value","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21687,"byte_end":21765,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   splatted into a 128-bit register will be copied four times.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21766,"byte_end":21831,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ * `shl`: Bit shift left. New bits shifted in are always 0. Because the shift","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21832,"byte_end":21912,"line_start":126,"line_end":126,"column_start":1,"column_end":81}},{"value":"/   is the same for both signed and unsigned values, this crate simply marks","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21913,"byte_end":21991,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/   left shift as always being an unsigned operation.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":21992,"byte_end":22047,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/   * You can shift by an immediate value (\"imm\"), all lanes by the same value","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22048,"byte_end":22128,"line_start":129,"line_end":129,"column_start":1,"column_end":81}},{"value":"/     (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22129,"byte_end":22185,"line_start":130,"line_end":130,"column_start":1,"column_end":57}},{"value":"/ * `shr`: Bit shift right. This comes in two forms: \"Arithmetic\" shifts shift","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22186,"byte_end":22266,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   in the starting sign bit (which preserves the sign of the value), and","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22267,"byte_end":22342,"line_start":132,"line_end":132,"column_start":1,"column_end":76}},{"value":"/   \"Logical\" shifts shift in 0 regardless of the starting sign bit (so the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22343,"byte_end":22420,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/   result ends up being positive). With normal Rust types, signed integers","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22421,"byte_end":22498,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/   use arithmetic shifts and unsigned integers use logical shifts, so these","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22499,"byte_end":22577,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   functions are marked as being for signed or unsigned integers","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22578,"byte_end":22645,"line_start":136,"line_end":136,"column_start":1,"column_end":68}},{"value":"/   appropriately.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22646,"byte_end":22666,"line_start":137,"line_end":137,"column_start":1,"column_end":21}},{"value":"/   * As with `shl`, you can shift by an immediate value (\"imm\"), all lanes by","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22667,"byte_end":22747,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/     the same value (\"all\"), or each lane by its own value (\"each\").","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22748,"byte_end":22819,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/ * `sign_apply`: Multiplies one set of values by the signum (1, 0, or -1) of","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22820,"byte_end":22899,"line_start":140,"line_end":140,"column_start":1,"column_end":80}},{"value":"/   another set of values.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22900,"byte_end":22928,"line_start":141,"line_end":141,"column_start":1,"column_end":29}},{"value":"/ * `sqrt`: Square Root.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22929,"byte_end":22955,"line_start":142,"line_end":142,"column_start":1,"column_end":27}},{"value":"/ * `store`: Writes a SIMD value to a memory location.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":22956,"byte_end":23012,"line_start":143,"line_end":143,"column_start":1,"column_end":57}},{"value":"/ * `string_search`: A rather specialized instruction that lets you do byte","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23013,"byte_end":23090,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/   based searching within a register. This lets you do some very high speed","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23091,"byte_end":23169,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/   searching through ASCII strings when the stars align.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23170,"byte_end":23229,"line_start":146,"line_end":146,"column_start":1,"column_end":60}},{"value":"/ * `sub`: Subtract.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23230,"byte_end":23252,"line_start":147,"line_end":147,"column_start":1,"column_end":23}},{"value":"/ * `shuffle`: This lets you re-order the data lanes. Sometimes x86/x64 calls","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23253,"byte_end":23332,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/   this is called \"shuffle\", and sometimes it's called \"permute\", and there's","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23333,"byte_end":23413,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/   no particular reasoning behind the different names, so we just call them","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23414,"byte_end":23492,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/   all shuffle.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23493,"byte_end":23511,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/   * `shuffle_{args}_{lane-type}_{lane-sources}_{simd-type}`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23512,"byte_end":23576,"line_start":152,"line_end":152,"column_start":1,"column_end":65}},{"value":"/   * \"args\" is the input arguments: `a` (one arg) or `ab` (two args), then","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23577,"byte_end":23654,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/     either `v` (runtime-varying) or `i` (immediate). All the immediate","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23655,"byte_end":23729,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/     shuffles are macros, of course.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23730,"byte_end":23769,"line_start":155,"line_end":155,"column_start":1,"column_end":40}},{"value":"/   * \"lane type\" is `f32`, `f64`, `i8`, etc. If there's a `z` after the type","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23770,"byte_end":23849,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/     then you'll also be able to zero an output position instead of making it","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23850,"byte_end":23930,"line_start":157,"line_end":157,"column_start":1,"column_end":81}},{"value":"/     come from a particular source lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23931,"byte_end":23974,"line_start":158,"line_end":158,"column_start":1,"column_end":44}},{"value":"/   * \"lane sources\" is generally either \"all\" which means that all lanes can","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":23975,"byte_end":24054,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/     go to all other lanes, or \"half\" which means that each half of the lanes","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24055,"byte_end":24135,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     is isolated from the other half, and you can't cross data between the","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24136,"byte_end":24213,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/     two halves, only within a half (this is how most of the 256-bit x86/x64","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24214,"byte_end":24293,"line_start":162,"line_end":162,"column_start":1,"column_end":80}},{"value":"/     shuffles work).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24294,"byte_end":24317,"line_start":163,"line_end":163,"column_start":1,"column_end":24}},{"value":"/ * `unpack`: Takes a SIMD value and gets out some of the lanes while widening","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24318,"byte_end":24398,"line_start":164,"line_end":164,"column_start":1,"column_end":81}},{"value":"/   them, such as converting `i16` to `i32`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\naming_conventions.rs","byte_start":24399,"byte_end":24445,"line_start":165,"line_end":165,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719253,"byte_end":8719257,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m128","qualname":"::x86_x64::m128_::m128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of four `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of four `f32` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8718930,"byte_end":8718990,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8718991,"byte_end":8718994,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8718995,"byte_end":8719073,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719074,"byte_end":8719147,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719148,"byte_end":8719189,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719190,"byte_end":8719210,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719211,"byte_end":8719241,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719258,"byte_end":8719268,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m128_::m128::0","value":"core::arch::x86_64::__m128","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719685,"byte_end":8719693,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128` to an array.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719516,"byte_end":8719554,"line_start":26,"line_end":26,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719557,"byte_end":8719560,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719563,"byte_end":8719641,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719644,"byte_end":8719655,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719658,"byte_end":8719675,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719920,"byte_end":8719930,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719737,"byte_end":8719773,"line_start":35,"line_end":35,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719776,"byte_end":8719779,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m128::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719782,"byte_end":8719859,"line_start":37,"line_end":37,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719862,"byte_end":8719876,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719879,"byte_end":8719890,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719893,"byte_end":8719910,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720164,"byte_end":8720171,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719980,"byte_end":8720043,"line_start":47,"line_end":47,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720046,"byte_end":8720049,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720052,"byte_end":8720120,"line_start":49,"line_end":49,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720123,"byte_end":8720134,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720137,"byte_end":8720154,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720429,"byte_end":8720438,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;4]`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720241,"byte_end":8720304,"line_start":56,"line_end":56,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720307,"byte_end":8720310,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all four lanes at once.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720313,"byte_end":8720385,"line_start":58,"line_end":58,"column_start":3,"column_end":75}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720388,"byte_end":8720399,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720402,"byte_end":8720419,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8724984,"byte_end":8724989,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m128d","qualname":"::x86_x64::m128d_::m128d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of two `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of two `f64` values.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8724661,"byte_end":8724721,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8724722,"byte_end":8724725,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 2]`. The main difference is that","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8724726,"byte_end":8724804,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 16 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8724805,"byte_end":8724878,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8724879,"byte_end":8724920,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8724921,"byte_end":8724941,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8724942,"byte_end":8724972,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8724990,"byte_end":8725001,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128d_::m128d::0","value":"core::arch::x86_64::__m128d","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725424,"byte_end":8725432,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m128d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m128d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m128d` to an array.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725254,"byte_end":8725293,"line_start":26,"line_end":26,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725296,"byte_end":8725299,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725302,"byte_end":8725380,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725383,"byte_end":8725394,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725397,"byte_end":8725414,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725661,"byte_end":8725671,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m128d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m128d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m128d`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725476,"byte_end":8725513,"line_start":35,"line_end":35,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725516,"byte_end":8725519,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m128d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725522,"byte_end":8725600,"line_start":37,"line_end":37,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725603,"byte_end":8725617,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725620,"byte_end":8725631,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725634,"byte_end":8725651,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725902,"byte_end":8725909,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m128d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725721,"byte_end":8725785,"line_start":47,"line_end":47,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725788,"byte_end":8725791,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725794,"byte_end":8725858,"line_start":49,"line_end":49,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725861,"byte_end":8725872,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725875,"byte_end":8725892,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726164,"byte_end":8726173,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m128d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;2]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;2]`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725979,"byte_end":8726043,"line_start":56,"line_end":56,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726046,"byte_end":8726049,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726052,"byte_end":8726120,"line_start":58,"line_end":58,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726123,"byte_end":8726134,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726137,"byte_end":8726154,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731677,"byte_end":8731682,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m128i","qualname":"::x86_x64::m128i_::m128i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 128-bit SSE register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 128-bit SSE register of integer data.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731197,"byte_end":8731253,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731254,"byte_end":8731257,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731258,"byte_end":8731331,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731332,"byte_end":8731410,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731411,"byte_end":8731429,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731430,"byte_end":8731510,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731511,"byte_end":8731588,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731589,"byte_end":8731613,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731614,"byte_end":8731634,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731635,"byte_end":8731665,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731683,"byte_end":8731694,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m128i_::m128i::0","value":"core::arch::x86_64::__m128i","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739881,"byte_end":8739885,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"m256","qualname":"::x86_x64::m256_::m256","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of eight `f32` lanes.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of eight `f32` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739557,"byte_end":8739618,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739619,"byte_end":8739622,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f32; 8]`. The main difference is that","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739623,"byte_end":8739701,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739702,"byte_end":8739775,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739776,"byte_end":8739817,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739818,"byte_end":8739838,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739839,"byte_end":8739869,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739886,"byte_end":8739896,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"name":"0","qualname":"::x86_x64::m256_::m256::0","value":"core::arch::x86_64::__m256","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740313,"byte_end":8740321,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256>::to_array","value":"pub fn to_array(Self) -> [f32; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256` to an array.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740144,"byte_end":8740182,"line_start":26,"line_end":26,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740185,"byte_end":8740188,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740191,"byte_end":8740269,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740272,"byte_end":8740283,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740286,"byte_end":8740303,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740548,"byte_end":8740558,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256>::from_array","value":"pub fn from_array([f32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740365,"byte_end":8740401,"line_start":35,"line_end":35,"column_start":3,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740404,"byte_end":8740407,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m256::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740410,"byte_end":8740487,"line_start":37,"line_end":37,"column_start":3,"column_end":80}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740490,"byte_end":8740504,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740507,"byte_end":8740518,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740521,"byte_end":8740538,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740787,"byte_end":8740794,"line_start":50,"line_end":50,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256>::to_bits","value":"pub fn to_bits(Self) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740602,"byte_end":8740665,"line_start":45,"line_end":45,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740668,"byte_end":8740671,"line_start":46,"line_end":46,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::to_bits`](f32::to_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740674,"byte_end":8740743,"line_start":47,"line_end":47,"column_start":3,"column_end":72}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740746,"byte_end":8740757,"line_start":48,"line_end":48,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740760,"byte_end":8740777,"line_start":49,"line_end":49,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741053,"byte_end":8741062,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256>::from_bits","value":"pub fn from_bits([u32; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these floats (`[u32;8]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these floats (`[u32;8]`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740864,"byte_end":8740927,"line_start":54,"line_end":54,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740930,"byte_end":8740933,"line_start":55,"line_end":55,"column_start":3,"column_end":6}},{"value":"/ Like [`f32::from_bits`](f32::from_bits), but all eight lanes at once.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740936,"byte_end":8741009,"line_start":56,"line_end":56,"column_start":3,"column_end":76}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741012,"byte_end":8741023,"line_start":57,"line_end":57,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741026,"byte_end":8741043,"line_start":58,"line_end":58,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746849,"byte_end":8746854,"line_start":16,"line_end":16,"column_start":12,"column_end":17},"name":"m256d","qualname":"::x86_x64::m256d_::m256d","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of four `f64` values.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of four `f64` values.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746525,"byte_end":8746586,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746587,"byte_end":8746590,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * This is _very similar to_ having `[f64; 4]`. The main difference is that","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746591,"byte_end":8746669,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/   it's aligned to 32 instead of just 4, and of course you can perform","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746670,"byte_end":8746743,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/   various intrinsic operations on it.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746744,"byte_end":8746785,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746786,"byte_end":8746806,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746807,"byte_end":8746837,"line_start":15,"line_end":15,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746855,"byte_end":8746866,"line_start":16,"line_end":16,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256d_::m256d::0","value":"core::arch::x86_64::__m256d","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747289,"byte_end":8747297,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"to_array","qualname":"<m256d>::to_array","value":"pub fn to_array(Self) -> [f64; ]","parent":null,"children":[],"decl_id":null,"docs":" Transmutes the `m256d` to an array.","sig":null,"attributes":[{"value":"/ Transmutes the `m256d` to an array.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747119,"byte_end":8747158,"line_start":26,"line_end":26,"column_start":3,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747161,"byte_end":8747164,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ Same as `m.into()`, just lets you be more explicit about what's happening.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747167,"byte_end":8747245,"line_start":28,"line_end":28,"column_start":3,"column_end":81}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747248,"byte_end":8747259,"line_start":29,"line_end":29,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747262,"byte_end":8747279,"line_start":30,"line_end":30,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747526,"byte_end":8747536,"line_start":41,"line_end":41,"column_start":10,"column_end":20},"name":"from_array","qualname":"<m256d>::from_array","value":"pub fn from_array([f64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Transmutes an array into `m256d`.","sig":null,"attributes":[{"value":"/ Transmutes an array into `m256d`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747341,"byte_end":8747378,"line_start":35,"line_end":35,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747381,"byte_end":8747384,"line_start":36,"line_end":36,"column_start":3,"column_end":6}},{"value":"/ Same as `m256d::from(arr)`, it just lets you be more explicit about what's","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747387,"byte_end":8747465,"line_start":37,"line_end":37,"column_start":3,"column_end":81}},{"value":"/ happening.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747468,"byte_end":8747482,"line_start":38,"line_end":38,"column_start":3,"column_end":17}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747485,"byte_end":8747496,"line_start":39,"line_end":39,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747499,"byte_end":8747516,"line_start":40,"line_end":40,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747767,"byte_end":8747774,"line_start":52,"line_end":52,"column_start":10,"column_end":17},"name":"to_bits","qualname":"<m256d>::to_bits","value":"pub fn to_bits(Self) -> [u64; ]","parent":null,"children":[],"decl_id":null,"docs":" Converts into the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts into the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747586,"byte_end":8747650,"line_start":47,"line_end":47,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747653,"byte_end":8747656,"line_start":48,"line_end":48,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::to_bits`](f64::to_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747659,"byte_end":8747723,"line_start":49,"line_end":49,"column_start":3,"column_end":67}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747726,"byte_end":8747737,"line_start":50,"line_end":50,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747740,"byte_end":8747757,"line_start":51,"line_end":51,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748029,"byte_end":8748038,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"from_bits","qualname":"<m256d>::from_bits","value":"pub fn from_bits([u64; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts from the bit patterns of these doubles (`[u64;4]`).","sig":null,"attributes":[{"value":"/ Converts from the bit patterns of these doubles (`[u64;4]`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747844,"byte_end":8747908,"line_start":56,"line_end":56,"column_start":3,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747911,"byte_end":8747914,"line_start":57,"line_end":57,"column_start":3,"column_end":6}},{"value":"/ Like [`f64::from_bits`](f64::from_bits), but both lanes at once.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747917,"byte_end":8747985,"line_start":58,"line_end":58,"column_start":3,"column_end":71}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747988,"byte_end":8747999,"line_start":59,"line_end":59,"column_start":3,"column_end":14}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748002,"byte_end":8748019,"line_start":60,"line_end":60,"column_start":3,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753542,"byte_end":8753547,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"m256i","qualname":"::x86_x64::m256i_::m256i","value":"","parent":null,"children":[],"decl_id":null,"docs":" The data for a 256-bit AVX register of integer data.","sig":null,"attributes":[{"value":"/ The data for a 256-bit AVX register of integer data.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753062,"byte_end":8753118,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753119,"byte_end":8753122,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * The exact layout to view the type as depends on the operation used.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753123,"byte_end":8753196,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ * `From` and `Into` impls are provided for all the relevant signed integer","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753197,"byte_end":8753275,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   array types.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753276,"byte_end":8753294,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ * Formatting impls print as four `i32` values just because they have to pick","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753295,"byte_end":8753375,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/   something. If you want an alternative you can turn it into an array and","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753376,"byte_end":8753453,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/   print as you like.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753454,"byte_end":8753478,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"repr(transparent)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753479,"byte_end":8753499,"line_start":17,"line_end":17,"column_start":1,"column_end":21}},{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753500,"byte_end":8753530,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753548,"byte_end":8753559,"line_start":19,"line_end":19,"column_start":18,"column_end":29},"name":"0","qualname":"::x86_x64::m256i_::m256i::0","value":"core::arch::x86_64::__m256i","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761699,"byte_end":8761707,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"add_m128","qualname":"::x86_x64::sse::add_m128","value":"pub fn add_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128(a, b).to_array();\n assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761359,"byte_end":8761380,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761381,"byte_end":8761388,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761389,"byte_end":8761412,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761413,"byte_end":8761464,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761465,"byte_end":8761516,"line_start":9,"line_end":9,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761517,"byte_end":8761555,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [6.0, 8.0, 10.0, 12.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761556,"byte_end":8761598,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761599,"byte_end":8761606,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761607,"byte_end":8761618,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761619,"byte_end":8761636,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762142,"byte_end":8762152,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"add_m128_s","qualname":"::x86_x64::sse::add_m128_s","value":"pub fn add_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a + b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = add_m128_s(a, b).to_array();\n assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a + b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761779,"byte_end":8761823,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761824,"byte_end":8761831,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761832,"byte_end":8761855,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761856,"byte_end":8761907,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761908,"byte_end":8761959,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/ let c = add_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8761960,"byte_end":8762000,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [6.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762001,"byte_end":8762041,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762042,"byte_end":8762049,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762050,"byte_end":8762061,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762062,"byte_end":8762079,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762564,"byte_end":8762575,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"bitand_m128","qualname":"::x86_x64::sse::bitand_m128","value":"pub fn bitand_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitand_m128(a, b).to_array();\n assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762224,"byte_end":8762244,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762245,"byte_end":8762252,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762253,"byte_end":8762276,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762277,"byte_end":8762328,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762329,"byte_end":8762380,"line_start":39,"line_end":39,"column_start":1,"column_end":52}},{"value":"/ let c = bitand_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762381,"byte_end":8762422,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762423,"byte_end":8762463,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762464,"byte_end":8762471,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762472,"byte_end":8762483,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762484,"byte_end":8762501,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762993,"byte_end":8763007,"line_start":61,"line_end":61,"column_start":8,"column_end":22},"name":"bitandnot_m128","qualname":"::x86_x64::sse::bitandnot_m128","value":"pub fn bitandnot_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitandnot_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762647,"byte_end":8762670,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762671,"byte_end":8762678,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762679,"byte_end":8762702,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762703,"byte_end":8762754,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762755,"byte_end":8762806,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let c = bitandnot_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762807,"byte_end":8762851,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(c, [0.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762852,"byte_end":8762892,"line_start":56,"line_end":56,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762893,"byte_end":8762900,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762901,"byte_end":8762912,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8762913,"byte_end":8762930,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763455,"byte_end":8763471,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"cmp_eq_mask_m128","qualname":"::x86_x64::sse::cmp_eq_mask_m128","value":"pub fn cmp_eq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763082,"byte_end":8763104,"line_start":65,"line_end":65,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763105,"byte_end":8763108,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763109,"byte_end":8763125,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763126,"byte_end":8763133,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763134,"byte_end":8763157,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763158,"byte_end":8763209,"line_start":70,"line_end":70,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763210,"byte_end":8763261,"line_start":71,"line_end":71,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763262,"byte_end":8763307,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, u32::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763308,"byte_end":8763354,"line_start":73,"line_end":73,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763355,"byte_end":8763362,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763363,"byte_end":8763374,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763375,"byte_end":8763392,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763950,"byte_end":8763968,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"cmp_eq_mask_m128_s","qualname":"::x86_x64::sse::cmp_eq_mask_m128_s","value":"pub fn cmp_eq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763545,"byte_end":8763590,"line_start":82,"line_end":82,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763591,"byte_end":8763594,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763595,"byte_end":8763611,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763612,"byte_end":8763619,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763620,"byte_end":8763643,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763644,"byte_end":8763695,"line_start":87,"line_end":87,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763696,"byte_end":8763747,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_eq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763748,"byte_end":8763795,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763796,"byte_end":8763849,"line_start":90,"line_end":90,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763850,"byte_end":8763857,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763858,"byte_end":8763869,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8763870,"byte_end":8763887,"line_start":93,"line_end":93,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764422,"byte_end":8764438,"line_start":112,"line_end":112,"column_start":8,"column_end":24},"name":"cmp_ge_mask_m128","qualname":"::x86_x64::sse::cmp_ge_mask_m128","value":"pub fn cmp_ge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764042,"byte_end":8764064,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764065,"byte_end":8764068,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764069,"byte_end":8764085,"line_start":101,"line_end":101,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764086,"byte_end":8764093,"line_start":102,"line_end":102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764094,"byte_end":8764117,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764118,"byte_end":8764169,"line_start":104,"line_end":104,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764170,"byte_end":8764221,"line_start":105,"line_end":105,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764222,"byte_end":8764267,"line_start":106,"line_end":106,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764268,"byte_end":8764321,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764322,"byte_end":8764329,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764330,"byte_end":8764341,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764342,"byte_end":8764359,"line_start":110,"line_end":110,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764945,"byte_end":8764963,"line_start":129,"line_end":129,"column_start":8,"column_end":26},"name":"cmp_ge_mask_m128_s","qualname":"::x86_x64::sse::cmp_ge_mask_m128_s","value":"pub fn cmp_ge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764512,"byte_end":8764557,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764558,"byte_end":8764561,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764562,"byte_end":8764578,"line_start":118,"line_end":118,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764579,"byte_end":8764586,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764587,"byte_end":8764610,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764611,"byte_end":8764662,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764663,"byte_end":8764714,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764715,"byte_end":8764762,"line_start":123,"line_end":123,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764763,"byte_end":8764844,"line_start":124,"line_end":124,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764845,"byte_end":8764852,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764853,"byte_end":8764864,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8764865,"byte_end":8764882,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765409,"byte_end":8765425,"line_start":146,"line_end":146,"column_start":8,"column_end":24},"name":"cmp_gt_mask_m128","qualname":"::x86_x64::sse::cmp_gt_mask_m128","value":"pub fn cmp_gt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765037,"byte_end":8765058,"line_start":133,"line_end":133,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765059,"byte_end":8765062,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765063,"byte_end":8765079,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765080,"byte_end":8765087,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765088,"byte_end":8765111,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765112,"byte_end":8765163,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765164,"byte_end":8765215,"line_start":139,"line_end":139,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765216,"byte_end":8765261,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765262,"byte_end":8765308,"line_start":141,"line_end":141,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765309,"byte_end":8765316,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765317,"byte_end":8765328,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765329,"byte_end":8765346,"line_start":144,"line_end":144,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765931,"byte_end":8765949,"line_start":163,"line_end":163,"column_start":8,"column_end":26},"name":"cmp_gt_mask_m128_s","qualname":"::x86_x64::sse::cmp_gt_mask_m128_s","value":"pub fn cmp_gt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765499,"byte_end":8765543,"line_start":150,"line_end":150,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765544,"byte_end":8765547,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765548,"byte_end":8765564,"line_start":152,"line_end":152,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765565,"byte_end":8765572,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765573,"byte_end":8765596,"line_start":154,"line_end":154,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765597,"byte_end":8765648,"line_start":155,"line_end":155,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765649,"byte_end":8765700,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_gt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765701,"byte_end":8765748,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765749,"byte_end":8765830,"line_start":158,"line_end":158,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765831,"byte_end":8765838,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765839,"byte_end":8765850,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8765851,"byte_end":8765868,"line_start":161,"line_end":161,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766396,"byte_end":8766412,"line_start":180,"line_end":180,"column_start":8,"column_end":24},"name":"cmp_le_mask_m128","qualname":"::x86_x64::sse::cmp_le_mask_m128","value":"pub fn cmp_le_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766023,"byte_end":8766045,"line_start":167,"line_end":167,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766046,"byte_end":8766049,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766050,"byte_end":8766066,"line_start":169,"line_end":169,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766067,"byte_end":8766074,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766075,"byte_end":8766098,"line_start":171,"line_end":171,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766099,"byte_end":8766150,"line_start":172,"line_end":172,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766151,"byte_end":8766202,"line_start":173,"line_end":173,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766203,"byte_end":8766248,"line_start":174,"line_end":174,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766249,"byte_end":8766295,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766296,"byte_end":8766303,"line_start":176,"line_end":176,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766304,"byte_end":8766315,"line_start":177,"line_end":177,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766316,"byte_end":8766333,"line_start":178,"line_end":178,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766919,"byte_end":8766937,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"cmp_le_mask_m128_s","qualname":"::x86_x64::sse::cmp_le_mask_m128_s","value":"pub fn cmp_le_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766486,"byte_end":8766531,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766532,"byte_end":8766535,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766536,"byte_end":8766552,"line_start":186,"line_end":186,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766553,"byte_end":8766560,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766561,"byte_end":8766584,"line_start":188,"line_end":188,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766585,"byte_end":8766636,"line_start":189,"line_end":189,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766637,"byte_end":8766688,"line_start":190,"line_end":190,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_le_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766689,"byte_end":8766736,"line_start":191,"line_end":191,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766737,"byte_end":8766818,"line_start":192,"line_end":192,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766819,"byte_end":8766826,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766827,"byte_end":8766838,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8766839,"byte_end":8766856,"line_start":195,"line_end":195,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767376,"byte_end":8767392,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"cmp_lt_mask_m128","qualname":"::x86_x64::sse::cmp_lt_mask_m128","value":"pub fn cmp_lt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767011,"byte_end":8767032,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767033,"byte_end":8767036,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767037,"byte_end":8767053,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767054,"byte_end":8767061,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767062,"byte_end":8767085,"line_start":205,"line_end":205,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767086,"byte_end":8767137,"line_start":206,"line_end":206,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767138,"byte_end":8767189,"line_start":207,"line_end":207,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767190,"byte_end":8767235,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767236,"byte_end":8767275,"line_start":209,"line_end":209,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767276,"byte_end":8767283,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767284,"byte_end":8767295,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767296,"byte_end":8767313,"line_start":212,"line_end":212,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767898,"byte_end":8767916,"line_start":231,"line_end":231,"column_start":8,"column_end":26},"name":"cmp_lt_mask_m128_s","qualname":"::x86_x64::sse::cmp_lt_mask_m128_s","value":"pub fn cmp_lt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767466,"byte_end":8767510,"line_start":218,"line_end":218,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767511,"byte_end":8767514,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767515,"byte_end":8767531,"line_start":220,"line_end":220,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767532,"byte_end":8767539,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767540,"byte_end":8767563,"line_start":222,"line_end":222,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767564,"byte_end":8767615,"line_start":223,"line_end":223,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767616,"byte_end":8767667,"line_start":224,"line_end":224,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_lt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767668,"byte_end":8767715,"line_start":225,"line_end":225,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767716,"byte_end":8767797,"line_start":226,"line_end":226,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767798,"byte_end":8767805,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767806,"byte_end":8767817,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767818,"byte_end":8767835,"line_start":229,"line_end":229,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768364,"byte_end":8768381,"line_start":248,"line_end":248,"column_start":8,"column_end":25},"name":"cmp_neq_mask_m128","qualname":"::x86_x64::sse::cmp_neq_mask_m128","value":"pub fn cmp_neq_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8767990,"byte_end":8768012,"line_start":235,"line_end":235,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768013,"byte_end":8768016,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768017,"byte_end":8768033,"line_start":237,"line_end":237,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768034,"byte_end":8768041,"line_start":238,"line_end":238,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768042,"byte_end":8768065,"line_start":239,"line_end":239,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768066,"byte_end":8768117,"line_start":240,"line_end":240,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768118,"byte_end":8768169,"line_start":241,"line_end":241,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768170,"byte_end":8768216,"line_start":242,"line_end":242,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768217,"byte_end":8768263,"line_start":243,"line_end":243,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768264,"byte_end":8768271,"line_start":244,"line_end":244,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768272,"byte_end":8768283,"line_start":245,"line_end":245,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768284,"byte_end":8768301,"line_start":246,"line_end":246,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768855,"byte_end":8768874,"line_start":265,"line_end":265,"column_start":8,"column_end":27},"name":"cmp_neq_mask_m128_s","qualname":"::x86_x64::sse::cmp_neq_mask_m128_s","value":"pub fn cmp_neq_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768456,"byte_end":8768501,"line_start":252,"line_end":252,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768502,"byte_end":8768505,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768506,"byte_end":8768522,"line_start":254,"line_end":254,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768523,"byte_end":8768530,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768531,"byte_end":8768554,"line_start":256,"line_end":256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768555,"byte_end":8768606,"line_start":257,"line_end":257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768607,"byte_end":8768658,"line_start":258,"line_end":258,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_neq_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768659,"byte_end":8768707,"line_start":259,"line_end":259,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 0, 1_f32.to_bits(), 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768708,"byte_end":8768754,"line_start":260,"line_end":260,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768755,"byte_end":8768762,"line_start":261,"line_end":261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768763,"byte_end":8768774,"line_start":262,"line_end":262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768775,"byte_end":8768792,"line_start":263,"line_end":263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769319,"byte_end":8769336,"line_start":282,"line_end":282,"column_start":8,"column_end":25},"name":"cmp_nge_mask_m128","qualname":"::x86_x64::sse::cmp_nge_mask_m128","value":"pub fn cmp_nge_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768949,"byte_end":8768974,"line_start":269,"line_end":269,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768975,"byte_end":8768978,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768979,"byte_end":8768995,"line_start":271,"line_end":271,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8768996,"byte_end":8769003,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769004,"byte_end":8769027,"line_start":273,"line_end":273,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769028,"byte_end":8769079,"line_start":274,"line_end":274,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769080,"byte_end":8769131,"line_start":275,"line_end":275,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769132,"byte_end":8769178,"line_start":276,"line_end":276,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769179,"byte_end":8769218,"line_start":277,"line_end":277,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769219,"byte_end":8769226,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769227,"byte_end":8769238,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769239,"byte_end":8769256,"line_start":280,"line_end":280,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769841,"byte_end":8769860,"line_start":299,"line_end":299,"column_start":8,"column_end":27},"name":"cmp_nge_mask_m128_s","qualname":"::x86_x64::sse::cmp_nge_mask_m128_s","value":"pub fn cmp_nge_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769411,"byte_end":8769459,"line_start":286,"line_end":286,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769460,"byte_end":8769463,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769464,"byte_end":8769480,"line_start":288,"line_end":288,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769481,"byte_end":8769488,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769489,"byte_end":8769512,"line_start":290,"line_end":290,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769513,"byte_end":8769564,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769565,"byte_end":8769616,"line_start":292,"line_end":292,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nge_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769617,"byte_end":8769665,"line_start":293,"line_end":293,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769666,"byte_end":8769740,"line_start":294,"line_end":294,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769741,"byte_end":8769748,"line_start":295,"line_end":295,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769749,"byte_end":8769760,"line_start":296,"line_end":296,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769761,"byte_end":8769778,"line_start":297,"line_end":297,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770311,"byte_end":8770328,"line_start":316,"line_end":316,"column_start":8,"column_end":25},"name":"cmp_ngt_mask_m128","qualname":"::x86_x64::sse::cmp_ngt_mask_m128","value":"pub fn cmp_ngt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769935,"byte_end":8769959,"line_start":303,"line_end":303,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769960,"byte_end":8769963,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769964,"byte_end":8769980,"line_start":305,"line_end":305,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769981,"byte_end":8769988,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8769989,"byte_end":8770012,"line_start":307,"line_end":307,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770013,"byte_end":8770064,"line_start":308,"line_end":308,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770065,"byte_end":8770116,"line_start":309,"line_end":309,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770117,"byte_end":8770163,"line_start":310,"line_end":310,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u32::MAX, u32::MAX, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770164,"byte_end":8770210,"line_start":311,"line_end":311,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770211,"byte_end":8770218,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770219,"byte_end":8770230,"line_start":313,"line_end":313,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770231,"byte_end":8770248,"line_start":314,"line_end":314,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770832,"byte_end":8770851,"line_start":333,"line_end":333,"column_start":8,"column_end":27},"name":"cmp_ngt_mask_m128_s","qualname":"::x86_x64::sse::cmp_ngt_mask_m128_s","value":"pub fn cmp_ngt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770403,"byte_end":8770450,"line_start":320,"line_end":320,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770451,"byte_end":8770454,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770455,"byte_end":8770471,"line_start":322,"line_end":322,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770472,"byte_end":8770479,"line_start":323,"line_end":323,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770480,"byte_end":8770503,"line_start":324,"line_end":324,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770504,"byte_end":8770555,"line_start":325,"line_end":325,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770556,"byte_end":8770607,"line_start":326,"line_end":326,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_ngt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770608,"byte_end":8770656,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770657,"byte_end":8770731,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770732,"byte_end":8770739,"line_start":329,"line_end":329,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770740,"byte_end":8770751,"line_start":330,"line_end":330,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770752,"byte_end":8770769,"line_start":331,"line_end":331,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771303,"byte_end":8771320,"line_start":350,"line_end":350,"column_start":8,"column_end":25},"name":"cmp_nle_mask_m128","qualname":"::x86_x64::sse::cmp_nle_mask_m128","value":"pub fn cmp_nle_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770926,"byte_end":8770951,"line_start":337,"line_end":337,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770952,"byte_end":8770955,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770956,"byte_end":8770972,"line_start":339,"line_end":339,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770973,"byte_end":8770980,"line_start":340,"line_end":340,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8770981,"byte_end":8771004,"line_start":341,"line_end":341,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771005,"byte_end":8771056,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771057,"byte_end":8771108,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771109,"byte_end":8771155,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, 0, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771156,"byte_end":8771202,"line_start":345,"line_end":345,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771203,"byte_end":8771210,"line_start":346,"line_end":346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771211,"byte_end":8771222,"line_start":347,"line_end":347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771223,"byte_end":8771240,"line_start":348,"line_end":348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771825,"byte_end":8771844,"line_start":367,"line_end":367,"column_start":8,"column_end":27},"name":"cmp_nle_mask_m128_s","qualname":"::x86_x64::sse::cmp_nle_mask_m128_s","value":"pub fn cmp_nle_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771395,"byte_end":8771443,"line_start":354,"line_end":354,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771444,"byte_end":8771447,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771448,"byte_end":8771464,"line_start":356,"line_end":356,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771465,"byte_end":8771472,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771473,"byte_end":8771496,"line_start":358,"line_end":358,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771497,"byte_end":8771548,"line_start":359,"line_end":359,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771549,"byte_end":8771600,"line_start":360,"line_end":360,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nle_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771601,"byte_end":8771649,"line_start":361,"line_end":361,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771650,"byte_end":8771724,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771725,"byte_end":8771732,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771733,"byte_end":8771744,"line_start":364,"line_end":364,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771745,"byte_end":8771762,"line_start":365,"line_end":365,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772302,"byte_end":8772319,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"cmp_nlt_mask_m128","qualname":"::x86_x64::sse::cmp_nlt_mask_m128","value":"pub fn cmp_nlt_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771919,"byte_end":8771943,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771944,"byte_end":8771947,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771948,"byte_end":8771964,"line_start":373,"line_end":373,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771965,"byte_end":8771972,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771973,"byte_end":8771996,"line_start":375,"line_end":375,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8771997,"byte_end":8772048,"line_start":376,"line_end":376,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772049,"byte_end":8772100,"line_start":377,"line_end":377,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772101,"byte_end":8772147,"line_start":378,"line_end":378,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772148,"byte_end":8772201,"line_start":379,"line_end":379,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772202,"byte_end":8772209,"line_start":380,"line_end":380,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772210,"byte_end":8772221,"line_start":381,"line_end":381,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772222,"byte_end":8772239,"line_start":382,"line_end":382,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772823,"byte_end":8772842,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"cmp_nlt_mask_m128_s","qualname":"::x86_x64::sse::cmp_nlt_mask_m128_s","value":"pub fn cmp_nlt_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772394,"byte_end":8772441,"line_start":388,"line_end":388,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772442,"byte_end":8772445,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772446,"byte_end":8772462,"line_start":390,"line_end":390,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772463,"byte_end":8772470,"line_start":391,"line_end":391,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772471,"byte_end":8772494,"line_start":392,"line_end":392,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772495,"byte_end":8772546,"line_start":393,"line_end":393,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([2.0, 2.0, 2.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772547,"byte_end":8772598,"line_start":394,"line_end":394,"column_start":1,"column_end":52}},{"value":"/ let c = cmp_nlt_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772599,"byte_end":8772647,"line_start":395,"line_end":395,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772648,"byte_end":8772722,"line_start":396,"line_end":396,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772723,"byte_end":8772730,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772731,"byte_end":8772742,"line_start":398,"line_end":398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772743,"byte_end":8772760,"line_start":399,"line_end":399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773331,"byte_end":8773352,"line_start":418,"line_end":418,"column_start":8,"column_end":29},"name":"cmp_ordered_mask_m128","qualname":"::x86_x64::sse::cmp_ordered_mask_m128","value":"pub fn cmp_ordered_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772917,"byte_end":8772962,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772963,"byte_end":8772966,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772967,"byte_end":8772983,"line_start":407,"line_end":407,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772984,"byte_end":8772991,"line_start":408,"line_end":408,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8772992,"byte_end":8773015,"line_start":409,"line_end":409,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773016,"byte_end":8773077,"line_start":410,"line_end":410,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773078,"byte_end":8773139,"line_start":411,"line_end":411,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_ordered_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773140,"byte_end":8773190,"line_start":412,"line_end":412,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [u32::MAX, 0, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773191,"byte_end":8773230,"line_start":413,"line_end":413,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773231,"byte_end":8773238,"line_start":414,"line_end":414,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773239,"byte_end":8773250,"line_start":415,"line_end":415,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773251,"byte_end":8773268,"line_start":416,"line_end":416,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773903,"byte_end":8773926,"line_start":435,"line_end":435,"column_start":8,"column_end":31},"name":"cmp_ordered_mask_m128_s","qualname":"::x86_x64::sse::cmp_ordered_mask_m128_s","value":"pub fn cmp_ordered_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773427,"byte_end":8773495,"line_start":422,"line_end":422,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773496,"byte_end":8773499,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773500,"byte_end":8773516,"line_start":424,"line_end":424,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773517,"byte_end":8773524,"line_start":425,"line_end":425,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773525,"byte_end":8773548,"line_start":426,"line_end":426,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773549,"byte_end":8773600,"line_start":427,"line_end":427,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773601,"byte_end":8773667,"line_start":428,"line_end":428,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_ordered_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773668,"byte_end":8773720,"line_start":429,"line_end":429,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(c, [u32::MAX, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773721,"byte_end":8773802,"line_start":430,"line_end":430,"column_start":1,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773803,"byte_end":8773810,"line_start":431,"line_end":431,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773811,"byte_end":8773822,"line_start":432,"line_end":432,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8773823,"byte_end":8773840,"line_start":433,"line_end":433,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774421,"byte_end":8774440,"line_start":452,"line_end":452,"column_start":8,"column_end":27},"name":"cmp_unord_mask_m128","qualname":"::x86_x64::sse::cmp_unord_mask_m128","value":"pub fn cmp_unord_mask_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774001,"byte_end":8774040,"line_start":439,"line_end":439,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774041,"byte_end":8774044,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774045,"byte_end":8774061,"line_start":441,"line_end":441,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774062,"byte_end":8774069,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774070,"byte_end":8774093,"line_start":443,"line_end":443,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, f32::NAN, 0.0, f32::NAN]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774094,"byte_end":8774155,"line_start":444,"line_end":444,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([0.0, 0.0, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774156,"byte_end":8774217,"line_start":445,"line_end":445,"column_start":1,"column_end":62}},{"value":"/ let c = cmp_unord_mask_m128(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774218,"byte_end":8774266,"line_start":446,"line_end":446,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, u32::MAX, u32::MAX, u32::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774267,"byte_end":8774320,"line_start":447,"line_end":447,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774321,"byte_end":8774328,"line_start":448,"line_end":448,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774329,"byte_end":8774340,"line_start":449,"line_end":449,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774341,"byte_end":8774358,"line_start":450,"line_end":450,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774978,"byte_end":8774999,"line_start":469,"line_end":469,"column_start":8,"column_end":29},"name":"cmp_unord_mask_m128_s","qualname":"::x86_x64::sse::cmp_unord_mask_m128_s","value":"pub fn cmp_unord_mask_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774517,"byte_end":8774579,"line_start":456,"line_end":456,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774580,"byte_end":8774583,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774584,"byte_end":8774600,"line_start":458,"line_end":458,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774601,"byte_end":8774608,"line_start":459,"line_end":459,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774609,"byte_end":8774632,"line_start":460,"line_end":460,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774633,"byte_end":8774684,"line_start":461,"line_end":461,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([0.0, f32::NAN, f32::NAN, f32::NAN]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774685,"byte_end":8774751,"line_start":462,"line_end":462,"column_start":1,"column_end":67}},{"value":"/ let c = cmp_unord_mask_m128_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774752,"byte_end":8774802,"line_start":463,"line_end":463,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(c, [0, 2_f32.to_bits(), 3_f32.to_bits(), 4_f32.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774803,"byte_end":8774877,"line_start":464,"line_end":464,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774878,"byte_end":8774885,"line_start":465,"line_end":465,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774886,"byte_end":8774897,"line_start":466,"line_end":466,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8774898,"byte_end":8774915,"line_start":467,"line_end":467,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775405,"byte_end":8775422,"line_start":485,"line_end":485,"column_start":8,"column_end":25},"name":"cmp_eq_i32_m128_s","qualname":"::x86_x64::sse::cmp_eq_i32_m128_s","value":"pub fn cmp_eq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane equality.","sig":null,"attributes":[{"value":"/ Low lane equality.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775076,"byte_end":8775098,"line_start":473,"line_end":473,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775099,"byte_end":8775102,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775103,"byte_end":8775120,"line_start":475,"line_end":475,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775121,"byte_end":8775128,"line_start":476,"line_end":476,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775129,"byte_end":8775152,"line_start":477,"line_end":477,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775153,"byte_end":8775204,"line_start":478,"line_end":478,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775205,"byte_end":8775256,"line_start":479,"line_end":479,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775257,"byte_end":8775304,"line_start":480,"line_end":480,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775305,"byte_end":8775312,"line_start":481,"line_end":481,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775313,"byte_end":8775324,"line_start":482,"line_end":482,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775325,"byte_end":8775342,"line_start":483,"line_end":483,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775835,"byte_end":8775852,"line_start":501,"line_end":501,"column_start":8,"column_end":25},"name":"cmp_ge_i32_m128_s","qualname":"::x86_x64::sse::cmp_ge_i32_m128_s","value":"pub fn cmp_ge_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane greater than or equal to.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775490,"byte_end":8775528,"line_start":489,"line_end":489,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775529,"byte_end":8775532,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775533,"byte_end":8775550,"line_start":491,"line_end":491,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775551,"byte_end":8775558,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775559,"byte_end":8775582,"line_start":493,"line_end":493,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775583,"byte_end":8775634,"line_start":494,"line_end":494,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775635,"byte_end":8775686,"line_start":495,"line_end":495,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775687,"byte_end":8775734,"line_start":496,"line_end":496,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775735,"byte_end":8775742,"line_start":497,"line_end":497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775743,"byte_end":8775754,"line_start":498,"line_end":498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775755,"byte_end":8775772,"line_start":499,"line_end":499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776253,"byte_end":8776270,"line_start":517,"line_end":517,"column_start":8,"column_end":25},"name":"cmp_gt_i32_m128_s","qualname":"::x86_x64::sse::cmp_gt_i32_m128_s","value":"pub fn cmp_gt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane greater than.","sig":null,"attributes":[{"value":"/ Low lane greater than.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775920,"byte_end":8775946,"line_start":505,"line_end":505,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775947,"byte_end":8775950,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775951,"byte_end":8775968,"line_start":507,"line_end":507,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775969,"byte_end":8775976,"line_start":508,"line_end":508,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8775977,"byte_end":8776000,"line_start":509,"line_end":509,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([2.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776001,"byte_end":8776052,"line_start":510,"line_end":510,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776053,"byte_end":8776104,"line_start":511,"line_end":511,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_gt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776105,"byte_end":8776152,"line_start":512,"line_end":512,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776153,"byte_end":8776160,"line_start":513,"line_end":513,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776161,"byte_end":8776172,"line_start":514,"line_end":514,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776173,"byte_end":8776190,"line_start":515,"line_end":515,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776680,"byte_end":8776697,"line_start":533,"line_end":533,"column_start":8,"column_end":25},"name":"cmp_le_i32_m128_s","qualname":"::x86_x64::sse::cmp_le_i32_m128_s","value":"pub fn cmp_le_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane less than or equal to.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776338,"byte_end":8776373,"line_start":521,"line_end":521,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776374,"byte_end":8776377,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776378,"byte_end":8776395,"line_start":523,"line_end":523,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776396,"byte_end":8776403,"line_start":524,"line_end":524,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776404,"byte_end":8776427,"line_start":525,"line_end":525,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776428,"byte_end":8776479,"line_start":526,"line_end":526,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776480,"byte_end":8776531,"line_start":527,"line_end":527,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776532,"byte_end":8776579,"line_start":528,"line_end":528,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776580,"byte_end":8776587,"line_start":529,"line_end":529,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776588,"byte_end":8776599,"line_start":530,"line_end":530,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776600,"byte_end":8776617,"line_start":531,"line_end":531,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777095,"byte_end":8777112,"line_start":549,"line_end":549,"column_start":8,"column_end":25},"name":"cmp_lt_i32_m128_s","qualname":"::x86_x64::sse::cmp_lt_i32_m128_s","value":"pub fn cmp_lt_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane less than.","sig":null,"attributes":[{"value":"/ Low lane less than.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776765,"byte_end":8776788,"line_start":537,"line_end":537,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776789,"byte_end":8776792,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776793,"byte_end":8776810,"line_start":539,"line_end":539,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776811,"byte_end":8776818,"line_start":540,"line_end":540,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776819,"byte_end":8776842,"line_start":541,"line_end":541,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([0.5, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776843,"byte_end":8776894,"line_start":542,"line_end":542,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776895,"byte_end":8776946,"line_start":543,"line_end":543,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776947,"byte_end":8776994,"line_start":544,"line_end":544,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8776995,"byte_end":8777002,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777003,"byte_end":8777014,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777015,"byte_end":8777032,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777514,"byte_end":8777532,"line_start":565,"line_end":565,"column_start":8,"column_end":26},"name":"cmp_neq_i32_m128_s","qualname":"::x86_x64::sse::cmp_neq_i32_m128_s","value":"pub fn cmp_neq_i32_m128_s(m128, m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane not equal to.","sig":null,"attributes":[{"value":"/ Low lane not equal to.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777180,"byte_end":8777206,"line_start":553,"line_end":553,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777207,"byte_end":8777210,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777211,"byte_end":8777228,"line_start":555,"line_end":555,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777229,"byte_end":8777236,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777237,"byte_end":8777260,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777261,"byte_end":8777312,"line_start":558,"line_end":558,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777313,"byte_end":8777364,"line_start":559,"line_end":559,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(0_i32, cmp_neq_i32_m128_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777365,"byte_end":8777413,"line_start":560,"line_end":560,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777414,"byte_end":8777421,"line_start":561,"line_end":561,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777422,"byte_end":8777433,"line_start":562,"line_end":562,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777434,"byte_end":8777451,"line_start":563,"line_end":563,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8778033,"byte_end":8778059,"line_start":581,"line_end":581,"column_start":8,"column_end":34},"name":"convert_i32_replace_m128_s","qualname":"::x86_x64::sse::convert_i32_replace_m128_s","value":"pub fn convert_i32_replace_m128_s(m128, i32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f32` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = convert_i32_replace_m128_s(a, 5_i32).to_array();\n assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_ss`]\n * **Assembly:** `cvtsi2ss xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f32` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777601,"byte_end":8777666,"line_start":569,"line_end":569,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777667,"byte_end":8777674,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777675,"byte_end":8777698,"line_start":571,"line_end":571,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777699,"byte_end":8777750,"line_start":572,"line_end":572,"column_start":1,"column_end":52}},{"value":"/ let b = convert_i32_replace_m128_s(a, 5_i32).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777751,"byte_end":8777811,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(b, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777812,"byte_end":8777852,"line_start":574,"line_end":574,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777853,"byte_end":8777860,"line_start":575,"line_end":575,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_ss`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777861,"byte_end":8777900,"line_start":576,"line_end":576,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2ss xmm, r32`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777901,"byte_end":8777940,"line_start":577,"line_end":577,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777941,"byte_end":8777952,"line_start":578,"line_end":578,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8777953,"byte_end":8777970,"line_start":579,"line_end":579,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8778970,"byte_end":8778989,"line_start":611,"line_end":611,"column_start":8,"column_end":27},"name":"get_f32_from_m128_s","qualname":"::x86_x64::sse::get_f32_from_m128_s","value":"pub fn get_f32_from_m128_s(m128) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the low lane as an individual `f32` value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_f32, get_f32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Gets the low lane as an individual `f32` value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8778687,"byte_end":8778738,"line_start":602,"line_end":602,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8778739,"byte_end":8778746,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8778747,"byte_end":8778770,"line_start":604,"line_end":604,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8778771,"byte_end":8778822,"line_start":605,"line_end":605,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_f32, get_f32_from_m128_s(a));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8778823,"byte_end":8778869,"line_start":606,"line_end":606,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8778870,"byte_end":8778877,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8778878,"byte_end":8778889,"line_start":608,"line_end":608,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8778890,"byte_end":8778907,"line_start":609,"line_end":609,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779346,"byte_end":8779365,"line_start":624,"line_end":624,"column_start":8,"column_end":27},"name":"get_i32_from_m128_s","qualname":"::x86_x64::sse::get_i32_from_m128_s","value":"pub fn get_i32_from_m128_s(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the low lane to `i32` and extracts as an individual value.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(1_i32, get_i32_from_m128_s(a));\n ```\n","sig":null,"attributes":[{"value":"/ Converts the low lane to `i32` and extracts as an individual value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779043,"byte_end":8779114,"line_start":615,"line_end":615,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779115,"byte_end":8779122,"line_start":616,"line_end":616,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779123,"byte_end":8779146,"line_start":617,"line_end":617,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779147,"byte_end":8779198,"line_start":618,"line_end":618,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(1_i32, get_i32_from_m128_s(a));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779199,"byte_end":8779245,"line_start":619,"line_end":619,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779246,"byte_end":8779253,"line_start":620,"line_end":620,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779254,"byte_end":8779265,"line_start":621,"line_end":621,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779266,"byte_end":8779283,"line_start":622,"line_end":622,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780165,"byte_end":8780173,"line_start":653,"line_end":653,"column_start":8,"column_end":16},"name":"div_m128","qualname":"::x86_x64::sse::div_m128","value":"pub fn div_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779822,"byte_end":8779843,"line_start":642,"line_end":642,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779844,"byte_end":8779851,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779852,"byte_end":8779875,"line_start":644,"line_end":644,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779876,"byte_end":8779931,"line_start":645,"line_end":645,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779932,"byte_end":8779984,"line_start":646,"line_end":646,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8779985,"byte_end":8780023,"line_start":647,"line_end":647,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 2.0, 1.0, 7.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780024,"byte_end":8780064,"line_start":648,"line_end":648,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780065,"byte_end":8780072,"line_start":649,"line_end":649,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780073,"byte_end":8780084,"line_start":650,"line_end":650,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780085,"byte_end":8780102,"line_start":651,"line_end":651,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780616,"byte_end":8780626,"line_start":668,"line_end":668,"column_start":8,"column_end":18},"name":"div_m128_s","qualname":"::x86_x64::sse::div_m128_s","value":"pub fn div_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a / b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);\n let c = div_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a / b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780245,"byte_end":8780289,"line_start":657,"line_end":657,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780290,"byte_end":8780297,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780298,"byte_end":8780321,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780322,"byte_end":8780377,"line_start":660,"line_end":660,"column_start":1,"column_end":56}},{"value":"/ let b = m128::from_array([2.0, 6.0, 13.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780378,"byte_end":8780430,"line_start":661,"line_end":661,"column_start":1,"column_end":53}},{"value":"/ let c = div_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780431,"byte_end":8780471,"line_start":662,"line_end":662,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780472,"byte_end":8780515,"line_start":663,"line_end":663,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780516,"byte_end":8780523,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780524,"byte_end":8780535,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780536,"byte_end":8780553,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780996,"byte_end":8781005,"line_start":682,"line_end":682,"column_start":8,"column_end":17},"name":"load_m128","qualname":"::x86_x64::sse::load_m128","value":"pub fn load_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_m128(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780698,"byte_end":8780738,"line_start":672,"line_end":672,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780739,"byte_end":8780746,"line_start":673,"line_end":673,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780747,"byte_end":8780770,"line_start":674,"line_end":674,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780771,"byte_end":8780826,"line_start":675,"line_end":675,"column_start":1,"column_end":56}},{"value":"/ let b = load_m128(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780827,"byte_end":8780853,"line_start":676,"line_end":676,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780854,"byte_end":8780895,"line_start":677,"line_end":677,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780896,"byte_end":8780903,"line_start":678,"line_end":678,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780904,"byte_end":8780915,"line_start":679,"line_end":679,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8780916,"byte_end":8780933,"line_start":680,"line_end":680,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781462,"byte_end":8781481,"line_start":697,"line_end":697,"column_start":8,"column_end":27},"name":"load_f32_splat_m128","qualname":"::x86_x64::sse::load_f32_splat_m128","value":"pub fn load_f32_splat_m128(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_splat_m128(&a);\n assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781092,"byte_end":8781151,"line_start":686,"line_end":686,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781152,"byte_end":8781159,"line_start":687,"line_end":687,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781160,"byte_end":8781183,"line_start":688,"line_end":688,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781184,"byte_end":8781200,"line_start":689,"line_end":689,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_splat_m128(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781201,"byte_end":8781237,"line_start":690,"line_end":690,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array([1.0, 1.0, 1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781238,"byte_end":8781316,"line_start":691,"line_end":691,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781317,"byte_end":8781324,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781325,"byte_end":8781336,"line_start":693,"line_end":693,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781337,"byte_end":8781354,"line_start":694,"line_end":694,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781355,"byte_end":8781399,"line_start":695,"line_end":695,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781970,"byte_end":8781985,"line_start":713,"line_end":713,"column_start":8,"column_end":23},"name":"load_f32_m128_s","qualname":"::x86_x64::sse::load_f32_m128_s","value":"pub fn load_f32_m128_s(&f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f32` reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f32_m128_s(&a);\n assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f32` reference into the low lane of the register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781599,"byte_end":8781663,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781664,"byte_end":8781671,"line_start":703,"line_end":703,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781672,"byte_end":8781695,"line_start":704,"line_end":704,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781696,"byte_end":8781712,"line_start":705,"line_end":705,"column_start":1,"column_end":17}},{"value":"/ let b = load_f32_m128_s(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781713,"byte_end":8781745,"line_start":706,"line_end":706,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(m128::from_array([1.0, 0.0, 0.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781746,"byte_end":8781824,"line_start":707,"line_end":707,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781825,"byte_end":8781832,"line_start":708,"line_end":708,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781833,"byte_end":8781844,"line_start":709,"line_end":709,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781845,"byte_end":8781862,"line_start":710,"line_end":710,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8781863,"byte_end":8781907,"line_start":711,"line_end":711,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782409,"byte_end":8782426,"line_start":727,"line_end":727,"column_start":8,"column_end":25},"name":"load_reverse_m128","qualname":"::x86_x64::sse::load_reverse_m128","value":"pub fn load_reverse_m128(&m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let b = load_reverse_m128(&a);\n assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782042,"byte_end":8782102,"line_start":717,"line_end":717,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782103,"byte_end":8782110,"line_start":718,"line_end":718,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782111,"byte_end":8782134,"line_start":719,"line_end":719,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782135,"byte_end":8782190,"line_start":720,"line_end":720,"column_start":1,"column_end":56}},{"value":"/ let b = load_reverse_m128(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782191,"byte_end":8782225,"line_start":721,"line_end":721,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(m128::from_array([14.0, 13.0, 12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782226,"byte_end":8782308,"line_start":722,"line_end":722,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782309,"byte_end":8782316,"line_start":723,"line_end":723,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782317,"byte_end":8782328,"line_start":724,"line_end":724,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782329,"byte_end":8782346,"line_start":725,"line_end":725,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782999,"byte_end":8783018,"line_start":745,"line_end":745,"column_start":8,"column_end":27},"name":"load_unaligned_m128","qualname":"::x86_x64::sse::load_unaligned_m128","value":"pub fn load_unaligned_m128(&[f32; ]) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782514,"byte_end":8782554,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782555,"byte_end":8782558,"line_start":732,"line_end":732,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782559,"byte_end":8782637,"line_start":733,"line_end":733,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782638,"byte_end":8782718,"line_start":734,"line_end":734,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782719,"byte_end":8782731,"line_start":735,"line_end":735,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782732,"byte_end":8782739,"line_start":736,"line_end":736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782740,"byte_end":8782763,"line_start":737,"line_end":737,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0, 13.0, 14.0];","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782764,"byte_end":8782801,"line_start":738,"line_end":738,"column_start":1,"column_end":38}},{"value":"/ let b = load_unaligned_m128(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782802,"byte_end":8782838,"line_start":739,"line_end":739,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(m128::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782839,"byte_end":8782898,"line_start":740,"line_end":740,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782899,"byte_end":8782906,"line_start":741,"line_end":741,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782907,"byte_end":8782918,"line_start":742,"line_end":742,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8782919,"byte_end":8782936,"line_start":743,"line_end":743,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783458,"byte_end":8783466,"line_start":760,"line_end":760,"column_start":8,"column_end":16},"name":"max_m128","qualname":"::x86_x64::sse::max_m128","value":"pub fn max_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783114,"byte_end":8783139,"line_start":749,"line_end":749,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783140,"byte_end":8783147,"line_start":750,"line_end":750,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783148,"byte_end":8783171,"line_start":751,"line_end":751,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783172,"byte_end":8783224,"line_start":752,"line_end":752,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783225,"byte_end":8783276,"line_start":753,"line_end":753,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783277,"byte_end":8783315,"line_start":754,"line_end":754,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783316,"byte_end":8783357,"line_start":755,"line_end":755,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783358,"byte_end":8783365,"line_start":756,"line_end":756,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783366,"byte_end":8783377,"line_start":757,"line_end":757,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783378,"byte_end":8783395,"line_start":758,"line_end":758,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783907,"byte_end":8783917,"line_start":775,"line_end":775,"column_start":8,"column_end":18},"name":"max_m128_s","qualname":"::x86_x64::sse::max_m128_s","value":"pub fn max_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = max_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783538,"byte_end":8783586,"line_start":764,"line_end":764,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783587,"byte_end":8783594,"line_start":765,"line_end":765,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783595,"byte_end":8783618,"line_start":766,"line_end":766,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783619,"byte_end":8783671,"line_start":767,"line_end":767,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783672,"byte_end":8783723,"line_start":768,"line_end":768,"column_start":1,"column_end":52}},{"value":"/ let c = max_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783724,"byte_end":8783764,"line_start":769,"line_end":769,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783765,"byte_end":8783806,"line_start":770,"line_end":770,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783807,"byte_end":8783814,"line_start":771,"line_end":771,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783815,"byte_end":8783826,"line_start":772,"line_end":772,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783827,"byte_end":8783844,"line_start":773,"line_end":773,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784332,"byte_end":8784340,"line_start":790,"line_end":790,"column_start":8,"column_end":16},"name":"min_m128","qualname":"::x86_x64::sse::min_m128","value":"pub fn min_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = min_m128(a, b).to_array();\n assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8783989,"byte_end":8784014,"line_start":779,"line_end":779,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784015,"byte_end":8784022,"line_start":780,"line_end":780,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784023,"byte_end":8784046,"line_start":781,"line_end":781,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784047,"byte_end":8784099,"line_start":782,"line_end":782,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784100,"byte_end":8784151,"line_start":783,"line_end":783,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784152,"byte_end":8784190,"line_start":784,"line_end":784,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [1.0, 6.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784191,"byte_end":8784231,"line_start":785,"line_end":785,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784232,"byte_end":8784239,"line_start":786,"line_end":786,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784240,"byte_end":8784251,"line_start":787,"line_end":787,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784252,"byte_end":8784269,"line_start":788,"line_end":788,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784781,"byte_end":8784791,"line_start":805,"line_end":805,"column_start":8,"column_end":18},"name":"min_m128_s","qualname":"::x86_x64::sse::min_m128_s","value":"pub fn min_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);\n let c = min_m128_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784412,"byte_end":8784460,"line_start":794,"line_end":794,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784461,"byte_end":8784468,"line_start":795,"line_end":795,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784469,"byte_end":8784492,"line_start":796,"line_end":796,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784493,"byte_end":8784545,"line_start":797,"line_end":797,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([0.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784546,"byte_end":8784597,"line_start":798,"line_end":798,"column_start":1,"column_end":52}},{"value":"/ let c = min_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784598,"byte_end":8784638,"line_start":799,"line_end":799,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [0.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784639,"byte_end":8784680,"line_start":800,"line_end":800,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784681,"byte_end":8784688,"line_start":801,"line_end":801,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784689,"byte_end":8784700,"line_start":802,"line_end":802,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784701,"byte_end":8784718,"line_start":803,"line_end":803,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785244,"byte_end":8785255,"line_start":820,"line_end":820,"column_start":8,"column_end":19},"name":"move_m128_s","qualname":"::x86_x64::sse::move_m128_s","value":"pub fn move_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lane of `b` to `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_m128_s(a, b).to_array();\n assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lane of `b` to `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784863,"byte_end":8784922,"line_start":809,"line_end":809,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784923,"byte_end":8784930,"line_start":810,"line_end":810,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784931,"byte_end":8784954,"line_start":811,"line_end":811,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8784955,"byte_end":8785007,"line_start":812,"line_end":812,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785008,"byte_end":8785059,"line_start":813,"line_end":813,"column_start":1,"column_end":52}},{"value":"/ let c = move_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785060,"byte_end":8785101,"line_start":814,"line_end":814,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [8.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785102,"byte_end":8785143,"line_start":815,"line_end":815,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785144,"byte_end":8785151,"line_start":816,"line_end":816,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785152,"byte_end":8785163,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785164,"byte_end":8785181,"line_start":818,"line_end":818,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785734,"byte_end":8785752,"line_start":835,"line_end":835,"column_start":8,"column_end":26},"name":"move_high_low_m128","qualname":"::x86_x64::sse::move_high_low_m128","value":"pub fn move_high_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_high_low_m128(a, b).to_array();\n assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the high lanes of `b` to the low lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785328,"byte_end":8785406,"line_start":824,"line_end":824,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785407,"byte_end":8785414,"line_start":825,"line_end":825,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785415,"byte_end":8785438,"line_start":826,"line_end":826,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785439,"byte_end":8785491,"line_start":827,"line_end":827,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785492,"byte_end":8785543,"line_start":828,"line_end":828,"column_start":1,"column_end":52}},{"value":"/ let c = move_high_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785544,"byte_end":8785592,"line_start":829,"line_end":829,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [7.0, 8.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785593,"byte_end":8785633,"line_start":830,"line_end":830,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785634,"byte_end":8785641,"line_start":831,"line_end":831,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785642,"byte_end":8785653,"line_start":832,"line_end":832,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785654,"byte_end":8785671,"line_start":833,"line_end":833,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786234,"byte_end":8786252,"line_start":850,"line_end":850,"column_start":8,"column_end":26},"name":"move_low_high_m128","qualname":"::x86_x64::sse::move_low_high_m128","value":"pub fn move_low_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);\n let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);\n let c = move_low_high_m128(a, b).to_array();\n assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Move the low lanes of `b` to the high lanes of `a`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785827,"byte_end":8785905,"line_start":839,"line_end":839,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785906,"byte_end":8785913,"line_start":840,"line_end":840,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785914,"byte_end":8785937,"line_start":841,"line_end":841,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 12.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785938,"byte_end":8785990,"line_start":842,"line_end":842,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([8.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8785991,"byte_end":8786042,"line_start":843,"line_end":843,"column_start":1,"column_end":52}},{"value":"/ let c = move_low_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786043,"byte_end":8786091,"line_start":844,"line_end":844,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1.0, 12.0, 8.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786092,"byte_end":8786133,"line_start":845,"line_end":845,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786134,"byte_end":8786141,"line_start":846,"line_end":846,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786142,"byte_end":8786153,"line_start":847,"line_end":847,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786154,"byte_end":8786171,"line_start":848,"line_end":848,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786680,"byte_end":8786694,"line_start":866,"line_end":866,"column_start":8,"column_end":22},"name":"move_mask_m128","qualname":"::x86_x64::sse::move_mask_m128","value":"pub fn move_mask_m128(m128) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786327,"byte_end":8786365,"line_start":854,"line_end":854,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786366,"byte_end":8786369,"line_start":855,"line_end":855,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786370,"byte_end":8786433,"line_start":856,"line_end":856,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786434,"byte_end":8786441,"line_start":857,"line_end":857,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786442,"byte_end":8786465,"line_start":858,"line_end":858,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([-1.0, 12.0, -3.0, -4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786466,"byte_end":8786521,"line_start":859,"line_end":859,"column_start":1,"column_end":56}},{"value":"/ let i = move_mask_m128(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786522,"byte_end":8786552,"line_start":860,"line_end":860,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(i, 0b1101);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786553,"byte_end":8786579,"line_start":861,"line_end":861,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786580,"byte_end":8786587,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786588,"byte_end":8786599,"line_start":863,"line_end":863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786600,"byte_end":8786617,"line_start":864,"line_end":864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":543},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787091,"byte_end":8787099,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"mul_m128","qualname":"::x86_x64::sse::mul_m128","value":"pub fn mul_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128(a, b).to_array();\n assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786750,"byte_end":8786771,"line_start":870,"line_end":870,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786772,"byte_end":8786779,"line_start":871,"line_end":871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786780,"byte_end":8786803,"line_start":872,"line_end":872,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786804,"byte_end":8786855,"line_start":873,"line_end":873,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786856,"byte_end":8786907,"line_start":874,"line_end":874,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786908,"byte_end":8786946,"line_start":875,"line_end":875,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [5.0, 12.0, 21.0, 34.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786947,"byte_end":8786990,"line_start":876,"line_end":876,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786991,"byte_end":8786998,"line_start":877,"line_end":877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8786999,"byte_end":8787010,"line_start":878,"line_end":878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787011,"byte_end":8787028,"line_start":879,"line_end":879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787534,"byte_end":8787544,"line_start":896,"line_end":896,"column_start":8,"column_end":18},"name":"mul_m128_s","qualname":"::x86_x64::sse::mul_m128_s","value":"pub fn mul_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a * b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);\n let c = mul_m128_s(a, b).to_array();\n assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a * b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787171,"byte_end":8787215,"line_start":885,"line_end":885,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787216,"byte_end":8787223,"line_start":886,"line_end":886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787224,"byte_end":8787247,"line_start":887,"line_end":887,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787248,"byte_end":8787299,"line_start":888,"line_end":888,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787300,"byte_end":8787351,"line_start":889,"line_end":889,"column_start":1,"column_end":52}},{"value":"/ let c = mul_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787352,"byte_end":8787392,"line_start":890,"line_end":890,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [5.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787393,"byte_end":8787433,"line_start":891,"line_end":891,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787434,"byte_end":8787441,"line_start":892,"line_end":892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787442,"byte_end":8787453,"line_start":893,"line_end":893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787454,"byte_end":8787471,"line_start":894,"line_end":894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787955,"byte_end":8787965,"line_start":911,"line_end":911,"column_start":8,"column_end":18},"name":"bitor_m128","qualname":"::x86_x64::sse::bitor_m128","value":"pub fn bitor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitor_m128(a, b).to_array();\n assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787616,"byte_end":8787636,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787637,"byte_end":8787644,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787645,"byte_end":8787668,"line_start":902,"line_end":902,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787669,"byte_end":8787720,"line_start":903,"line_end":903,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787721,"byte_end":8787772,"line_start":904,"line_end":904,"column_start":1,"column_end":52}},{"value":"/ let c = bitor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787773,"byte_end":8787813,"line_start":905,"line_end":905,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [1.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787814,"byte_end":8787854,"line_start":906,"line_end":906,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787855,"byte_end":8787862,"line_start":907,"line_end":907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787863,"byte_end":8787874,"line_start":908,"line_end":908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8787875,"byte_end":8787892,"line_start":909,"line_end":909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788422,"byte_end":8788437,"line_start":928,"line_end":928,"column_start":8,"column_end":23},"name":"reciprocal_m128","qualname":"::x86_x64::sse::reciprocal_m128","value":"pub fn reciprocal_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / a` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128(a).to_array();\n let expected = [1.0, 0.5, 0.25, 0.125];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / a` approximation.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788036,"byte_end":8788073,"line_start":915,"line_end":915,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788074,"byte_end":8788081,"line_start":916,"line_end":916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788082,"byte_end":8788105,"line_start":917,"line_end":917,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788106,"byte_end":8788157,"line_start":918,"line_end":918,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128(a).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788158,"byte_end":8788200,"line_start":919,"line_end":919,"column_start":1,"column_end":43}},{"value":"/ let expected = [1.0, 0.5, 0.25, 0.125];","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788201,"byte_end":8788244,"line_start":920,"line_end":920,"column_start":1,"column_end":44}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788245,"byte_end":8788264,"line_start":921,"line_end":921,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788265,"byte_end":8788315,"line_start":922,"line_end":922,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788316,"byte_end":8788321,"line_start":923,"line_end":923,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788322,"byte_end":8788329,"line_start":924,"line_end":924,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788330,"byte_end":8788341,"line_start":925,"line_end":925,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788342,"byte_end":8788359,"line_start":926,"line_end":926,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":547},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788903,"byte_end":8788920,"line_start":945,"line_end":945,"column_start":8,"column_end":25},"name":"reciprocal_m128_s","qualname":"::x86_x64::sse::reciprocal_m128_s","value":"pub fn reciprocal_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / a` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);\n let b = reciprocal_m128_s(a).to_array();\n let expected = [1.0, 2.0, 4.0, 8.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / a` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788495,"byte_end":8788555,"line_start":932,"line_end":932,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788556,"byte_end":8788563,"line_start":933,"line_end":933,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788564,"byte_end":8788587,"line_start":934,"line_end":934,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788588,"byte_end":8788639,"line_start":935,"line_end":935,"column_start":1,"column_end":52}},{"value":"/ let b = reciprocal_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788640,"byte_end":8788684,"line_start":936,"line_end":936,"column_start":1,"column_end":45}},{"value":"/ let expected = [1.0, 2.0, 4.0, 8.0];","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788685,"byte_end":8788725,"line_start":937,"line_end":937,"column_start":1,"column_end":41}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788726,"byte_end":8788745,"line_start":938,"line_end":938,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788746,"byte_end":8788796,"line_start":939,"line_end":939,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788797,"byte_end":8788802,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788803,"byte_end":8788810,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788811,"byte_end":8788822,"line_start":942,"line_end":942,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788823,"byte_end":8788840,"line_start":943,"line_end":943,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789379,"byte_end":8789399,"line_start":962,"line_end":962,"column_start":8,"column_end":28},"name":"reciprocal_sqrt_m128","qualname":"::x86_x64::sse::reciprocal_sqrt_m128","value":"pub fn reciprocal_sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `1.0 / sqrt(a)` approximation.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);\n let b = reciprocal_sqrt_m128(a).to_array();\n let expected = [0.25, 0.33333, 0.5, 0.2];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `1.0 / sqrt(a)` approximation.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8788978,"byte_end":8789021,"line_start":949,"line_end":949,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789022,"byte_end":8789029,"line_start":950,"line_end":950,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789030,"byte_end":8789053,"line_start":951,"line_end":951,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 9.0, 4.0, 25.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789054,"byte_end":8789107,"line_start":952,"line_end":952,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789108,"byte_end":8789155,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/ let expected = [0.25, 0.33333, 0.5, 0.2];","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789156,"byte_end":8789201,"line_start":954,"line_end":954,"column_start":1,"column_end":46}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789202,"byte_end":8789221,"line_start":955,"line_end":955,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789222,"byte_end":8789272,"line_start":956,"line_end":956,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789273,"byte_end":8789278,"line_start":957,"line_end":957,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789279,"byte_end":8789286,"line_start":958,"line_end":958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789287,"byte_end":8789298,"line_start":959,"line_end":959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789299,"byte_end":8789316,"line_start":960,"line_end":960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789882,"byte_end":8789904,"line_start":979,"line_end":979,"column_start":8,"column_end":30},"name":"reciprocal_sqrt_m128_s","qualname":"::x86_x64::sse::reciprocal_sqrt_m128_s","value":"pub fn reciprocal_sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);\n let b = reciprocal_sqrt_m128_s(a).to_array();\n let expected = [0.25, 8.0, 9.0, 10.0];\n for i in 0..4 {\n   assert!((b[i] - expected[i]).abs() < 0.001);\n }\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `1.0 / sqrt(a)` approximation, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789459,"byte_end":8789525,"line_start":966,"line_end":966,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789526,"byte_end":8789533,"line_start":967,"line_end":967,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789534,"byte_end":8789557,"line_start":968,"line_end":968,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([16.0, 8.0, 9.0, 10.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789558,"byte_end":8789611,"line_start":969,"line_end":969,"column_start":1,"column_end":54}},{"value":"/ let b = reciprocal_sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789612,"byte_end":8789661,"line_start":970,"line_end":970,"column_start":1,"column_end":50}},{"value":"/ let expected = [0.25, 8.0, 9.0, 10.0];","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789662,"byte_end":8789704,"line_start":971,"line_end":971,"column_start":1,"column_end":43}},{"value":"/ for i in 0..4 {","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789705,"byte_end":8789724,"line_start":972,"line_end":972,"column_start":1,"column_end":20}},{"value":"/   assert!((b[i] - expected[i]).abs() < 0.001);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789725,"byte_end":8789775,"line_start":973,"line_end":973,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789776,"byte_end":8789781,"line_start":974,"line_end":974,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789782,"byte_end":8789789,"line_start":975,"line_end":975,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789790,"byte_end":8789801,"line_start":976,"line_end":976,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789802,"byte_end":8789819,"line_start":977,"line_end":977,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790296,"byte_end":8790304,"line_start":993,"line_end":993,"column_start":8,"column_end":16},"name":"set_m128","qualname":"::x86_x64::sse::set_m128","value":"pub fn set_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8789964,"byte_end":8790025,"line_start":983,"line_end":983,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790026,"byte_end":8790033,"line_start":984,"line_end":984,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790034,"byte_end":8790057,"line_start":985,"line_end":985,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790058,"byte_end":8790110,"line_start":986,"line_end":986,"column_start":1,"column_end":53}},{"value":"/ let b = m128::from_array([4.0, 3.0, 2.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790111,"byte_end":8790173,"line_start":987,"line_end":987,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790174,"byte_end":8790195,"line_start":988,"line_end":988,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790196,"byte_end":8790203,"line_start":989,"line_end":989,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790204,"byte_end":8790215,"line_start":990,"line_end":990,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790216,"byte_end":8790233,"line_start":991,"line_end":991,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790733,"byte_end":8790743,"line_start":1007,"line_end":1007,"column_start":8,"column_end":18},"name":"set_m128_s","qualname":"::x86_x64::sse::set_m128_s","value":"pub fn set_m128_s(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = set_m128_s(1.0).to_array();\n let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the high lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790414,"byte_end":8790475,"line_start":997,"line_end":997,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790476,"byte_end":8790483,"line_start":998,"line_end":998,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790484,"byte_end":8790507,"line_start":999,"line_end":999,"column_start":1,"column_end":24}},{"value":"/ let a = set_m128_s(1.0).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790508,"byte_end":8790547,"line_start":1000,"line_end":1000,"column_start":1,"column_end":40}},{"value":"/ let b = m128::from_array([1.0, 0.0, 0.0, 0.0]).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790548,"byte_end":8790610,"line_start":1001,"line_end":1001,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790611,"byte_end":8790632,"line_start":1002,"line_end":1002,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790633,"byte_end":8790640,"line_start":1003,"line_end":1003,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790641,"byte_end":8790652,"line_start":1004,"line_end":1004,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790653,"byte_end":8790670,"line_start":1005,"line_end":1005,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791098,"byte_end":8791112,"line_start":1021,"line_end":1021,"column_start":8,"column_end":22},"name":"set_splat_m128","qualname":"::x86_x64::sse::set_splat_m128","value":"pub fn set_splat_m128(f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Splats the value to all lanes.\n ```\n # use safe_arch::*;\n let a = set_splat_m128(1.0).to_array();\n let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Splats the value to all lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790802,"byte_end":8790836,"line_start":1011,"line_end":1011,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790837,"byte_end":8790844,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790845,"byte_end":8790868,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = set_splat_m128(1.0).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790869,"byte_end":8790912,"line_start":1014,"line_end":1014,"column_start":1,"column_end":44}},{"value":"/ let b = m128::from_array([1.0, 1.0, 1.0, 1.0]).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790913,"byte_end":8790975,"line_start":1015,"line_end":1015,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790976,"byte_end":8790997,"line_start":1016,"line_end":1016,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8790998,"byte_end":8791005,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791006,"byte_end":8791017,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791018,"byte_end":8791035,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791512,"byte_end":8791529,"line_start":1035,"line_end":1035,"column_start":8,"column_end":25},"name":"set_reversed_m128","qualname":"::x86_x64::sse::set_reversed_m128","value":"pub fn set_reversed_m128(f32, f32, f32, f32) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();\n let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128`, first arg is the low lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791172,"byte_end":8791232,"line_start":1025,"line_end":1025,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791233,"byte_end":8791240,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791241,"byte_end":8791264,"line_start":1027,"line_end":1027,"column_start":1,"column_end":24}},{"value":"/ let a = set_reversed_m128(1.0, 2.0, 3.0, 4.0).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791265,"byte_end":8791326,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ let b = m128::from_array([1.0, 2.0, 3.0, 4.0]).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791327,"byte_end":8791389,"line_start":1029,"line_end":1029,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791390,"byte_end":8791411,"line_start":1030,"line_end":1030,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791412,"byte_end":8791419,"line_start":1031,"line_end":1031,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791420,"byte_end":8791431,"line_start":1032,"line_end":1032,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791432,"byte_end":8791449,"line_start":1033,"line_end":1033,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791871,"byte_end":8791882,"line_start":1048,"line_end":1048,"column_start":8,"column_end":19},"name":"zeroed_m128","qualname":"::x86_x64::sse::zeroed_m128","value":"pub fn zeroed_m128() -> m128","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128().to_array();\n assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791640,"byte_end":8791659,"line_start":1039,"line_end":1039,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791660,"byte_end":8791667,"line_start":1040,"line_end":1040,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791668,"byte_end":8791691,"line_start":1041,"line_end":1041,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128().to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791692,"byte_end":8791729,"line_start":1042,"line_end":1042,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, [0.0, 0.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791730,"byte_end":8791770,"line_start":1043,"line_end":1043,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791771,"byte_end":8791778,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791779,"byte_end":8791790,"line_start":1045,"line_end":1045,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791791,"byte_end":8791808,"line_start":1046,"line_end":1046,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793176,"byte_end":8793200,"line_start":1081,"line_end":1081,"column_start":8,"column_end":32},"name":"shuffle_abi_f32_all_m128","qualname":"::x86_x64::sse::shuffle_abi_f32_all_m128","value":"pub fn shuffle_abi_f32_all_m128<const MASK: i32>(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `f32` lanes from `$a` and `$b` together using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `f32` lanes from `$a` and `$b` together using an immediate","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8791934,"byte_end":8792008,"line_start":1052,"line_end":1052,"column_start":1,"column_end":75}},{"value":"/ control value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792009,"byte_end":8792027,"line_start":1053,"line_end":1053,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792028,"byte_end":8792031,"line_start":1054,"line_end":1054,"column_start":1,"column_end":4}},{"value":"/ The `a:` and `b:` prefixes on the index selection values are literal tokens","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792032,"byte_end":8792111,"line_start":1055,"line_end":1055,"column_start":1,"column_end":80}},{"value":"/ that you type. It helps keep clear what value comes from where. The first","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792112,"byte_end":8792189,"line_start":1056,"line_end":1056,"column_start":1,"column_end":78}},{"value":"/ two output lanes come from `$a`, the second two output lanes come from `$b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792190,"byte_end":8792270,"line_start":1057,"line_end":1057,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792271,"byte_end":8792274,"line_start":1058,"line_end":1058,"column_start":1,"column_end":4}},{"value":"/ You can pass the same value as both arguments, but if you want to swizzle","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792275,"byte_end":8792352,"line_start":1059,"line_end":1059,"column_start":1,"column_end":78}},{"value":"/ within only a single register and you have `avx` available consider using","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792353,"byte_end":8792430,"line_start":1060,"line_end":1060,"column_start":1,"column_end":78}},{"value":"/ [`shuffle_ai_f32_all_m128`] instead. You'll get much better performance.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792431,"byte_end":8792507,"line_start":1061,"line_end":1061,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792508,"byte_end":8792515,"line_start":1062,"line_end":1062,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792516,"byte_end":8792539,"line_start":1063,"line_end":1063,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792540,"byte_end":8792591,"line_start":1064,"line_end":1064,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792592,"byte_end":8792643,"line_start":1065,"line_end":1065,"column_start":1,"column_end":52}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792644,"byte_end":8792650,"line_start":1066,"line_end":1066,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0>(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792651,"byte_end":8792710,"line_start":1067,"line_end":1067,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1.0, 1.0, 5.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792711,"byte_end":8792751,"line_start":1068,"line_end":1068,"column_start":1,"column_end":41}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792752,"byte_end":8792758,"line_start":1069,"line_end":1069,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0b11_10_01_00>(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792759,"byte_end":8792830,"line_start":1070,"line_end":1070,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [1.0, 2.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792831,"byte_end":8792871,"line_start":1071,"line_end":1071,"column_start":1,"column_end":41}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792872,"byte_end":8792878,"line_start":1072,"line_end":1072,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f32_all_m128::<0b00_10_10_01>(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792879,"byte_end":8792950,"line_start":1073,"line_end":1073,"column_start":1,"column_end":72}},{"value":"/ assert_eq!(c, [2.0, 3.0, 7.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792951,"byte_end":8792991,"line_start":1074,"line_end":1074,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8792992,"byte_end":8792999,"line_start":1075,"line_end":1075,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_ps`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793000,"byte_end":8793039,"line_start":1076,"line_end":1076,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `shufps xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793040,"byte_end":8793083,"line_start":1077,"line_end":1077,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793084,"byte_end":8793095,"line_start":1078,"line_end":1078,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793096,"byte_end":8793113,"line_start":1079,"line_end":1079,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793587,"byte_end":8793596,"line_start":1095,"line_end":1095,"column_start":8,"column_end":17},"name":"sqrt_m128","qualname":"::x86_x64::sse::sqrt_m128","value":"pub fn sqrt_m128(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);\n let b = sqrt_m128(a).to_array();\n assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793299,"byte_end":8793322,"line_start":1085,"line_end":1085,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793323,"byte_end":8793330,"line_start":1086,"line_end":1086,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793331,"byte_end":8793354,"line_start":1087,"line_end":1087,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([25.0, 16.0, 9.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793355,"byte_end":8793408,"line_start":1088,"line_end":1088,"column_start":1,"column_end":54}},{"value":"/ let b = sqrt_m128(a).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793409,"byte_end":8793445,"line_start":1089,"line_end":1089,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [5.0, 4.0, 3.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793446,"byte_end":8793486,"line_start":1090,"line_end":1090,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793487,"byte_end":8793494,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793495,"byte_end":8793506,"line_start":1092,"line_end":1092,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793507,"byte_end":8793524,"line_start":1093,"line_end":1093,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793966,"byte_end":8793977,"line_start":1109,"line_end":1109,"column_start":8,"column_end":19},"name":"sqrt_m128_s","qualname":"::x86_x64::sse::sqrt_m128_s","value":"pub fn sqrt_m128_s(m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(a)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);\n let b = sqrt_m128_s(a).to_array();\n assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(a)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793655,"byte_end":8793701,"line_start":1099,"line_end":1099,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793702,"byte_end":8793709,"line_start":1100,"line_end":1100,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793710,"byte_end":8793733,"line_start":1101,"line_end":1101,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([4.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793734,"byte_end":8793785,"line_start":1102,"line_end":1102,"column_start":1,"column_end":52}},{"value":"/ let b = sqrt_m128_s(a).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793786,"byte_end":8793824,"line_start":1103,"line_end":1103,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(b, [2.0, 8.0, 7.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793825,"byte_end":8793865,"line_start":1104,"line_end":1104,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793866,"byte_end":8793873,"line_start":1105,"line_end":1105,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793874,"byte_end":8793885,"line_start":1106,"line_end":1106,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8793886,"byte_end":8793903,"line_start":1107,"line_end":1107,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794386,"byte_end":8794396,"line_start":1124,"line_end":1124,"column_start":8,"column_end":18},"name":"store_m128","qualname":"::x86_x64::sse::store_m128","value":"pub fn store_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794036,"byte_end":8794080,"line_start":1113,"line_end":1113,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794081,"byte_end":8794088,"line_start":1114,"line_end":1114,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794089,"byte_end":8794112,"line_start":1115,"line_end":1115,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794113,"byte_end":8794168,"line_start":1116,"line_end":1116,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794169,"byte_end":8794199,"line_start":1117,"line_end":1117,"column_start":1,"column_end":31}},{"value":"/ store_m128(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794200,"byte_end":8794226,"line_start":1118,"line_end":1118,"column_start":1,"column_end":27}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794227,"byte_end":8794252,"line_start":1119,"line_end":1119,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794253,"byte_end":8794297,"line_start":1120,"line_end":1120,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794298,"byte_end":8794305,"line_start":1121,"line_end":1121,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794306,"byte_end":8794323,"line_start":1122,"line_end":1122,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794789,"byte_end":8794801,"line_start":1138,"line_end":1138,"column_start":8,"column_end":20},"name":"store_m128_s","qualname":"::x86_x64::sse::store_m128_s","value":"pub fn store_m128_s(&mut f32, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut f = 0.0;\n store_m128_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794484,"byte_end":8794537,"line_start":1128,"line_end":1128,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794538,"byte_end":8794545,"line_start":1129,"line_end":1129,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794546,"byte_end":8794569,"line_start":1130,"line_end":1130,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794570,"byte_end":8794625,"line_start":1131,"line_end":1131,"column_start":1,"column_end":56}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794626,"byte_end":8794646,"line_start":1132,"line_end":1132,"column_start":1,"column_end":21}},{"value":"/ store_m128_s(&mut f, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794647,"byte_end":8794675,"line_start":1133,"line_end":1133,"column_start":1,"column_end":29}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794676,"byte_end":8794700,"line_start":1134,"line_end":1134,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794701,"byte_end":8794708,"line_start":1135,"line_end":1135,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794709,"byte_end":8794726,"line_start":1136,"line_end":1136,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795253,"byte_end":8795269,"line_start":1153,"line_end":1153,"column_start":8,"column_end":24},"name":"store_splat_m128","qualname":"::x86_x64::sse::store_splat_m128","value":"pub fn store_splat_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_splat_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794875,"byte_end":8794941,"line_start":1142,"line_end":1142,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794942,"byte_end":8794949,"line_start":1143,"line_end":1143,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794950,"byte_end":8794973,"line_start":1144,"line_end":1144,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8794974,"byte_end":8795029,"line_start":1145,"line_end":1145,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795030,"byte_end":8795060,"line_start":1146,"line_end":1146,"column_start":1,"column_end":31}},{"value":"/ store_splat_m128(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795061,"byte_end":8795093,"line_start":1147,"line_end":1147,"column_start":1,"column_end":33}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795094,"byte_end":8795119,"line_start":1148,"line_end":1148,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0, 10.0, 10.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795120,"byte_end":8795164,"line_start":1149,"line_end":1149,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795165,"byte_end":8795172,"line_start":1150,"line_end":1150,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795173,"byte_end":8795190,"line_start":1151,"line_end":1151,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795733,"byte_end":8795751,"line_start":1168,"line_end":1168,"column_start":8,"column_end":26},"name":"store_reverse_m128","qualname":"::x86_x64::sse::store_reverse_m128","value":"pub fn store_reverse_m128(&mut m128, m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given in reverse order.\n ```\n # use safe_arch::*;\n let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);\n let mut b = zeroed_m128();\n store_reverse_m128(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given in reverse order.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795358,"byte_end":8795419,"line_start":1157,"line_end":1157,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795420,"byte_end":8795427,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795428,"byte_end":8795451,"line_start":1159,"line_end":1159,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795452,"byte_end":8795507,"line_start":1160,"line_end":1160,"column_start":1,"column_end":56}},{"value":"/ let mut b = zeroed_m128();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795508,"byte_end":8795538,"line_start":1161,"line_end":1161,"column_start":1,"column_end":31}},{"value":"/ store_reverse_m128(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795539,"byte_end":8795573,"line_start":1162,"line_end":1162,"column_start":1,"column_end":35}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795574,"byte_end":8795599,"line_start":1163,"line_end":1163,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [14.0, 13.0, 12.0, 10.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795600,"byte_end":8795644,"line_start":1164,"line_end":1164,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795645,"byte_end":8795652,"line_start":1165,"line_end":1165,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795653,"byte_end":8795670,"line_start":1166,"line_end":1166,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796346,"byte_end":8796366,"line_start":1186,"line_end":1186,"column_start":8,"column_end":28},"name":"store_unaligned_m128","qualname":"::x86_x64::sse::store_unaligned_m128","value":"pub fn store_unaligned_m128(&mut [f32; ], m128)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795840,"byte_end":8795884,"line_start":1172,"line_end":1172,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795885,"byte_end":8795888,"line_start":1173,"line_end":1173,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795889,"byte_end":8795967,"line_start":1174,"line_end":1174,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 4-byte","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8795968,"byte_end":8796048,"line_start":1175,"line_end":1175,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796049,"byte_end":8796061,"line_start":1176,"line_end":1176,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796062,"byte_end":8796069,"line_start":1177,"line_end":1177,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796070,"byte_end":8796093,"line_start":1178,"line_end":1178,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796094,"byte_end":8796149,"line_start":1179,"line_end":1179,"column_start":1,"column_end":56}},{"value":"/ let mut b = [0.0; 4];","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796150,"byte_end":8796175,"line_start":1180,"line_end":1180,"column_start":1,"column_end":26}},{"value":"/ store_unaligned_m128(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796176,"byte_end":8796212,"line_start":1181,"line_end":1181,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, [10.0, 12.0, 13.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796213,"byte_end":8796257,"line_start":1182,"line_end":1182,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796258,"byte_end":8796265,"line_start":1183,"line_end":1183,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796266,"byte_end":8796283,"line_start":1184,"line_end":1184,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796789,"byte_end":8796797,"line_start":1201,"line_end":1201,"column_start":8,"column_end":16},"name":"sub_m128","qualname":"::x86_x64::sse::sub_m128","value":"pub fn sub_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128(a, b).to_array();\n assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796447,"byte_end":8796468,"line_start":1190,"line_end":1190,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796469,"byte_end":8796476,"line_start":1191,"line_end":1191,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796477,"byte_end":8796500,"line_start":1192,"line_end":1192,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796501,"byte_end":8796552,"line_start":1193,"line_end":1193,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796553,"byte_end":8796605,"line_start":1194,"line_end":1194,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796606,"byte_end":8796644,"line_start":1195,"line_end":1195,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(c, [-4.0, -6.0, -9.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796645,"byte_end":8796688,"line_start":1196,"line_end":1196,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796689,"byte_end":8796696,"line_start":1197,"line_end":1197,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796697,"byte_end":8796708,"line_start":1198,"line_end":1198,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796709,"byte_end":8796726,"line_start":1199,"line_end":1199,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797234,"byte_end":8797244,"line_start":1216,"line_end":1216,"column_start":8,"column_end":18},"name":"sub_m128_s","qualname":"::x86_x64::sse::sub_m128_s","value":"pub fn sub_m128_s(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a - b`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);\n let c = sub_m128_s(a, b).to_array();\n assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `a - b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796869,"byte_end":8796913,"line_start":1205,"line_end":1205,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796914,"byte_end":8796921,"line_start":1206,"line_end":1206,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796922,"byte_end":8796945,"line_start":1207,"line_end":1207,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796946,"byte_end":8796997,"line_start":1208,"line_end":1208,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 8.0, 12.0, 3.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8796998,"byte_end":8797050,"line_start":1209,"line_end":1209,"column_start":1,"column_end":53}},{"value":"/ let c = sub_m128_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797051,"byte_end":8797091,"line_start":1210,"line_end":1210,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(c, [-4.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797092,"byte_end":8797133,"line_start":1211,"line_end":1211,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797134,"byte_end":8797141,"line_start":1212,"line_end":1212,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797142,"byte_end":8797153,"line_start":1213,"line_end":1213,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797154,"byte_end":8797171,"line_start":1214,"line_end":1214,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797995,"byte_end":8798014,"line_start":1235,"line_end":1235,"column_start":8,"column_end":27},"name":"transpose_four_m128","qualname":"::x86_x64::sse::transpose_four_m128","value":"pub fn transpose_four_m128(&mut m128, &mut m128, &mut m128, &mut m128)","parent":null,"children":[],"decl_id":null,"docs":" Transpose four `m128` as if they were a 4x4 matrix.\n ```\n # use safe_arch::*;\n let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);\n let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);\n transpose_four_m128(&mut a, &mut b, &mut c, &mut d);\n assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);\n assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);\n assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);\n assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Transpose four `m128` as if they were a 4x4 matrix.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797316,"byte_end":8797371,"line_start":1220,"line_end":1220,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797372,"byte_end":8797379,"line_start":1221,"line_end":1221,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797380,"byte_end":8797403,"line_start":1222,"line_end":1222,"column_start":1,"column_end":24}},{"value":"/ let mut a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797404,"byte_end":8797459,"line_start":1223,"line_end":1223,"column_start":1,"column_end":56}},{"value":"/ let mut b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797460,"byte_end":8797515,"line_start":1224,"line_end":1224,"column_start":1,"column_end":56}},{"value":"/ let mut c = m128::from_array([9.0, 10.0, 11.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797516,"byte_end":8797574,"line_start":1225,"line_end":1225,"column_start":1,"column_end":59}},{"value":"/ let mut d = m128::from_array([13.0, 14.0, 15.0, 16.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797575,"byte_end":8797634,"line_start":1226,"line_end":1226,"column_start":1,"column_end":60}},{"value":"/ transpose_four_m128(&mut a, &mut b, &mut c, &mut d);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797635,"byte_end":8797691,"line_start":1227,"line_end":1227,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(a.to_array(), [1.0, 5.0, 9.0, 13.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797692,"byte_end":8797744,"line_start":1228,"line_end":1228,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(b.to_array(), [2.0, 6.0, 10.0, 14.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797745,"byte_end":8797798,"line_start":1229,"line_end":1229,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c.to_array(), [3.0, 7.0, 11.0, 15.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797799,"byte_end":8797852,"line_start":1230,"line_end":1230,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(d.to_array(), [4.0, 8.0, 12.0, 16.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797853,"byte_end":8797906,"line_start":1231,"line_end":1231,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797907,"byte_end":8797914,"line_start":1232,"line_end":1232,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8797915,"byte_end":8797932,"line_start":1233,"line_end":1233,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798524,"byte_end":8798540,"line_start":1250,"line_end":1250,"column_start":8,"column_end":24},"name":"unpack_high_m128","qualname":"::x86_x64::sse::unpack_high_m128","value":"pub fn unpack_high_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_high_m128(a, b).to_array();\n assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798147,"byte_end":8798199,"line_start":1239,"line_end":1239,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798200,"byte_end":8798207,"line_start":1240,"line_end":1240,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798208,"byte_end":8798231,"line_start":1241,"line_end":1241,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798232,"byte_end":8798283,"line_start":1242,"line_end":1242,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798284,"byte_end":8798335,"line_start":1243,"line_end":1243,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_high_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798336,"byte_end":8798382,"line_start":1244,"line_end":1244,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [3.0, 7.0, 4.0, 8.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798383,"byte_end":8798423,"line_start":1245,"line_end":1245,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798424,"byte_end":8798431,"line_start":1246,"line_end":1246,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798432,"byte_end":8798443,"line_start":1247,"line_end":1247,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798444,"byte_end":8798461,"line_start":1248,"line_end":1248,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798992,"byte_end":8799007,"line_start":1265,"line_end":1265,"column_start":8,"column_end":23},"name":"unpack_low_m128","qualname":"::x86_x64::sse::unpack_low_m128","value":"pub fn unpack_low_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);\n let c = unpack_low_m128(a, b).to_array();\n assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798617,"byte_end":8798668,"line_start":1254,"line_end":1254,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798669,"byte_end":8798676,"line_start":1255,"line_end":1255,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798677,"byte_end":8798700,"line_start":1256,"line_end":1256,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798701,"byte_end":8798752,"line_start":1257,"line_end":1257,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([5.0, 6.0, 7.0, 8.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798753,"byte_end":8798804,"line_start":1258,"line_end":1258,"column_start":1,"column_end":52}},{"value":"/ let c = unpack_low_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798805,"byte_end":8798850,"line_start":1259,"line_end":1259,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [1.0, 5.0, 2.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798851,"byte_end":8798891,"line_start":1260,"line_end":1260,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798892,"byte_end":8798899,"line_start":1261,"line_end":1261,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798900,"byte_end":8798911,"line_start":1262,"line_end":1262,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8798912,"byte_end":8798929,"line_start":1263,"line_end":1263,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799424,"byte_end":8799435,"line_start":1280,"line_end":1280,"column_start":8,"column_end":19},"name":"bitxor_m128","qualname":"::x86_x64::sse::bitxor_m128","value":"pub fn bitxor_m128(m128, m128) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);\n let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);\n let c = bitxor_m128(a, b).to_array();\n assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799084,"byte_end":8799104,"line_start":1269,"line_end":1269,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799105,"byte_end":8799112,"line_start":1270,"line_end":1270,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799113,"byte_end":8799136,"line_start":1271,"line_end":1271,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 0.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799137,"byte_end":8799188,"line_start":1272,"line_end":1272,"column_start":1,"column_end":52}},{"value":"/ let b = m128::from_array([1.0, 1.0, 0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799189,"byte_end":8799240,"line_start":1273,"line_end":1273,"column_start":1,"column_end":52}},{"value":"/ let c = bitxor_m128(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799241,"byte_end":8799282,"line_start":1274,"line_end":1274,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 1.0, 1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799283,"byte_end":8799323,"line_start":1275,"line_end":1275,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799324,"byte_end":8799331,"line_start":1276,"line_end":1276,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799332,"byte_end":8799343,"line_start":1277,"line_end":1277,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8799344,"byte_end":8799361,"line_start":1278,"line_end":1278,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804685,"byte_end":8804697,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"add_i8_m128i","qualname":"::x86_x64::sse2::add_i8_m128i","value":"pub fn add_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = add_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804200,"byte_end":8804240,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804241,"byte_end":8804248,"line_start":6,"line_end":6,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804249,"byte_end":8804272,"line_start":7,"line_end":7,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804273,"byte_end":8804356,"line_start":8,"line_end":8,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804357,"byte_end":8804448,"line_start":9,"line_end":9,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = add_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804449,"byte_end":8804497,"line_start":10,"line_end":10,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 12, 4, 16, 8, 20, 12, 24, 16, 28, -10, 32, 34, -10, 38, -114]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804498,"byte_end":8804583,"line_start":11,"line_end":11,"column_start":1,"column_end":86}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804584,"byte_end":8804591,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804592,"byte_end":8804603,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804604,"byte_end":8804621,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805175,"byte_end":8805188,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"add_i16_m128i","qualname":"::x86_x64::sse2::add_i16_m128i","value":"pub fn add_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_i16_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804775,"byte_end":8804816,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804817,"byte_end":8804824,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804825,"byte_end":8804848,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804849,"byte_end":8804907,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804908,"byte_end":8804969,"line_start":24,"line_end":24,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = add_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8804970,"byte_end":8805019,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805020,"byte_end":8805073,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805074,"byte_end":8805081,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805082,"byte_end":8805093,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805094,"byte_end":8805111,"line_start":29,"line_end":29,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805605,"byte_end":8805618,"line_start":46,"line_end":46,"column_start":8,"column_end":21},"name":"add_i32_m128i","qualname":"::x86_x64::sse2::add_i32_m128i","value":"pub fn add_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = add_i32_m128i(a, b).into();\n assert_eq!(c, [6, 8, 10, 12]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805267,"byte_end":8805308,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805309,"byte_end":8805316,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805317,"byte_end":8805340,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805341,"byte_end":8805379,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805380,"byte_end":8805418,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = add_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805419,"byte_end":8805468,"line_start":40,"line_end":40,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [6, 8, 10, 12]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805469,"byte_end":8805503,"line_start":41,"line_end":41,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805504,"byte_end":8805511,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805512,"byte_end":8805523,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805524,"byte_end":8805541,"line_start":44,"line_end":44,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806034,"byte_end":8806047,"line_start":61,"line_end":61,"column_start":8,"column_end":21},"name":"add_i64_m128i","qualname":"::x86_x64::sse2::add_i64_m128i","value":"pub fn add_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = add_i64_m128i(a, b).into();\n assert_eq!(c, [-8909, 88]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805697,"byte_end":8805738,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805739,"byte_end":8805746,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805747,"byte_end":8805770,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805771,"byte_end":8805809,"line_start":53,"line_end":53,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805810,"byte_end":8805850,"line_start":54,"line_end":54,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = add_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805851,"byte_end":8805900,"line_start":55,"line_end":55,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-8909, 88]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805901,"byte_end":8805932,"line_start":56,"line_end":56,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805933,"byte_end":8805940,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805941,"byte_end":8805952,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8805953,"byte_end":8805970,"line_start":59,"line_end":59,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806446,"byte_end":8806455,"line_start":76,"line_end":76,"column_start":8,"column_end":17},"name":"add_m128d","qualname":"::x86_x64::sse2::add_m128d","value":"pub fn add_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a + b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = add_m128d(a, b).to_array();\n assert_eq!(c, [192.0, 81.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a + b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806126,"byte_end":8806147,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806148,"byte_end":8806155,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806156,"byte_end":8806179,"line_start":67,"line_end":67,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806180,"byte_end":8806224,"line_start":68,"line_end":68,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806225,"byte_end":8806270,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ let c = add_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806271,"byte_end":8806310,"line_start":70,"line_end":70,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [192.0, 81.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806311,"byte_end":8806344,"line_start":71,"line_end":71,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806345,"byte_end":8806352,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806353,"byte_end":8806364,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806365,"byte_end":8806382,"line_start":74,"line_end":74,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806879,"byte_end":8806890,"line_start":91,"line_end":91,"column_start":8,"column_end":19},"name":"add_m128d_s","qualname":"::x86_x64::sse2::add_m128d_s","value":"pub fn add_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a + b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = add_m128d_s(a, b).to_array();\n assert_eq!(c, [192.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a + b`, high lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806531,"byte_end":8806576,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806577,"byte_end":8806584,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806585,"byte_end":8806608,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806609,"byte_end":8806653,"line_start":83,"line_end":83,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806654,"byte_end":8806701,"line_start":84,"line_end":84,"column_start":1,"column_end":48}},{"value":"/ let c = add_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806702,"byte_end":8806743,"line_start":85,"line_end":85,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [192.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806744,"byte_end":8806777,"line_start":86,"line_end":86,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806778,"byte_end":8806785,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806786,"byte_end":8806797,"line_start":88,"line_end":88,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806798,"byte_end":8806815,"line_start":89,"line_end":89,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807613,"byte_end":8807636,"line_start":119,"line_end":119,"column_start":8,"column_end":31},"name":"add_saturating_i8_m128i","qualname":"::x86_x64::sse2::add_saturating_i8_m128i","value":"pub fn add_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,\n   3, 4, -1, -2, -1, -2, -3, -4,\n ]);\n let b = m128i::from([\n   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,\n   7, 8, -15, -26, -15, -26, -37, 48,\n ]);\n let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,\n     10, 12, -16, -28, -16, -28, -40, 44\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8806966,"byte_end":8807017,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807018,"byte_end":8807025,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807026,"byte_end":8807049,"line_start":97,"line_end":97,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807050,"byte_end":8807075,"line_start":98,"line_end":98,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 3, 4, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807076,"byte_end":8807121,"line_start":99,"line_end":99,"column_start":1,"column_end":46}},{"value":"/   3, 4, -1, -2, -1, -2, -3, -4,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807122,"byte_end":8807157,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807158,"byte_end":8807165,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807166,"byte_end":8807191,"line_start":102,"line_end":102,"column_start":1,"column_end":26}},{"value":"/   i8::MAX, i8::MIN, 7, 8, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807192,"byte_end":8807240,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"/   7, 8, -15, -26, -15, -26, -37, 48,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807241,"byte_end":8807281,"line_start":104,"line_end":104,"column_start":1,"column_end":41}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807282,"byte_end":8807289,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/ let c: [i8; 16] = add_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807290,"byte_end":8807349,"line_start":106,"line_end":106,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807350,"byte_end":8807365,"line_start":107,"line_end":107,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807366,"byte_end":8807374,"line_start":108,"line_end":108,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807375,"byte_end":8807382,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/     i8::MAX, i8::MIN, 10, 12, -16, -28, -40, 44,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807383,"byte_end":8807435,"line_start":110,"line_end":110,"column_start":1,"column_end":53}},{"value":"/     10, 12, -16, -28, -16, -28, -40, 44","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807436,"byte_end":8807479,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/   ]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807480,"byte_end":8807487,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807488,"byte_end":8807494,"line_start":113,"line_end":113,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807495,"byte_end":8807502,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807503,"byte_end":8807514,"line_start":115,"line_end":115,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807515,"byte_end":8807532,"line_start":116,"line_end":116,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807533,"byte_end":8807549,"line_start":117,"line_end":117,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808171,"byte_end":8808195,"line_start":134,"line_end":134,"column_start":8,"column_end":32},"name":"add_saturating_i16_m128i","qualname":"::x86_x64::sse2::add_saturating_i16_m128i","value":"pub fn add_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807715,"byte_end":8807767,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807768,"byte_end":8807775,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807776,"byte_end":8807799,"line_start":125,"line_end":125,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([i16::MAX, i16::MIN, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807800,"byte_end":8807868,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/ let b = m128i::from([i16::MAX, i16::MIN, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807869,"byte_end":8807940,"line_start":127,"line_end":127,"column_start":1,"column_end":72}},{"value":"/ let c: [i16; 8] = add_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8807941,"byte_end":8808001,"line_start":128,"line_end":128,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [i16::MAX, i16::MIN, 10, 12, -16, -28, -40, 44]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808002,"byte_end":8808069,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808070,"byte_end":8808077,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808078,"byte_end":8808089,"line_start":131,"line_end":131,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808090,"byte_end":8808107,"line_start":132,"line_end":132,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808884,"byte_end":8808907,"line_start":162,"line_end":162,"column_start":8,"column_end":31},"name":"add_saturating_u8_m128i","qualname":"::x86_x64::sse2::add_saturating_u8_m128i","value":"pub fn add_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 10, 12, 255, 28, 40, 52,\n     10, 12, 16, 28, 16, 28, 165, 52\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808275,"byte_end":8808326,"line_start":138,"line_end":138,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808327,"byte_end":8808334,"line_start":139,"line_end":139,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808335,"byte_end":8808358,"line_start":140,"line_end":140,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808359,"byte_end":8808384,"line_start":141,"line_end":141,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808385,"byte_end":8808422,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808423,"byte_end":8808454,"line_start":143,"line_end":143,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808455,"byte_end":8808462,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808463,"byte_end":8808488,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808489,"byte_end":8808528,"line_start":146,"line_end":146,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808529,"byte_end":8808564,"line_start":147,"line_end":147,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808565,"byte_end":8808572,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = add_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808573,"byte_end":8808632,"line_start":149,"line_end":149,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808633,"byte_end":8808648,"line_start":150,"line_end":150,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808649,"byte_end":8808657,"line_start":151,"line_end":151,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808658,"byte_end":8808665,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 10, 12, 255, 28, 40, 52,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808666,"byte_end":8808710,"line_start":153,"line_end":153,"column_start":1,"column_end":45}},{"value":"/     10, 12, 16, 28, 16, 28, 165, 52","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808711,"byte_end":8808750,"line_start":154,"line_end":154,"column_start":1,"column_end":40}},{"value":"/   ]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808751,"byte_end":8808758,"line_start":155,"line_end":155,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808759,"byte_end":8808765,"line_start":156,"line_end":156,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808766,"byte_end":8808773,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808774,"byte_end":8808785,"line_start":158,"line_end":158,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808786,"byte_end":8808803,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808804,"byte_end":8808820,"line_start":160,"line_end":160,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809411,"byte_end":8809435,"line_start":177,"line_end":177,"column_start":8,"column_end":32},"name":"add_saturating_u16_m128i","qualname":"::x86_x64::sse2::add_saturating_u16_m128i","value":"pub fn add_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a + b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a + b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8808986,"byte_end":8809038,"line_start":166,"line_end":166,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809039,"byte_end":8809046,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809047,"byte_end":8809070,"line_start":168,"line_end":168,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809071,"byte_end":8809128,"line_start":169,"line_end":169,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809129,"byte_end":8809190,"line_start":170,"line_end":170,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = add_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809191,"byte_end":8809251,"line_start":171,"line_end":171,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 10, 12, 16, 28, 40, 52]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809252,"byte_end":8809309,"line_start":172,"line_end":172,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809310,"byte_end":8809317,"line_start":173,"line_end":173,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809318,"byte_end":8809329,"line_start":174,"line_end":174,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809330,"byte_end":8809347,"line_start":175,"line_end":175,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809829,"byte_end":8809841,"line_start":192,"line_end":192,"column_start":8,"column_end":20},"name":"bitand_m128d","qualname":"::x86_x64::sse2::bitand_m128d","value":"pub fn bitand_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitand_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809515,"byte_end":8809535,"line_start":181,"line_end":181,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809536,"byte_end":8809543,"line_start":182,"line_end":182,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809544,"byte_end":8809567,"line_start":183,"line_end":183,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809568,"byte_end":8809610,"line_start":184,"line_end":184,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809611,"byte_end":8809653,"line_start":185,"line_end":185,"column_start":1,"column_end":43}},{"value":"/ let c = bitand_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809654,"byte_end":8809696,"line_start":186,"line_end":186,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809697,"byte_end":8809727,"line_start":187,"line_end":187,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809728,"byte_end":8809735,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809736,"byte_end":8809747,"line_start":189,"line_end":189,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809748,"byte_end":8809765,"line_start":190,"line_end":190,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810231,"byte_end":8810243,"line_start":207,"line_end":207,"column_start":8,"column_end":20},"name":"bitand_m128i","qualname":"::x86_x64::sse2::bitand_m128i","value":"pub fn bitand_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitand_m128i(a, b).into();\n assert_eq!(c, [1, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a & b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809917,"byte_end":8809937,"line_start":196,"line_end":196,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809938,"byte_end":8809945,"line_start":197,"line_end":197,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809946,"byte_end":8809969,"line_start":198,"line_end":198,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8809970,"byte_end":8810008,"line_start":199,"line_end":199,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810009,"byte_end":8810047,"line_start":200,"line_end":200,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitand_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810048,"byte_end":8810096,"line_start":201,"line_end":201,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810097,"byte_end":8810129,"line_start":202,"line_end":202,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810130,"byte_end":8810137,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810138,"byte_end":8810149,"line_start":204,"line_end":204,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810150,"byte_end":8810167,"line_start":205,"line_end":205,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810642,"byte_end":8810657,"line_start":222,"line_end":222,"column_start":8,"column_end":23},"name":"bitandnot_m128d","qualname":"::x86_x64::sse2::bitandnot_m128d","value":"pub fn bitandnot_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitandnot_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810322,"byte_end":8810345,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810346,"byte_end":8810353,"line_start":212,"line_end":212,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810354,"byte_end":8810377,"line_start":213,"line_end":213,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810378,"byte_end":8810420,"line_start":214,"line_end":214,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810421,"byte_end":8810463,"line_start":215,"line_end":215,"column_start":1,"column_end":43}},{"value":"/ let c = bitandnot_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810464,"byte_end":8810509,"line_start":216,"line_end":216,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810510,"byte_end":8810540,"line_start":217,"line_end":217,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810541,"byte_end":8810548,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810549,"byte_end":8810560,"line_start":219,"line_end":219,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810561,"byte_end":8810578,"line_start":220,"line_end":220,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811056,"byte_end":8811071,"line_start":237,"line_end":237,"column_start":8,"column_end":23},"name":"bitandnot_m128i","qualname":"::x86_x64::sse2::bitandnot_m128i","value":"pub fn bitandnot_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `(!a) & b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitandnot_m128i(a, b).into();\n assert_eq!(c, [0, 1, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `(!a) & b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810736,"byte_end":8810759,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810760,"byte_end":8810767,"line_start":227,"line_end":227,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810768,"byte_end":8810791,"line_start":228,"line_end":228,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810792,"byte_end":8810830,"line_start":229,"line_end":229,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810831,"byte_end":8810869,"line_start":230,"line_end":230,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitandnot_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810870,"byte_end":8810921,"line_start":231,"line_end":231,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [0, 1, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810922,"byte_end":8810954,"line_start":232,"line_end":232,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810955,"byte_end":8810962,"line_start":233,"line_end":233,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810963,"byte_end":8810974,"line_start":234,"line_end":234,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8810975,"byte_end":8810992,"line_start":235,"line_end":235,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811737,"byte_end":8811753,"line_start":265,"line_end":265,"column_start":8,"column_end":24},"name":"average_u8_m128i","qualname":"::x86_x64::sse2::average_u8_m128i","value":"pub fn average_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u8` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([\n   u8::MAX, 0, 3, 4, 254, 2, 3, 4,\n   3, 4, 1, 2, 1, 2, 128, 4,\n ]);\n let b = m128i::from([\n   u8::MAX, 0, 7, 8, 15, 26, 37, 48,\n   7, 8, 15, 26, 15, 26, 37, 48,\n ]);\n let c: [u8; 16] = average_u8_m128i(a, b).into();\n assert_eq!(\n   c,\n   [\n     u8::MAX, 0, 5, 6, 135, 14, 20, 26,\n     5, 6, 8, 14, 8, 14, 83, 26\n   ]\n );\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u8` values.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811153,"byte_end":8811193,"line_start":241,"line_end":241,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811194,"byte_end":8811201,"line_start":242,"line_end":242,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811202,"byte_end":8811225,"line_start":243,"line_end":243,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811226,"byte_end":8811251,"line_start":244,"line_end":244,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 3, 4, 254, 2, 3, 4,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811252,"byte_end":8811289,"line_start":245,"line_end":245,"column_start":1,"column_end":38}},{"value":"/   3, 4, 1, 2, 1, 2, 128, 4,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811290,"byte_end":8811321,"line_start":246,"line_end":246,"column_start":1,"column_end":32}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811322,"byte_end":8811329,"line_start":247,"line_end":247,"column_start":1,"column_end":8}},{"value":"/ let b = m128i::from([","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811330,"byte_end":8811355,"line_start":248,"line_end":248,"column_start":1,"column_end":26}},{"value":"/   u8::MAX, 0, 7, 8, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811356,"byte_end":8811395,"line_start":249,"line_end":249,"column_start":1,"column_end":40}},{"value":"/   7, 8, 15, 26, 15, 26, 37, 48,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811396,"byte_end":8811431,"line_start":250,"line_end":250,"column_start":1,"column_end":36}},{"value":"/ ]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811432,"byte_end":8811439,"line_start":251,"line_end":251,"column_start":1,"column_end":8}},{"value":"/ let c: [u8; 16] = average_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811440,"byte_end":8811492,"line_start":252,"line_end":252,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811493,"byte_end":8811508,"line_start":253,"line_end":253,"column_start":1,"column_end":16}},{"value":"/   c,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811509,"byte_end":8811517,"line_start":254,"line_end":254,"column_start":1,"column_end":9}},{"value":"/   [","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811518,"byte_end":8811525,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/     u8::MAX, 0, 5, 6, 135, 14, 20, 26,","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811526,"byte_end":8811568,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/     5, 6, 8, 14, 8, 14, 83, 26","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811569,"byte_end":8811603,"line_start":257,"line_end":257,"column_start":1,"column_end":35}},{"value":"/   ]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811604,"byte_end":8811611,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"/ );","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811612,"byte_end":8811618,"line_start":259,"line_end":259,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811619,"byte_end":8811626,"line_start":260,"line_end":260,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811627,"byte_end":8811638,"line_start":261,"line_end":261,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811639,"byte_end":8811656,"line_start":262,"line_end":262,"column_start":1,"column_end":18}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811657,"byte_end":8811673,"line_start":263,"line_end":263,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812235,"byte_end":8812252,"line_start":280,"line_end":280,"column_start":8,"column_end":25},"name":"average_u16_m128i","qualname":"::x86_x64::sse2::average_u16_m128i","value":"pub fn average_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise average of the `u16` values.\n ```\n # use safe_arch::*;\n let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);\n let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);\n let c: [u16; 8] = average_u16_m128i(a, b).into();\n assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise average of the `u16` values.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811831,"byte_end":8811872,"line_start":269,"line_end":269,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811873,"byte_end":8811880,"line_start":270,"line_end":270,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811881,"byte_end":8811904,"line_start":271,"line_end":271,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([u16::MAX, 0, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811905,"byte_end":8811962,"line_start":272,"line_end":272,"column_start":1,"column_end":58}},{"value":"/ let b = m128i::from([u16::MAX, 0, 7, 8, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8811963,"byte_end":8812024,"line_start":273,"line_end":273,"column_start":1,"column_end":62}},{"value":"/ let c: [u16; 8] = average_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812025,"byte_end":8812078,"line_start":274,"line_end":274,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u16::MAX, 0, 5, 6, 8, 14, 20, 26]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812079,"byte_end":8812133,"line_start":275,"line_end":275,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812134,"byte_end":8812141,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812142,"byte_end":8812153,"line_start":277,"line_end":277,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812154,"byte_end":8812171,"line_start":278,"line_end":278,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812734,"byte_end":8812757,"line_start":296,"line_end":296,"column_start":8,"column_end":31},"name":"byte_shl_imm_u128_m128i","qualname":"::x86_x64::sse2::byte_shl_imm_u128_m128i","value":"pub fn byte_shl_imm_u128_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all bits in the entire register left by a number of **bytes**.","sig":null,"attributes":[{"value":"/ Shifts all bits in the entire register left by a number of **bytes**.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812331,"byte_end":8812404,"line_start":284,"line_end":284,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812405,"byte_end":8812408,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812409,"byte_end":8812416,"line_start":286,"line_end":286,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812417,"byte_end":8812440,"line_start":287,"line_end":287,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from(0x0000000B_0000000A_0000000F_11111111_u128);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812441,"byte_end":8812509,"line_start":288,"line_end":288,"column_start":1,"column_end":69}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812510,"byte_end":8812516,"line_start":289,"line_end":289,"column_start":1,"column_end":7}},{"value":"/ let b: u128 = byte_shl_imm_u128_m128i::<1>(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812517,"byte_end":8812574,"line_start":290,"line_end":290,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(b, 0x00000B00_00000A00_00000F11_11111100);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812575,"byte_end":8812632,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812633,"byte_end":8812640,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812641,"byte_end":8812652,"line_start":293,"line_end":293,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812653,"byte_end":8812670,"line_start":294,"line_end":294,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813248,"byte_end":8813271,"line_start":312,"line_end":312,"column_start":8,"column_end":31},"name":"byte_shr_imm_u128_m128i","qualname":"::x86_x64::sse2::byte_shr_imm_u128_m128i","value":"pub fn byte_shr_imm_u128_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all bits in the entire register right by a number of **bytes**.","sig":null,"attributes":[{"value":"/ Shifts all bits in the entire register right by a number of **bytes**.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812844,"byte_end":8812918,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812919,"byte_end":8812922,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812923,"byte_end":8812930,"line_start":302,"line_end":302,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812931,"byte_end":8812954,"line_start":303,"line_end":303,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from(0x0000000B_0000000A_0000000F_11111111_u128);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8812955,"byte_end":8813023,"line_start":304,"line_end":304,"column_start":1,"column_end":69}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813024,"byte_end":8813030,"line_start":305,"line_end":305,"column_start":1,"column_end":7}},{"value":"/ let c: u128 = byte_shr_imm_u128_m128i::<1>(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813031,"byte_end":8813088,"line_start":306,"line_end":306,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, 0x00000000_0B000000_0A000000_0F111111);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813089,"byte_end":8813146,"line_start":307,"line_end":307,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813147,"byte_end":8813154,"line_start":308,"line_end":308,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813155,"byte_end":8813166,"line_start":309,"line_end":309,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813167,"byte_end":8813184,"line_start":310,"line_end":310,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813692,"byte_end":8813715,"line_start":326,"line_end":326,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128_from_m128d","value":"pub fn cast_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128d`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813358,"byte_end":8813404,"line_start":316,"line_end":316,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813405,"byte_end":8813412,"line_start":317,"line_end":317,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813413,"byte_end":8813436,"line_start":318,"line_end":318,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813437,"byte_end":8813479,"line_start":319,"line_end":319,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128d(a).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813480,"byte_end":8813539,"line_start":320,"line_end":320,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813540,"byte_end":8813590,"line_start":321,"line_end":321,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813591,"byte_end":8813598,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813599,"byte_end":8813610,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813611,"byte_end":8813628,"line_start":324,"line_end":324,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814110,"byte_end":8814134,"line_start":340,"line_end":340,"column_start":8,"column_end":32},"name":"cast_to_m128i_from_m128d","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128d","value":"pub fn cast_to_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128d`\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();\n assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128d`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813777,"byte_end":8813824,"line_start":330,"line_end":330,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813825,"byte_end":8813832,"line_start":331,"line_end":331,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813833,"byte_end":8813856,"line_start":332,"line_end":332,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813857,"byte_end":8813899,"line_start":333,"line_end":333,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128d(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813900,"byte_end":8813957,"line_start":334,"line_end":334,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, 0x3FF00000, 0, 0x40000000]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8813958,"byte_end":8814008,"line_start":335,"line_end":335,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814009,"byte_end":8814016,"line_start":336,"line_end":336,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814017,"byte_end":8814028,"line_start":337,"line_end":337,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814029,"byte_end":8814046,"line_start":338,"line_end":338,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":636},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814554,"byte_end":8814577,"line_start":354,"line_end":354,"column_start":8,"column_end":31},"name":"cast_to_m128d_from_m128","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128","value":"pub fn cast_to_m128d_from_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();\n assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814201,"byte_end":8814247,"line_start":344,"line_end":344,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814248,"byte_end":8814255,"line_start":345,"line_end":345,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814256,"byte_end":8814279,"line_start":346,"line_end":346,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814280,"byte_end":8814331,"line_start":347,"line_end":347,"column_start":1,"column_end":52}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128(a).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814332,"byte_end":8814391,"line_start":348,"line_end":348,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0x400000003F800000, 0x4080000040400000]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814392,"byte_end":8814452,"line_start":349,"line_end":349,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814453,"byte_end":8814460,"line_start":350,"line_end":350,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814461,"byte_end":8814472,"line_start":351,"line_end":351,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814473,"byte_end":8814490,"line_start":352,"line_end":352,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814998,"byte_end":8815021,"line_start":368,"line_end":368,"column_start":8,"column_end":31},"name":"cast_to_m128i_from_m128","qualname":"::x86_x64::sse2::cast_to_m128i_from_m128","value":"pub fn cast_to_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128i` from `m128`\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n let c: [u32; 4] = cast_to_m128i_from_m128(a).into();\n assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128i` from `m128`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814640,"byte_end":8814686,"line_start":358,"line_end":358,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814687,"byte_end":8814694,"line_start":359,"line_end":359,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814695,"byte_end":8814718,"line_start":360,"line_end":360,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814719,"byte_end":8814770,"line_start":361,"line_end":361,"column_start":1,"column_end":52}},{"value":"/ let c: [u32; 4] = cast_to_m128i_from_m128(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814771,"byte_end":8814827,"line_start":362,"line_end":362,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0x3F800000, 0x40000000, 0x40400000, 0x40800000]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814828,"byte_end":8814896,"line_start":363,"line_end":363,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814897,"byte_end":8814904,"line_start":364,"line_end":364,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814905,"byte_end":8814916,"line_start":365,"line_end":365,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8814917,"byte_end":8814934,"line_start":366,"line_end":366,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815415,"byte_end":8815439,"line_start":382,"line_end":382,"column_start":8,"column_end":32},"name":"cast_to_m128d_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128d_from_m128i","value":"pub fn cast_to_m128d_from_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128d` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();\n assert_eq!(c, [0x200000001, 0x400000003]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128d` from `m128i`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815087,"byte_end":8815134,"line_start":372,"line_end":372,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815135,"byte_end":8815142,"line_start":373,"line_end":373,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815143,"byte_end":8815166,"line_start":374,"line_end":374,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815167,"byte_end":8815205,"line_start":375,"line_end":375,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = cast_to_m128d_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815206,"byte_end":8815266,"line_start":376,"line_end":376,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [0x200000001, 0x400000003]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815267,"byte_end":8815313,"line_start":377,"line_end":377,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815314,"byte_end":8815321,"line_start":378,"line_end":378,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815322,"byte_end":8815333,"line_start":379,"line_end":379,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815334,"byte_end":8815351,"line_start":380,"line_end":380,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815818,"byte_end":8815841,"line_start":396,"line_end":396,"column_start":8,"column_end":31},"name":"cast_to_m128_from_m128i","qualname":"::x86_x64::sse2::cast_to_m128_from_m128i","value":"pub fn cast_to_m128_from_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Bit-preserving cast to `m128` from `m128i`\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Bit-preserving cast to `m128` from `m128i`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815506,"byte_end":8815552,"line_start":386,"line_end":386,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815553,"byte_end":8815560,"line_start":387,"line_end":387,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815561,"byte_end":8815584,"line_start":388,"line_end":388,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815585,"byte_end":8815623,"line_start":389,"line_end":389,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = cast_to_m128_from_m128i(a).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815624,"byte_end":8815683,"line_start":390,"line_end":390,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815684,"byte_end":8815716,"line_start":391,"line_end":391,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815717,"byte_end":8815724,"line_start":392,"line_end":392,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815725,"byte_end":8815736,"line_start":393,"line_end":393,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815737,"byte_end":8815754,"line_start":394,"line_end":394,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816453,"byte_end":8816473,"line_start":413,"line_end":413,"column_start":8,"column_end":28},"name":"cmp_eq_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i8_m128i","value":"pub fn cmp_eq_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815906,"byte_end":8815947,"line_start":400,"line_end":400,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815948,"byte_end":8815951,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8815952,"byte_end":8816010,"line_start":402,"line_end":402,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816011,"byte_end":8816018,"line_start":403,"line_end":403,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816019,"byte_end":8816042,"line_start":404,"line_end":404,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816043,"byte_end":8816127,"line_start":405,"line_end":405,"column_start":1,"column_end":85}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816128,"byte_end":8816219,"line_start":406,"line_end":406,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_eq_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816220,"byte_end":8816276,"line_start":407,"line_end":407,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816277,"byte_end":8816351,"line_start":408,"line_end":408,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816352,"byte_end":8816359,"line_start":409,"line_end":409,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816360,"byte_end":8816371,"line_start":410,"line_end":410,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816372,"byte_end":8816389,"line_start":411,"line_end":411,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817019,"byte_end":8817040,"line_start":430,"line_end":430,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i16_m128i","value":"pub fn cmp_eq_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816553,"byte_end":8816595,"line_start":417,"line_end":417,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816596,"byte_end":8816599,"line_start":418,"line_end":418,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816600,"byte_end":8816658,"line_start":419,"line_end":419,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816659,"byte_end":8816666,"line_start":420,"line_end":420,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816667,"byte_end":8816690,"line_start":421,"line_end":421,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816691,"byte_end":8816749,"line_start":422,"line_end":422,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816750,"byte_end":8816811,"line_start":423,"line_end":423,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_eq_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816812,"byte_end":8816869,"line_start":424,"line_end":424,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816870,"byte_end":8816917,"line_start":425,"line_end":425,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816918,"byte_end":8816925,"line_start":426,"line_end":426,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816926,"byte_end":8816937,"line_start":427,"line_end":427,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8816938,"byte_end":8816955,"line_start":428,"line_end":428,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817531,"byte_end":8817552,"line_start":447,"line_end":447,"column_start":8,"column_end":29},"name":"cmp_eq_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_eq_mask_i32_m128i","value":"pub fn cmp_eq_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a == b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817121,"byte_end":8817163,"line_start":434,"line_end":434,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817164,"byte_end":8817167,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817168,"byte_end":8817226,"line_start":436,"line_end":436,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817227,"byte_end":8817234,"line_start":437,"line_end":437,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817235,"byte_end":8817258,"line_start":438,"line_end":438,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817259,"byte_end":8817297,"line_start":439,"line_end":439,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817298,"byte_end":8817336,"line_start":440,"line_end":440,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_eq_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817337,"byte_end":8817394,"line_start":441,"line_end":441,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817395,"byte_end":8817429,"line_start":442,"line_end":442,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817430,"byte_end":8817437,"line_start":443,"line_end":443,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817438,"byte_end":8817449,"line_start":444,"line_end":444,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817450,"byte_end":8817467,"line_start":445,"line_end":445,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817990,"byte_end":8818007,"line_start":464,"line_end":464,"column_start":8,"column_end":25},"name":"cmp_eq_mask_m128d","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d","value":"pub fn cmp_eq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a == b`, mask output.","sig":null,"attributes":[{"value":"/ Lanewise `a == b`, mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817633,"byte_end":8817668,"line_start":451,"line_end":451,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817669,"byte_end":8817672,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817673,"byte_end":8817689,"line_start":453,"line_end":453,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817690,"byte_end":8817697,"line_start":454,"line_end":454,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817698,"byte_end":8817721,"line_start":455,"line_end":455,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817722,"byte_end":8817764,"line_start":456,"line_end":456,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817765,"byte_end":8817807,"line_start":457,"line_end":457,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817808,"byte_end":8817854,"line_start":458,"line_end":458,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817855,"byte_end":8817888,"line_start":459,"line_end":459,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817889,"byte_end":8817896,"line_start":460,"line_end":460,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817897,"byte_end":8817908,"line_start":461,"line_end":461,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8817909,"byte_end":8817926,"line_start":462,"line_end":462,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818468,"byte_end":8818487,"line_start":481,"line_end":481,"column_start":8,"column_end":27},"name":"cmp_eq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_mask_m128d_s","value":"pub fn cmp_eq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a == b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a == b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818085,"byte_end":8818130,"line_start":468,"line_end":468,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818131,"byte_end":8818134,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818135,"byte_end":8818151,"line_start":470,"line_end":470,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818152,"byte_end":8818159,"line_start":471,"line_end":471,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818160,"byte_end":8818183,"line_start":472,"line_end":472,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818184,"byte_end":8818226,"line_start":473,"line_end":473,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818227,"byte_end":8818269,"line_start":474,"line_end":474,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_eq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818270,"byte_end":8818318,"line_start":475,"line_end":475,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818319,"byte_end":8818366,"line_start":476,"line_end":476,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818367,"byte_end":8818374,"line_start":477,"line_end":477,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818375,"byte_end":8818386,"line_start":478,"line_end":478,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818387,"byte_end":8818404,"line_start":479,"line_end":479,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818916,"byte_end":8818933,"line_start":498,"line_end":498,"column_start":8,"column_end":25},"name":"cmp_ge_mask_m128d","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d","value":"pub fn cmp_ge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a >= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a >= b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818565,"byte_end":8818587,"line_start":485,"line_end":485,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818588,"byte_end":8818591,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818592,"byte_end":8818608,"line_start":487,"line_end":487,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818609,"byte_end":8818616,"line_start":488,"line_end":488,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818617,"byte_end":8818640,"line_start":489,"line_end":489,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818641,"byte_end":8818683,"line_start":490,"line_end":490,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818684,"byte_end":8818726,"line_start":491,"line_end":491,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818727,"byte_end":8818773,"line_start":492,"line_end":492,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818774,"byte_end":8818814,"line_start":493,"line_end":493,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818815,"byte_end":8818822,"line_start":494,"line_end":494,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818823,"byte_end":8818834,"line_start":495,"line_end":495,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8818835,"byte_end":8818852,"line_start":496,"line_end":496,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819394,"byte_end":8819413,"line_start":515,"line_end":515,"column_start":8,"column_end":27},"name":"cmp_ge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_mask_m128d_s","value":"pub fn cmp_ge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a >= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a >= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819011,"byte_end":8819056,"line_start":502,"line_end":502,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819057,"byte_end":8819060,"line_start":503,"line_end":503,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819061,"byte_end":8819077,"line_start":504,"line_end":504,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819078,"byte_end":8819085,"line_start":505,"line_end":505,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819086,"byte_end":8819109,"line_start":506,"line_end":506,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819110,"byte_end":8819152,"line_start":507,"line_end":507,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819153,"byte_end":8819195,"line_start":508,"line_end":508,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819196,"byte_end":8819244,"line_start":509,"line_end":509,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819245,"byte_end":8819292,"line_start":510,"line_end":510,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819293,"byte_end":8819300,"line_start":511,"line_end":511,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819301,"byte_end":8819312,"line_start":512,"line_end":512,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819313,"byte_end":8819330,"line_start":513,"line_end":513,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":647},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820043,"byte_end":8820063,"line_start":532,"line_end":532,"column_start":8,"column_end":28},"name":"cmp_gt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i8_m128i","value":"pub fn cmp_gt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819491,"byte_end":8819531,"line_start":519,"line_end":519,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819532,"byte_end":8819535,"line_start":520,"line_end":520,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819536,"byte_end":8819594,"line_start":521,"line_end":521,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819595,"byte_end":8819602,"line_start":522,"line_end":522,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819603,"byte_end":8819626,"line_start":523,"line_end":523,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819627,"byte_end":8819715,"line_start":524,"line_end":524,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819716,"byte_end":8819807,"line_start":525,"line_end":525,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_gt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819808,"byte_end":8819864,"line_start":526,"line_end":526,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819865,"byte_end":8819941,"line_start":527,"line_end":527,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819942,"byte_end":8819949,"line_start":528,"line_end":528,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819950,"byte_end":8819961,"line_start":529,"line_end":529,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8819962,"byte_end":8819979,"line_start":530,"line_end":530,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820612,"byte_end":8820633,"line_start":549,"line_end":549,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i16_m128i","value":"pub fn cmp_gt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820143,"byte_end":8820184,"line_start":536,"line_end":536,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820185,"byte_end":8820188,"line_start":537,"line_end":537,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820189,"byte_end":8820247,"line_start":538,"line_end":538,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820248,"byte_end":8820255,"line_start":539,"line_end":539,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820256,"byte_end":8820279,"line_start":540,"line_end":540,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820280,"byte_end":8820339,"line_start":541,"line_end":541,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820340,"byte_end":8820401,"line_start":542,"line_end":542,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_gt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820402,"byte_end":8820459,"line_start":543,"line_end":543,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, -1, -1, -1, -1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820460,"byte_end":8820510,"line_start":544,"line_end":544,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820511,"byte_end":8820518,"line_start":545,"line_end":545,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820519,"byte_end":8820530,"line_start":546,"line_end":546,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820531,"byte_end":8820548,"line_start":547,"line_end":547,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821125,"byte_end":8821146,"line_start":566,"line_end":566,"column_start":8,"column_end":29},"name":"cmp_gt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_gt_mask_i32_m128i","value":"pub fn cmp_gt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820714,"byte_end":8820755,"line_start":553,"line_end":553,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820756,"byte_end":8820759,"line_start":554,"line_end":554,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820760,"byte_end":8820818,"line_start":555,"line_end":555,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820819,"byte_end":8820826,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820827,"byte_end":8820850,"line_start":557,"line_end":557,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820851,"byte_end":8820891,"line_start":558,"line_end":558,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820892,"byte_end":8820930,"line_start":559,"line_end":559,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_gt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820931,"byte_end":8820988,"line_start":560,"line_end":560,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [0, -1, 0, -1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8820989,"byte_end":8821023,"line_start":561,"line_end":561,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821024,"byte_end":8821031,"line_start":562,"line_end":562,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821032,"byte_end":8821043,"line_start":563,"line_end":563,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821044,"byte_end":8821061,"line_start":564,"line_end":564,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821570,"byte_end":8821587,"line_start":583,"line_end":583,"column_start":8,"column_end":25},"name":"cmp_gt_mask_m128d","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d","value":"pub fn cmp_gt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a > b`.","sig":null,"attributes":[{"value":"/ Lanewise `a > b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821227,"byte_end":8821248,"line_start":570,"line_end":570,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821249,"byte_end":8821252,"line_start":571,"line_end":571,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821253,"byte_end":8821269,"line_start":572,"line_end":572,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821270,"byte_end":8821277,"line_start":573,"line_end":573,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821278,"byte_end":8821301,"line_start":574,"line_end":574,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821302,"byte_end":8821344,"line_start":575,"line_end":575,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821345,"byte_end":8821387,"line_start":576,"line_end":576,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821388,"byte_end":8821434,"line_start":577,"line_end":577,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821435,"byte_end":8821468,"line_start":578,"line_end":578,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821469,"byte_end":8821476,"line_start":579,"line_end":579,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821477,"byte_end":8821488,"line_start":580,"line_end":580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821489,"byte_end":8821506,"line_start":581,"line_end":581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822047,"byte_end":8822066,"line_start":600,"line_end":600,"column_start":8,"column_end":27},"name":"cmp_gt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_mask_m128d_s","value":"pub fn cmp_gt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a > b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a > b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821665,"byte_end":8821709,"line_start":587,"line_end":587,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821710,"byte_end":8821713,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821714,"byte_end":8821730,"line_start":589,"line_end":589,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821731,"byte_end":8821738,"line_start":590,"line_end":590,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821739,"byte_end":8821762,"line_start":591,"line_end":591,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821763,"byte_end":8821805,"line_start":592,"line_end":592,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821806,"byte_end":8821848,"line_start":593,"line_end":593,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_gt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821849,"byte_end":8821897,"line_start":594,"line_end":594,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821898,"byte_end":8821945,"line_start":595,"line_end":595,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821946,"byte_end":8821953,"line_start":596,"line_end":596,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821954,"byte_end":8821965,"line_start":597,"line_end":597,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8821966,"byte_end":8821983,"line_start":598,"line_end":598,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822495,"byte_end":8822512,"line_start":617,"line_end":617,"column_start":8,"column_end":25},"name":"cmp_le_mask_m128d","qualname":"::x86_x64::sse2::cmp_le_mask_m128d","value":"pub fn cmp_le_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a <= b`.","sig":null,"attributes":[{"value":"/ Lanewise `a <= b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822144,"byte_end":8822166,"line_start":604,"line_end":604,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822167,"byte_end":8822170,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822171,"byte_end":8822187,"line_start":606,"line_end":606,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822188,"byte_end":8822195,"line_start":607,"line_end":607,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822196,"byte_end":8822219,"line_start":608,"line_end":608,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822220,"byte_end":8822262,"line_start":609,"line_end":609,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822263,"byte_end":8822305,"line_start":610,"line_end":610,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822306,"byte_end":8822352,"line_start":611,"line_end":611,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, u64::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822353,"byte_end":8822393,"line_start":612,"line_end":612,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822394,"byte_end":8822401,"line_start":613,"line_end":613,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822402,"byte_end":8822413,"line_start":614,"line_end":614,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822414,"byte_end":8822431,"line_start":615,"line_end":615,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822973,"byte_end":8822992,"line_start":634,"line_end":634,"column_start":8,"column_end":27},"name":"cmp_le_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_le_mask_m128d_s","value":"pub fn cmp_le_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a <= b`, other lanes unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a <= b`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822590,"byte_end":8822635,"line_start":621,"line_end":621,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822636,"byte_end":8822639,"line_start":622,"line_end":622,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822640,"byte_end":8822656,"line_start":623,"line_end":623,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822657,"byte_end":8822664,"line_start":624,"line_end":624,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822665,"byte_end":8822688,"line_start":625,"line_end":625,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822689,"byte_end":8822731,"line_start":626,"line_end":626,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822732,"byte_end":8822774,"line_start":627,"line_end":627,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_le_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822775,"byte_end":8822823,"line_start":628,"line_end":628,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822824,"byte_end":8822871,"line_start":629,"line_end":629,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822872,"byte_end":8822879,"line_start":630,"line_end":630,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822880,"byte_end":8822891,"line_start":631,"line_end":631,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8822892,"byte_end":8822909,"line_start":632,"line_end":632,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823622,"byte_end":8823642,"line_start":651,"line_end":651,"column_start":8,"column_end":28},"name":"cmp_lt_mask_i8_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i8_m128i","value":"pub fn cmp_lt_mask_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i8`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823070,"byte_end":8823110,"line_start":638,"line_end":638,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823111,"byte_end":8823114,"line_start":639,"line_end":639,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823115,"byte_end":8823173,"line_start":640,"line_end":640,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823174,"byte_end":8823181,"line_start":641,"line_end":641,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823182,"byte_end":8823205,"line_start":642,"line_end":642,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 20, 3, 40, 5, 60, 7, 80, 9, 10, 11, 12, 13, 14, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823206,"byte_end":8823294,"line_start":643,"line_end":643,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 120]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823295,"byte_end":8823386,"line_start":644,"line_end":644,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = cmp_lt_mask_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823387,"byte_end":8823443,"line_start":645,"line_end":645,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, -1, 0, -1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823444,"byte_end":8823520,"line_start":646,"line_end":646,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823521,"byte_end":8823528,"line_start":647,"line_end":647,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823529,"byte_end":8823540,"line_start":648,"line_end":648,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823541,"byte_end":8823558,"line_start":649,"line_end":649,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824187,"byte_end":8824208,"line_start":668,"line_end":668,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i16_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i16_m128i","value":"pub fn cmp_lt_mask_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i16`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823722,"byte_end":8823763,"line_start":655,"line_end":655,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823764,"byte_end":8823767,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823768,"byte_end":8823826,"line_start":657,"line_end":657,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823827,"byte_end":8823834,"line_start":658,"line_end":658,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823835,"byte_end":8823858,"line_start":659,"line_end":659,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 20, 3, 40, -1, -2, -3, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823859,"byte_end":8823918,"line_start":660,"line_end":660,"column_start":1,"column_end":60}},{"value":"/ let b = m128i::from([5_i16, 2, 7, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823919,"byte_end":8823980,"line_start":661,"line_end":661,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = cmp_lt_mask_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8823981,"byte_end":8824038,"line_start":662,"line_end":662,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, -1, 0, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824039,"byte_end":8824085,"line_start":663,"line_end":663,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824086,"byte_end":8824093,"line_start":664,"line_end":664,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824094,"byte_end":8824105,"line_start":665,"line_end":665,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824106,"byte_end":8824123,"line_start":666,"line_end":666,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824699,"byte_end":8824720,"line_start":685,"line_end":685,"column_start":8,"column_end":29},"name":"cmp_lt_mask_i32_m128i","qualname":"::x86_x64::sse2::cmp_lt_mask_i32_m128i","value":"pub fn cmp_lt_mask_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b` with lanes as `i32`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824289,"byte_end":8824330,"line_start":672,"line_end":672,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824331,"byte_end":8824334,"line_start":673,"line_end":673,"column_start":1,"column_end":4}},{"value":"/ All bits 1 for true (`-1`), all bit 0 for false (`0`).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824335,"byte_end":8824393,"line_start":674,"line_end":674,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824394,"byte_end":8824401,"line_start":675,"line_end":675,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824402,"byte_end":8824425,"line_start":676,"line_end":676,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 20, 7, 40]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824426,"byte_end":8824466,"line_start":677,"line_end":677,"column_start":1,"column_end":41}},{"value":"/ let b = m128i::from([5, 2, 7, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824467,"byte_end":8824505,"line_start":678,"line_end":678,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = cmp_lt_mask_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824506,"byte_end":8824563,"line_start":679,"line_end":679,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, 0, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824564,"byte_end":8824597,"line_start":680,"line_end":680,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824598,"byte_end":8824605,"line_start":681,"line_end":681,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824606,"byte_end":8824617,"line_start":682,"line_end":682,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824618,"byte_end":8824635,"line_start":683,"line_end":683,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825144,"byte_end":8825161,"line_start":702,"line_end":702,"column_start":8,"column_end":25},"name":"cmp_lt_mask_m128d","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d","value":"pub fn cmp_lt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a < b`.","sig":null,"attributes":[{"value":"/ Lanewise `a < b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824801,"byte_end":8824822,"line_start":689,"line_end":689,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824823,"byte_end":8824826,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824827,"byte_end":8824843,"line_start":691,"line_end":691,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824844,"byte_end":8824851,"line_start":692,"line_end":692,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824852,"byte_end":8824875,"line_start":693,"line_end":693,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 7.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824876,"byte_end":8824918,"line_start":694,"line_end":694,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824919,"byte_end":8824961,"line_start":695,"line_end":695,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8824962,"byte_end":8825008,"line_start":696,"line_end":696,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825009,"byte_end":8825042,"line_start":697,"line_end":697,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825043,"byte_end":8825050,"line_start":698,"line_end":698,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825051,"byte_end":8825062,"line_start":699,"line_end":699,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825063,"byte_end":8825080,"line_start":700,"line_end":700,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825620,"byte_end":8825639,"line_start":719,"line_end":719,"column_start":8,"column_end":27},"name":"cmp_lt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_mask_m128d_s","value":"pub fn cmp_lt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a < b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a < b`, other lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825239,"byte_end":8825282,"line_start":706,"line_end":706,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825283,"byte_end":8825286,"line_start":707,"line_end":707,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825287,"byte_end":8825303,"line_start":708,"line_end":708,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825304,"byte_end":8825311,"line_start":709,"line_end":709,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825312,"byte_end":8825335,"line_start":710,"line_end":710,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825336,"byte_end":8825378,"line_start":711,"line_end":711,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825379,"byte_end":8825421,"line_start":712,"line_end":712,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_lt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825422,"byte_end":8825470,"line_start":713,"line_end":713,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825471,"byte_end":8825518,"line_start":714,"line_end":714,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825519,"byte_end":8825526,"line_start":715,"line_end":715,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825527,"byte_end":8825538,"line_start":716,"line_end":716,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825539,"byte_end":8825556,"line_start":717,"line_end":717,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826062,"byte_end":8826080,"line_start":736,"line_end":736,"column_start":8,"column_end":26},"name":"cmp_neq_mask_m128d","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d","value":"pub fn cmp_neq_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a != b`.","sig":null,"attributes":[{"value":"/ Lanewise `a != b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825717,"byte_end":8825739,"line_start":723,"line_end":723,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825740,"byte_end":8825743,"line_start":724,"line_end":724,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825744,"byte_end":8825760,"line_start":725,"line_end":725,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825761,"byte_end":8825768,"line_start":726,"line_end":726,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825769,"byte_end":8825792,"line_start":727,"line_end":727,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825793,"byte_end":8825835,"line_start":728,"line_end":728,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825836,"byte_end":8825878,"line_start":729,"line_end":729,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825879,"byte_end":8825926,"line_start":730,"line_end":730,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825927,"byte_end":8825960,"line_start":731,"line_end":731,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825961,"byte_end":8825968,"line_start":732,"line_end":732,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825969,"byte_end":8825980,"line_start":733,"line_end":733,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8825981,"byte_end":8825998,"line_start":734,"line_end":734,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826542,"byte_end":8826562,"line_start":753,"line_end":753,"column_start":8,"column_end":28},"name":"cmp_neq_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_mask_m128d_s","value":"pub fn cmp_neq_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a != b`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a != b`, other lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826159,"byte_end":8826203,"line_start":740,"line_end":740,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826204,"byte_end":8826207,"line_start":741,"line_end":741,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826208,"byte_end":8826224,"line_start":742,"line_end":742,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826225,"byte_end":8826232,"line_start":743,"line_end":743,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826233,"byte_end":8826256,"line_start":744,"line_end":744,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826257,"byte_end":8826299,"line_start":745,"line_end":745,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826300,"byte_end":8826342,"line_start":746,"line_end":746,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_neq_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826343,"byte_end":8826392,"line_start":747,"line_end":747,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826393,"byte_end":8826440,"line_start":748,"line_end":748,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826441,"byte_end":8826448,"line_start":749,"line_end":749,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826449,"byte_end":8826460,"line_start":750,"line_end":750,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826461,"byte_end":8826478,"line_start":751,"line_end":751,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826989,"byte_end":8827007,"line_start":770,"line_end":770,"column_start":8,"column_end":26},"name":"cmp_nge_mask_m128d","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d","value":"pub fn cmp_nge_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a >= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a >= b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826641,"byte_end":8826666,"line_start":757,"line_end":757,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826667,"byte_end":8826670,"line_start":758,"line_end":758,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826671,"byte_end":8826687,"line_start":759,"line_end":759,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826688,"byte_end":8826695,"line_start":760,"line_end":760,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826696,"byte_end":8826719,"line_start":761,"line_end":761,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826720,"byte_end":8826762,"line_start":762,"line_end":762,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826763,"byte_end":8826805,"line_start":763,"line_end":763,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826806,"byte_end":8826853,"line_start":764,"line_end":764,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826854,"byte_end":8826887,"line_start":765,"line_end":765,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826888,"byte_end":8826895,"line_start":766,"line_end":766,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826896,"byte_end":8826907,"line_start":767,"line_end":767,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8826908,"byte_end":8826925,"line_start":768,"line_end":768,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827465,"byte_end":8827485,"line_start":787,"line_end":787,"column_start":8,"column_end":28},"name":"cmp_nge_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nge_mask_m128d_s","value":"pub fn cmp_nge_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a >= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a >= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827086,"byte_end":8827133,"line_start":774,"line_end":774,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827134,"byte_end":8827137,"line_start":775,"line_end":775,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827138,"byte_end":8827154,"line_start":776,"line_end":776,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827155,"byte_end":8827162,"line_start":777,"line_end":777,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827163,"byte_end":8827186,"line_start":778,"line_end":778,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827187,"byte_end":8827229,"line_start":779,"line_end":779,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827230,"byte_end":8827272,"line_start":780,"line_end":780,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nge_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827273,"byte_end":8827322,"line_start":781,"line_end":781,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827323,"byte_end":8827363,"line_start":782,"line_end":782,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827364,"byte_end":8827371,"line_start":783,"line_end":783,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827372,"byte_end":8827383,"line_start":784,"line_end":784,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827384,"byte_end":8827401,"line_start":785,"line_end":785,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":663},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827911,"byte_end":8827929,"line_start":804,"line_end":804,"column_start":8,"column_end":26},"name":"cmp_ngt_mask_m128d","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d","value":"pub fn cmp_ngt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a > b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a > b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827564,"byte_end":8827588,"line_start":791,"line_end":791,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827589,"byte_end":8827592,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827593,"byte_end":8827609,"line_start":793,"line_end":793,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827610,"byte_end":8827617,"line_start":794,"line_end":794,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827618,"byte_end":8827641,"line_start":795,"line_end":795,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827642,"byte_end":8827684,"line_start":796,"line_end":796,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827685,"byte_end":8827727,"line_start":797,"line_end":797,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827728,"byte_end":8827775,"line_start":798,"line_end":798,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [0, u64::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827776,"byte_end":8827809,"line_start":799,"line_end":799,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827810,"byte_end":8827817,"line_start":800,"line_end":800,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827818,"byte_end":8827829,"line_start":801,"line_end":801,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8827830,"byte_end":8827847,"line_start":802,"line_end":802,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828386,"byte_end":8828406,"line_start":821,"line_end":821,"column_start":8,"column_end":28},"name":"cmp_ngt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ngt_mask_m128d_s","value":"pub fn cmp_ngt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a > b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a > b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828008,"byte_end":8828054,"line_start":808,"line_end":808,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828055,"byte_end":8828058,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828059,"byte_end":8828075,"line_start":810,"line_end":810,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828076,"byte_end":8828083,"line_start":811,"line_end":811,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828084,"byte_end":8828107,"line_start":812,"line_end":812,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828108,"byte_end":8828150,"line_start":813,"line_end":813,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828151,"byte_end":8828193,"line_start":814,"line_end":814,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ngt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828194,"byte_end":8828243,"line_start":815,"line_end":815,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [0, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828244,"byte_end":8828284,"line_start":816,"line_end":816,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828285,"byte_end":8828292,"line_start":817,"line_end":817,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828293,"byte_end":8828304,"line_start":818,"line_end":818,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828305,"byte_end":8828322,"line_start":819,"line_end":819,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828833,"byte_end":8828851,"line_start":838,"line_end":838,"column_start":8,"column_end":26},"name":"cmp_nle_mask_m128d","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d","value":"pub fn cmp_nle_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a <= b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a <= b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828485,"byte_end":8828510,"line_start":825,"line_end":825,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828511,"byte_end":8828514,"line_start":826,"line_end":826,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828515,"byte_end":8828531,"line_start":827,"line_end":827,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828532,"byte_end":8828539,"line_start":828,"line_end":828,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828540,"byte_end":8828563,"line_start":829,"line_end":829,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828564,"byte_end":8828606,"line_start":830,"line_end":830,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828607,"byte_end":8828649,"line_start":831,"line_end":831,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828650,"byte_end":8828697,"line_start":832,"line_end":832,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828698,"byte_end":8828731,"line_start":833,"line_end":833,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828732,"byte_end":8828739,"line_start":834,"line_end":834,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828740,"byte_end":8828751,"line_start":835,"line_end":835,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828752,"byte_end":8828769,"line_start":836,"line_end":836,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829316,"byte_end":8829336,"line_start":855,"line_end":855,"column_start":8,"column_end":28},"name":"cmp_nle_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nle_mask_m128d_s","value":"pub fn cmp_nle_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a <= b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a <= b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828930,"byte_end":8828977,"line_start":842,"line_end":842,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828978,"byte_end":8828981,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828982,"byte_end":8828998,"line_start":844,"line_end":844,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8828999,"byte_end":8829006,"line_start":845,"line_end":845,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829007,"byte_end":8829030,"line_start":846,"line_end":846,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829031,"byte_end":8829073,"line_start":847,"line_end":847,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829074,"byte_end":8829116,"line_start":848,"line_end":848,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nle_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829117,"byte_end":8829166,"line_start":849,"line_end":849,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829167,"byte_end":8829214,"line_start":850,"line_end":850,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829215,"byte_end":8829222,"line_start":851,"line_end":851,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829223,"byte_end":8829234,"line_start":852,"line_end":852,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829235,"byte_end":8829252,"line_start":853,"line_end":853,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829762,"byte_end":8829780,"line_start":872,"line_end":872,"column_start":8,"column_end":26},"name":"cmp_nlt_mask_m128d","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d","value":"pub fn cmp_nlt_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `!(a < b)`.","sig":null,"attributes":[{"value":"/ Lanewise `!(a < b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829415,"byte_end":8829439,"line_start":859,"line_end":859,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829440,"byte_end":8829443,"line_start":860,"line_end":860,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829444,"byte_end":8829460,"line_start":861,"line_end":861,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829461,"byte_end":8829468,"line_start":862,"line_end":862,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829469,"byte_end":8829492,"line_start":863,"line_end":863,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829493,"byte_end":8829535,"line_start":864,"line_end":864,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829536,"byte_end":8829578,"line_start":865,"line_end":865,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829579,"byte_end":8829626,"line_start":866,"line_end":866,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829627,"byte_end":8829660,"line_start":867,"line_end":867,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829661,"byte_end":8829668,"line_start":868,"line_end":868,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829669,"byte_end":8829680,"line_start":869,"line_end":869,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829681,"byte_end":8829698,"line_start":870,"line_end":870,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830244,"byte_end":8830264,"line_start":889,"line_end":889,"column_start":8,"column_end":28},"name":"cmp_nlt_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_nlt_mask_m128d_s","value":"pub fn cmp_nlt_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `!(a < b)`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `!(a < b)`, other lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829859,"byte_end":8829905,"line_start":876,"line_end":876,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829906,"byte_end":8829909,"line_start":877,"line_end":877,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829910,"byte_end":8829926,"line_start":878,"line_end":878,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829927,"byte_end":8829934,"line_start":879,"line_end":879,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829935,"byte_end":8829958,"line_start":880,"line_end":880,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8829959,"byte_end":8830001,"line_start":881,"line_end":881,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830002,"byte_end":8830044,"line_start":882,"line_end":882,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_nlt_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830045,"byte_end":8830094,"line_start":883,"line_end":883,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830095,"byte_end":8830142,"line_start":884,"line_end":884,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830143,"byte_end":8830150,"line_start":885,"line_end":885,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830151,"byte_end":8830162,"line_start":886,"line_end":886,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830163,"byte_end":8830180,"line_start":887,"line_end":887,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830720,"byte_end":8830742,"line_start":906,"line_end":906,"column_start":8,"column_end":30},"name":"cmp_ordered_mask_m128d","qualname":"::x86_x64::sse2::cmp_ordered_mask_m128d","value":"pub fn cmp_ordered_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `(!a.is_nan()) & (!b.is_nan())`.","sig":null,"attributes":[{"value":"/ Lanewise `(!a.is_nan()) & (!b.is_nan())`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830343,"byte_end":8830388,"line_start":893,"line_end":893,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830389,"byte_end":8830392,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830393,"byte_end":8830409,"line_start":895,"line_end":895,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830410,"byte_end":8830417,"line_start":896,"line_end":896,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830418,"byte_end":8830441,"line_start":897,"line_end":897,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([3.0, f64::NAN]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830442,"byte_end":8830489,"line_start":898,"line_end":898,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830490,"byte_end":8830532,"line_start":899,"line_end":899,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordered_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830533,"byte_end":8830584,"line_start":900,"line_end":900,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830585,"byte_end":8830618,"line_start":901,"line_end":901,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830619,"byte_end":8830626,"line_start":902,"line_end":902,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830627,"byte_end":8830638,"line_start":903,"line_end":903,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830639,"byte_end":8830656,"line_start":904,"line_end":904,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831231,"byte_end":8831255,"line_start":923,"line_end":923,"column_start":8,"column_end":32},"name":"cmp_ordered_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_ordered_mask_m128d_s","value":"pub fn cmp_ordered_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `(!a.is_nan()) & (!b.is_nan())`, other lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830821,"byte_end":8830888,"line_start":910,"line_end":910,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830889,"byte_end":8830892,"line_start":911,"line_end":911,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830893,"byte_end":8830909,"line_start":912,"line_end":912,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830910,"byte_end":8830917,"line_start":913,"line_end":913,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830918,"byte_end":8830941,"line_start":914,"line_end":914,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([2.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830942,"byte_end":8830984,"line_start":915,"line_end":915,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8830985,"byte_end":8831027,"line_start":916,"line_end":916,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_ordered_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831028,"byte_end":8831081,"line_start":917,"line_end":917,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831082,"byte_end":8831129,"line_start":918,"line_end":918,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831130,"byte_end":8831137,"line_start":919,"line_end":919,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831138,"byte_end":8831149,"line_start":920,"line_end":920,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831150,"byte_end":8831167,"line_start":921,"line_end":921,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831703,"byte_end":8831723,"line_start":940,"line_end":940,"column_start":8,"column_end":28},"name":"cmp_unord_mask_m128d","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d","value":"pub fn cmp_unord_mask_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a.is_nan() | b.is_nan()`.","sig":null,"attributes":[{"value":"/ Lanewise `a.is_nan() | b.is_nan()`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831334,"byte_end":8831373,"line_start":927,"line_end":927,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831374,"byte_end":8831377,"line_start":928,"line_end":928,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831378,"byte_end":8831394,"line_start":929,"line_end":929,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831395,"byte_end":8831402,"line_start":930,"line_end":930,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831403,"byte_end":8831426,"line_start":931,"line_end":931,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831427,"byte_end":8831474,"line_start":932,"line_end":932,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831475,"byte_end":8831517,"line_start":933,"line_end":933,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831518,"byte_end":8831567,"line_start":934,"line_end":934,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [u64::MAX, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831568,"byte_end":8831601,"line_start":935,"line_end":935,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831602,"byte_end":8831609,"line_start":936,"line_end":936,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831610,"byte_end":8831621,"line_start":937,"line_end":937,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831622,"byte_end":8831639,"line_start":938,"line_end":938,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832211,"byte_end":8832233,"line_start":957,"line_end":957,"column_start":8,"column_end":30},"name":"cmp_unord_mask_m128d_s","qualname":"::x86_x64::sse2::cmp_unord_mask_m128d_s","value":"pub fn cmp_unord_mask_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","sig":null,"attributes":[{"value":"/ Low lane `a.is_nan() | b.is_nan()`, other lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831804,"byte_end":8831865,"line_start":944,"line_end":944,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831866,"byte_end":8831869,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ Mask output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831870,"byte_end":8831886,"line_start":946,"line_end":946,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831887,"byte_end":8831894,"line_start":947,"line_end":947,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831895,"byte_end":8831918,"line_start":948,"line_end":948,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([f64::NAN, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831919,"byte_end":8831966,"line_start":949,"line_end":949,"column_start":1,"column_end":48}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8831967,"byte_end":8832009,"line_start":950,"line_end":950,"column_start":1,"column_end":43}},{"value":"/ let c = cmp_unord_mask_m128d_s(a, b).to_bits();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832010,"byte_end":8832061,"line_start":951,"line_end":951,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(c, [u64::MAX, 5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832062,"byte_end":8832109,"line_start":952,"line_end":952,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832110,"byte_end":8832117,"line_start":953,"line_end":953,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832118,"byte_end":8832129,"line_start":954,"line_end":954,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832130,"byte_end":8832147,"line_start":955,"line_end":955,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832633,"byte_end":8832651,"line_start":973,"line_end":973,"column_start":8,"column_end":26},"name":"cmp_eq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_eq_i32_m128d_s","value":"pub fn cmp_eq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` equal to.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832314,"byte_end":8832342,"line_start":961,"line_end":961,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832343,"byte_end":8832346,"line_start":962,"line_end":962,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832347,"byte_end":8832364,"line_start":963,"line_end":963,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832365,"byte_end":8832372,"line_start":964,"line_end":964,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832373,"byte_end":8832396,"line_start":965,"line_end":965,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832397,"byte_end":8832439,"line_start":966,"line_end":966,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832440,"byte_end":8832482,"line_start":967,"line_end":967,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_eq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832483,"byte_end":8832531,"line_start":968,"line_end":968,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832532,"byte_end":8832539,"line_start":969,"line_end":969,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832540,"byte_end":8832551,"line_start":970,"line_end":970,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832552,"byte_end":8832569,"line_start":971,"line_end":971,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":674},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833056,"byte_end":8833074,"line_start":989,"line_end":989,"column_start":8,"column_end":26},"name":"cmp_ge_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_ge_i32_m128d_s","value":"pub fn cmp_ge_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than or equal to.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832721,"byte_end":8832765,"line_start":977,"line_end":977,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832766,"byte_end":8832769,"line_start":978,"line_end":978,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832770,"byte_end":8832787,"line_start":979,"line_end":979,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832788,"byte_end":8832795,"line_start":980,"line_end":980,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832796,"byte_end":8832819,"line_start":981,"line_end":981,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832820,"byte_end":8832862,"line_start":982,"line_end":982,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832863,"byte_end":8832905,"line_start":983,"line_end":983,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832906,"byte_end":8832954,"line_start":984,"line_end":984,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832955,"byte_end":8832962,"line_start":985,"line_end":985,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832963,"byte_end":8832974,"line_start":986,"line_end":986,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8832975,"byte_end":8832992,"line_start":987,"line_end":987,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833467,"byte_end":8833485,"line_start":1005,"line_end":1005,"column_start":8,"column_end":26},"name":"cmp_gt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_gt_i32_m128d_s","value":"pub fn cmp_gt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` greater than.","sig":null,"attributes":[{"value":"/ Low lane `f64` greater than.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833144,"byte_end":8833176,"line_start":993,"line_end":993,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833177,"byte_end":8833180,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833181,"byte_end":8833198,"line_start":995,"line_end":995,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833199,"byte_end":8833206,"line_start":996,"line_end":996,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833207,"byte_end":8833230,"line_start":997,"line_end":997,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833231,"byte_end":8833273,"line_start":998,"line_end":998,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833274,"byte_end":8833316,"line_start":999,"line_end":999,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_ge_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833317,"byte_end":8833365,"line_start":1000,"line_end":1000,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833366,"byte_end":8833373,"line_start":1001,"line_end":1001,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833374,"byte_end":8833385,"line_start":1002,"line_end":1002,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833386,"byte_end":8833403,"line_start":1003,"line_end":1003,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833887,"byte_end":8833905,"line_start":1021,"line_end":1021,"column_start":8,"column_end":26},"name":"cmp_le_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_le_i32_m128d_s","value":"pub fn cmp_le_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than or equal to.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than or equal to.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833555,"byte_end":8833596,"line_start":1009,"line_end":1009,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833597,"byte_end":8833600,"line_start":1010,"line_end":1010,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833601,"byte_end":8833618,"line_start":1011,"line_end":1011,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833619,"byte_end":8833626,"line_start":1012,"line_end":1012,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833627,"byte_end":8833650,"line_start":1013,"line_end":1013,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833651,"byte_end":8833693,"line_start":1014,"line_end":1014,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833694,"byte_end":8833736,"line_start":1015,"line_end":1015,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_le_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833737,"byte_end":8833785,"line_start":1016,"line_end":1016,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833786,"byte_end":8833793,"line_start":1017,"line_end":1017,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833794,"byte_end":8833805,"line_start":1018,"line_end":1018,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833806,"byte_end":8833823,"line_start":1019,"line_end":1019,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834295,"byte_end":8834313,"line_start":1037,"line_end":1037,"column_start":8,"column_end":26},"name":"cmp_lt_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_lt_i32_m128d_s","value":"pub fn cmp_lt_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8833975,"byte_end":8834004,"line_start":1025,"line_end":1025,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834005,"byte_end":8834008,"line_start":1026,"line_end":1026,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834009,"byte_end":8834026,"line_start":1027,"line_end":1027,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834027,"byte_end":8834034,"line_start":1028,"line_end":1028,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834035,"byte_end":8834058,"line_start":1029,"line_end":1029,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834059,"byte_end":8834101,"line_start":1030,"line_end":1030,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834102,"byte_end":8834144,"line_start":1031,"line_end":1031,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_lt_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834145,"byte_end":8834193,"line_start":1032,"line_end":1032,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834194,"byte_end":8834201,"line_start":1033,"line_end":1033,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834202,"byte_end":8834213,"line_start":1034,"line_end":1034,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834214,"byte_end":8834231,"line_start":1035,"line_end":1035,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834704,"byte_end":8834723,"line_start":1053,"line_end":1053,"column_start":8,"column_end":27},"name":"cmp_neq_i32_m128d_s","qualname":"::x86_x64::sse2::cmp_neq_i32_m128d_s","value":"pub fn cmp_neq_i32_m128d_s(m128d, m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Low lane `f64` less than.","sig":null,"attributes":[{"value":"/ Low lane `f64` less than.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834383,"byte_end":8834412,"line_start":1041,"line_end":1041,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834413,"byte_end":8834416,"line_start":1042,"line_end":1042,"column_start":1,"column_end":4}},{"value":"/ `i32` output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834417,"byte_end":8834434,"line_start":1043,"line_end":1043,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834435,"byte_end":8834442,"line_start":1044,"line_end":1044,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834443,"byte_end":8834466,"line_start":1045,"line_end":1045,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 5.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834467,"byte_end":8834509,"line_start":1046,"line_end":1046,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834510,"byte_end":8834552,"line_start":1047,"line_end":1047,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(1_i32, cmp_neq_i32_m128d_s(a, b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834553,"byte_end":8834602,"line_start":1048,"line_end":1048,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834603,"byte_end":8834610,"line_start":1049,"line_end":1049,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834611,"byte_end":8834622,"line_start":1050,"line_end":1050,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834623,"byte_end":8834640,"line_start":1051,"line_end":1051,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835244,"byte_end":8835282,"line_start":1070,"line_end":1070,"column_start":8,"column_end":46},"name":"convert_to_m128d_from_lower2_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_i32_m128i","value":"pub fn convert_to_m128d_from_lower2_i32_m128i(m128i) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the lower two `i32` lanes to two `f64` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128d_from_lower2_i32_m128i(a);\n let c = m128d::from_array([1.0, 2.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_pd`]\n * **Assembly:** `cvtdq2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the lower two `i32` lanes to two `f64` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834794,"byte_end":8834850,"line_start":1057,"line_end":1057,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834851,"byte_end":8834858,"line_start":1058,"line_end":1058,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834859,"byte_end":8834882,"line_start":1059,"line_end":1059,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834883,"byte_end":8834921,"line_start":1060,"line_end":1060,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128d_from_lower2_i32_m128i(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834922,"byte_end":8834976,"line_start":1061,"line_end":1061,"column_start":1,"column_end":55}},{"value":"/ let c = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8834977,"byte_end":8835019,"line_start":1062,"line_end":1062,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835020,"byte_end":8835061,"line_start":1063,"line_end":1063,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835062,"byte_end":8835069,"line_start":1064,"line_end":1064,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_pd`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835070,"byte_end":8835110,"line_start":1065,"line_end":1065,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2pd xmm, xmm`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835111,"byte_end":8835150,"line_start":1066,"line_end":1066,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835151,"byte_end":8835162,"line_start":1067,"line_end":1067,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835163,"byte_end":8835180,"line_start":1068,"line_end":1068,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":680},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835795,"byte_end":8835825,"line_start":1087,"line_end":1087,"column_start":8,"column_end":38},"name":"convert_to_m128_from_i32_m128i","qualname":"::x86_x64::sse2::convert_to_m128_from_i32_m128i","value":"pub fn convert_to_m128_from_i32_m128i(m128i) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the four `i32` lanes to four `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = convert_to_m128_from_i32_m128i(a);\n let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);\n assert_eq!(b.to_bits(), c.to_bits());\n ```\n * **Intrinsic:** [`_mm_cvtepi32_ps`]\n * **Assembly:** `cvtdq2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the four `i32` lanes to four `f32` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835348,"byte_end":8835400,"line_start":1074,"line_end":1074,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835401,"byte_end":8835408,"line_start":1075,"line_end":1075,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835409,"byte_end":8835432,"line_start":1076,"line_end":1076,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835433,"byte_end":8835471,"line_start":1077,"line_end":1077,"column_start":1,"column_end":39}},{"value":"/ let b = convert_to_m128_from_i32_m128i(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835472,"byte_end":8835518,"line_start":1078,"line_end":1078,"column_start":1,"column_end":47}},{"value":"/ let c = m128::from_array([1.0, 2.0, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835519,"byte_end":8835570,"line_start":1079,"line_end":1079,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(b.to_bits(), c.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835571,"byte_end":8835612,"line_start":1080,"line_end":1080,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835613,"byte_end":8835620,"line_start":1081,"line_end":1081,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtepi32_ps`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835621,"byte_end":8835661,"line_start":1082,"line_end":1082,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtdq2ps xmm, xmm`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835662,"byte_end":8835701,"line_start":1083,"line_end":1083,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835702,"byte_end":8835713,"line_start":1084,"line_end":1084,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835714,"byte_end":8835731,"line_start":1085,"line_end":1085,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836318,"byte_end":8836349,"line_start":1104,"line_end":1104,"column_start":8,"column_end":39},"name":"convert_to_i32_m128i_from_m128d","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128d","value":"pub fn convert_to_i32_m128i_from_m128d(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_i32_m128i_from_m128d(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_epi32`]\n * **Assembly:** `cvtpd2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `i32` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835889,"byte_end":8835947,"line_start":1091,"line_end":1091,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835948,"byte_end":8835955,"line_start":1092,"line_end":1092,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835956,"byte_end":8835979,"line_start":1093,"line_end":1093,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8835980,"byte_end":8836022,"line_start":1094,"line_end":1094,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_i32_m128i_from_m128d(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836023,"byte_end":8836070,"line_start":1095,"line_end":1095,"column_start":1,"column_end":48}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836071,"byte_end":8836102,"line_start":1096,"line_end":1096,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836103,"byte_end":8836135,"line_start":1097,"line_end":1097,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836136,"byte_end":8836143,"line_start":1098,"line_end":1098,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_epi32`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836144,"byte_end":8836184,"line_start":1099,"line_end":1099,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtpd2dq xmm, xmm`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836185,"byte_end":8836224,"line_start":1100,"line_end":1100,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836225,"byte_end":8836236,"line_start":1101,"line_end":1101,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836237,"byte_end":8836254,"line_start":1102,"line_end":1102,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836844,"byte_end":8836870,"line_start":1120,"line_end":1120,"column_start":8,"column_end":34},"name":"convert_to_m128_from_m128d","qualname":"::x86_x64::sse2::convert_to_m128_from_m128d","value":"pub fn convert_to_m128_from_m128d(m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = convert_to_m128_from_m128d(a);\n assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);\n ```\n * **Intrinsic:** [`_mm_cvtpd_ps`]\n * **Assembly:** `cvtpd2ps xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836415,"byte_end":8836473,"line_start":1108,"line_end":1108,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836474,"byte_end":8836481,"line_start":1109,"line_end":1109,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836482,"byte_end":8836505,"line_start":1110,"line_end":1110,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836506,"byte_end":8836548,"line_start":1111,"line_end":1111,"column_start":1,"column_end":43}},{"value":"/ let b = convert_to_m128_from_m128d(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836549,"byte_end":8836591,"line_start":1112,"line_end":1112,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(b.to_bits(), [1_f32.to_bits(), 2.5_f32.to_bits(), 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836592,"byte_end":8836664,"line_start":1113,"line_end":1113,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836665,"byte_end":8836672,"line_start":1114,"line_end":1114,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtpd_ps`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836673,"byte_end":8836710,"line_start":1115,"line_end":1115,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtpd2ps xmm, xmm`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836711,"byte_end":8836750,"line_start":1116,"line_end":1116,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836751,"byte_end":8836762,"line_start":1117,"line_end":1117,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836763,"byte_end":8836780,"line_start":1118,"line_end":1118,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837352,"byte_end":8837382,"line_start":1137,"line_end":1137,"column_start":8,"column_end":38},"name":"convert_to_i32_m128i_from_m128","qualname":"::x86_x64::sse2::convert_to_i32_m128i_from_m128","value":"pub fn convert_to_i32_m128i_from_m128(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Rounds the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);\n let b = convert_to_i32_m128i_from_m128(a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n * **Intrinsic:** [`_mm_cvtps_epi32`]\n * **Assembly:** `cvtps2dq xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836931,"byte_end":8836973,"line_start":1124,"line_end":1124,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836974,"byte_end":8836981,"line_start":1125,"line_end":1125,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8836982,"byte_end":8837005,"line_start":1126,"line_end":1126,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837006,"byte_end":8837057,"line_start":1127,"line_end":1127,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_i32_m128i_from_m128(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837058,"byte_end":8837104,"line_start":1128,"line_end":1128,"column_start":1,"column_end":47}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837105,"byte_end":8837136,"line_start":1129,"line_end":1129,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837137,"byte_end":8837169,"line_start":1130,"line_end":1130,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837170,"byte_end":8837177,"line_start":1131,"line_end":1131,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_epi32`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837178,"byte_end":8837218,"line_start":1132,"line_end":1132,"column_start":1,"column_end":41}},{"value":"/ * **Assembly:** `cvtps2dq xmm, xmm`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837219,"byte_end":8837258,"line_start":1133,"line_end":1133,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837259,"byte_end":8837270,"line_start":1134,"line_end":1134,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837271,"byte_end":8837288,"line_start":1135,"line_end":1135,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837886,"byte_end":8837919,"line_start":1153,"line_end":1153,"column_start":8,"column_end":41},"name":"convert_to_m128d_from_lower2_m128","qualname":"::x86_x64::sse2::convert_to_m128d_from_lower2_m128","value":"pub fn convert_to_m128d_from_lower2_m128(m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Rounds the two `f64` lanes to the low two `f32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);\n let b = convert_to_m128d_from_lower2_m128(a);\n assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);\n ```\n * **Intrinsic:** [`_mm_cvtps_pd`]\n * **Assembly:** `cvtps2pd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Rounds the two `f64` lanes to the low two `f32` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837447,"byte_end":8837505,"line_start":1141,"line_end":1141,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837506,"byte_end":8837513,"line_start":1142,"line_end":1142,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837514,"byte_end":8837537,"line_start":1143,"line_end":1143,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.0, 2.5, 3.6, 4.7]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837538,"byte_end":8837589,"line_start":1144,"line_end":1144,"column_start":1,"column_end":52}},{"value":"/ let b = convert_to_m128d_from_lower2_m128(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837590,"byte_end":8837639,"line_start":1145,"line_end":1145,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(b.to_bits(), [1_f64.to_bits(), 2.5_f64.to_bits()]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837640,"byte_end":8837706,"line_start":1146,"line_end":1146,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837707,"byte_end":8837714,"line_start":1147,"line_end":1147,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtps_pd`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837715,"byte_end":8837752,"line_start":1148,"line_end":1148,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtps2pd xmm, xmm`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837753,"byte_end":8837792,"line_start":1149,"line_end":1149,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837793,"byte_end":8837804,"line_start":1150,"line_end":1150,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837805,"byte_end":8837822,"line_start":1151,"line_end":1151,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838265,"byte_end":8838285,"line_start":1167,"line_end":1167,"column_start":8,"column_end":28},"name":"get_f64_from_m128d_s","qualname":"::x86_x64::sse2::get_f64_from_m128d_s","value":"pub fn get_f64_from_m128d_s(m128d) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the lower lane as an `f64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_f64_from_m128d_s(a);\n assert_eq!(b, 1.0_f64);\n ```\n","sig":null,"attributes":[{"value":"/ Gets the lower lane as an `f64` value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8837981,"byte_end":8838023,"line_start":1157,"line_end":1157,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838024,"byte_end":8838031,"line_start":1158,"line_end":1158,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838032,"byte_end":8838055,"line_start":1159,"line_end":1159,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838056,"byte_end":8838098,"line_start":1160,"line_end":1160,"column_start":1,"column_end":43}},{"value":"/ let b = get_f64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838099,"byte_end":8838135,"line_start":1161,"line_end":1161,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1.0_f64);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838136,"byte_end":8838163,"line_start":1162,"line_end":1162,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838164,"byte_end":8838171,"line_start":1163,"line_end":1163,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838172,"byte_end":8838183,"line_start":1164,"line_end":1164,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838184,"byte_end":8838201,"line_start":1165,"line_end":1165,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838626,"byte_end":8838646,"line_start":1181,"line_end":1181,"column_start":8,"column_end":28},"name":"get_i32_from_m128d_s","qualname":"::x86_x64::sse2::get_i32_from_m128d_s","value":"pub fn get_i32_from_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i32_from_m128d_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838340,"byte_end":8838386,"line_start":1171,"line_end":1171,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838387,"byte_end":8838394,"line_start":1172,"line_end":1172,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838395,"byte_end":8838418,"line_start":1173,"line_end":1173,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838419,"byte_end":8838461,"line_start":1174,"line_end":1174,"column_start":1,"column_end":43}},{"value":"/ let b = get_i32_from_m128d_s(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838462,"byte_end":8838498,"line_start":1175,"line_end":1175,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838499,"byte_end":8838524,"line_start":1176,"line_end":1176,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838525,"byte_end":8838532,"line_start":1177,"line_end":1177,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838533,"byte_end":8838544,"line_start":1178,"line_end":1178,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838545,"byte_end":8838562,"line_start":1179,"line_end":1179,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839019,"byte_end":8839039,"line_start":1196,"line_end":1196,"column_start":8,"column_end":28},"name":"get_i64_from_m128d_s","qualname":"::x86_x64::sse2::get_i64_from_m128d_s","value":"pub fn get_i64_from_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = get_i64_from_m128d_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838702,"byte_end":8838748,"line_start":1185,"line_end":1185,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838749,"byte_end":8838756,"line_start":1186,"line_end":1186,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838757,"byte_end":8838780,"line_start":1187,"line_end":1187,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838781,"byte_end":8838823,"line_start":1188,"line_end":1188,"column_start":1,"column_end":43}},{"value":"/ let b = get_i64_from_m128d_s(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838824,"byte_end":8838860,"line_start":1189,"line_end":1189,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838861,"byte_end":8838886,"line_start":1190,"line_end":1190,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838887,"byte_end":8838894,"line_start":1191,"line_end":1191,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838895,"byte_end":8838906,"line_start":1192,"line_end":1192,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838907,"byte_end":8838924,"line_start":1193,"line_end":1193,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8838925,"byte_end":8838955,"line_start":1194,"line_end":1194,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":688},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839610,"byte_end":8839640,"line_start":1214,"line_end":1214,"column_start":8,"column_end":38},"name":"convert_m128d_s_replace_m128_s","qualname":"::x86_x64::sse2::convert_m128d_s_replace_m128_s","value":"pub fn convert_m128d_s_replace_m128_s(m128, m128d) -> m128","parent":null,"children":[],"decl_id":null,"docs":" Converts the low `f64` to `f32` and replaces the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let b = m128d::from_array([1.0, 2.5]);\n let c = convert_m128d_s_replace_m128_s(a, b);\n assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsd_ss`]\n * **Assembly:** `cvtsd2ss xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the low `f64` to `f32` and replaces the low lane of the input.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839095,"byte_end":8839170,"line_start":1200,"line_end":1200,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839171,"byte_end":8839178,"line_start":1201,"line_end":1201,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839179,"byte_end":8839202,"line_start":1202,"line_end":1202,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839203,"byte_end":8839254,"line_start":1203,"line_end":1203,"column_start":1,"column_end":52}},{"value":"/ let b = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839255,"byte_end":8839297,"line_start":1204,"line_end":1204,"column_start":1,"column_end":43}},{"value":"/ let c = convert_m128d_s_replace_m128_s(a, b);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839298,"byte_end":8839347,"line_start":1205,"line_end":1205,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [1.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839348,"byte_end":8839399,"line_start":1206,"line_end":1206,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839400,"byte_end":8839407,"line_start":1207,"line_end":1207,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsd_ss`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839408,"byte_end":8839445,"line_start":1208,"line_end":1208,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtsd2ss xmm, xmm`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839446,"byte_end":8839485,"line_start":1209,"line_end":1209,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839486,"byte_end":8839497,"line_start":1210,"line_end":1210,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839498,"byte_end":8839515,"line_start":1211,"line_end":1211,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839516,"byte_end":8839546,"line_start":1212,"line_end":1212,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839997,"byte_end":8840017,"line_start":1228,"line_end":1228,"column_start":8,"column_end":28},"name":"get_i32_from_m128i_s","qualname":"::x86_x64::sse2::get_i32_from_m128i_s","value":"pub fn get_i32_from_m128i_s(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i32` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 3, 5, 7]);\n let b = get_i32_from_m128i_s(a);\n assert_eq!(b, 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i32` value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839715,"byte_end":8839761,"line_start":1218,"line_end":1218,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839762,"byte_end":8839769,"line_start":1219,"line_end":1219,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839770,"byte_end":8839793,"line_start":1220,"line_end":1220,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 3, 5, 7]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839794,"byte_end":8839832,"line_start":1221,"line_end":1221,"column_start":1,"column_end":39}},{"value":"/ let b = get_i32_from_m128i_s(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839833,"byte_end":8839869,"line_start":1222,"line_end":1222,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i32);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839870,"byte_end":8839895,"line_start":1223,"line_end":1223,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839896,"byte_end":8839903,"line_start":1224,"line_end":1224,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839904,"byte_end":8839915,"line_start":1225,"line_end":1225,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8839916,"byte_end":8839933,"line_start":1226,"line_end":1226,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840387,"byte_end":8840407,"line_start":1243,"line_end":1243,"column_start":8,"column_end":28},"name":"get_i64_from_m128i_s","qualname":"::x86_x64::sse2::get_i64_from_m128i_s","value":"pub fn get_i64_from_m128i_s(m128i) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower lane to an `i64` value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 3]);\n let b = get_i64_from_m128i_s(a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Converts the lower lane to an `i64` value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840076,"byte_end":8840122,"line_start":1232,"line_end":1232,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840123,"byte_end":8840130,"line_start":1233,"line_end":1233,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840131,"byte_end":8840154,"line_start":1234,"line_end":1234,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840155,"byte_end":8840191,"line_start":1235,"line_end":1235,"column_start":1,"column_end":37}},{"value":"/ let b = get_i64_from_m128i_s(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840192,"byte_end":8840228,"line_start":1236,"line_end":1236,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840229,"byte_end":8840254,"line_start":1237,"line_end":1237,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840255,"byte_end":8840262,"line_start":1238,"line_end":1238,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840263,"byte_end":8840274,"line_start":1239,"line_end":1239,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840275,"byte_end":8840292,"line_start":1240,"line_end":1240,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840293,"byte_end":8840323,"line_start":1241,"line_end":1241,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840881,"byte_end":8840908,"line_start":1259,"line_end":1259,"column_start":8,"column_end":35},"name":"convert_i32_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i32_replace_m128d_s","value":"pub fn convert_i32_replace_m128d_s(m128d, i32) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i32` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i32_replace_m128d_s(a, 5_i32);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi32_sd`]\n * **Assembly:** `cvtsi2sd xmm, r32`\n","sig":null,"attributes":[{"value":"/ Convert `i32` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840466,"byte_end":8840531,"line_start":1247,"line_end":1247,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840532,"byte_end":8840539,"line_start":1248,"line_end":1248,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840540,"byte_end":8840563,"line_start":1249,"line_end":1249,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840564,"byte_end":8840606,"line_start":1250,"line_end":1250,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i32_replace_m128d_s(a, 5_i32);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840607,"byte_end":8840657,"line_start":1251,"line_end":1251,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840658,"byte_end":8840699,"line_start":1252,"line_end":1252,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840700,"byte_end":8840707,"line_start":1253,"line_end":1253,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi32_sd`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840708,"byte_end":8840747,"line_start":1254,"line_end":1254,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r32`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840748,"byte_end":8840787,"line_start":1255,"line_end":1255,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840788,"byte_end":8840799,"line_start":1256,"line_end":1256,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840800,"byte_end":8840817,"line_start":1257,"line_end":1257,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841322,"byte_end":8841337,"line_start":1273,"line_end":1273,"column_start":8,"column_end":23},"name":"set_i32_m128i_s","qualname":"::x86_x64::sse2::set_i32_m128i_s","value":"pub fn set_i32_m128i_s(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i32; 4] = set_i32_m128i_s(1_i32).into();\n let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i32` as the low 32-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8840984,"byte_end":8841057,"line_start":1263,"line_end":1263,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841058,"byte_end":8841065,"line_start":1264,"line_end":1264,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841066,"byte_end":8841089,"line_start":1265,"line_end":1265,"column_start":1,"column_end":24}},{"value":"/ let a: [i32; 4] = set_i32_m128i_s(1_i32).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841090,"byte_end":8841142,"line_start":1266,"line_end":1266,"column_start":1,"column_end":53}},{"value":"/ let b: [i32; 4] = m128i::from([1, 0, 0, 0]).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841143,"byte_end":8841198,"line_start":1267,"line_end":1267,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841199,"byte_end":8841220,"line_start":1268,"line_end":1268,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841221,"byte_end":8841228,"line_start":1269,"line_end":1269,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841229,"byte_end":8841240,"line_start":1270,"line_end":1270,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841241,"byte_end":8841258,"line_start":1271,"line_end":1271,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841847,"byte_end":8841874,"line_start":1290,"line_end":1290,"column_start":8,"column_end":35},"name":"convert_i64_replace_m128d_s","qualname":"::x86_x64::sse2::convert_i64_replace_m128d_s","value":"pub fn convert_i64_replace_m128d_s(m128d, i64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Convert `i64` to `f64` and replace the low lane of the input.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = convert_i64_replace_m128d_s(a, 5_i64);\n assert_eq!(b.to_array(), [5.0, 2.0]);\n ```\n * **Intrinsic:** [`_mm_cvtsi64_sd`]\n * **Assembly:** `cvtsi2sd xmm, r64`\n","sig":null,"attributes":[{"value":"/ Convert `i64` to `f64` and replace the low lane of the input.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841401,"byte_end":8841466,"line_start":1277,"line_end":1277,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841467,"byte_end":8841474,"line_start":1278,"line_end":1278,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841475,"byte_end":8841498,"line_start":1279,"line_end":1279,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841499,"byte_end":8841541,"line_start":1280,"line_end":1280,"column_start":1,"column_end":43}},{"value":"/ let b = convert_i64_replace_m128d_s(a, 5_i64);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841542,"byte_end":8841592,"line_start":1281,"line_end":1281,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(b.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841593,"byte_end":8841634,"line_start":1282,"line_end":1282,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841635,"byte_end":8841642,"line_start":1283,"line_end":1283,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtsi64_sd`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841643,"byte_end":8841682,"line_start":1284,"line_end":1284,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `cvtsi2sd xmm, r64`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841683,"byte_end":8841722,"line_start":1285,"line_end":1285,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841723,"byte_end":8841734,"line_start":1286,"line_end":1286,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841735,"byte_end":8841752,"line_start":1287,"line_end":1287,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841753,"byte_end":8841783,"line_start":1288,"line_end":1288,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842317,"byte_end":8842332,"line_start":1305,"line_end":1305,"column_start":8,"column_end":23},"name":"set_i64_m128i_s","qualname":"::x86_x64::sse2::set_i64_m128i_s","value":"pub fn set_i64_m128i_s(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.\n ```\n # use safe_arch::*;\n let a: [i64; 2] = set_i64_m128i_s(1_i64).into();\n let b: [i64; 2] = m128i::from([1_i64, 0]).into();\n assert_eq!(a, b);\n ```\n","sig":null,"attributes":[{"value":"/ Set an `i64` as the low 64-bit lane of an `m128i`, other lanes blank.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8841950,"byte_end":8842023,"line_start":1294,"line_end":1294,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842024,"byte_end":8842031,"line_start":1295,"line_end":1295,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842032,"byte_end":8842055,"line_start":1296,"line_end":1296,"column_start":1,"column_end":24}},{"value":"/ let a: [i64; 2] = set_i64_m128i_s(1_i64).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842056,"byte_end":8842108,"line_start":1297,"line_end":1297,"column_start":1,"column_end":53}},{"value":"/ let b: [i64; 2] = m128i::from([1_i64, 0]).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842109,"byte_end":8842162,"line_start":1298,"line_end":1298,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(a, b);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842163,"byte_end":8842184,"line_start":1299,"line_end":1299,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842185,"byte_end":8842192,"line_start":1300,"line_end":1300,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842193,"byte_end":8842204,"line_start":1301,"line_end":1301,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842205,"byte_end":8842222,"line_start":1302,"line_end":1302,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842223,"byte_end":8842253,"line_start":1303,"line_end":1303,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842870,"byte_end":8842900,"line_start":1322,"line_end":1322,"column_start":8,"column_end":38},"name":"convert_m128_s_replace_m128d_s","qualname":"::x86_x64::sse2::convert_m128_s_replace_m128d_s","value":"pub fn convert_m128_s_replace_m128d_s(m128d, m128) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Converts the lower `f32` to `f64` and replace the low lane of the input\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.5]);\n let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);\n let c = convert_m128_s_replace_m128d_s(a, b);\n assert_eq!(c.to_array(), [3.0, 2.5]);\n ```\n * **Intrinsic:** [`_mm_cvtss_sd`]\n * **Assembly:** `cvtss2sd xmm, xmm`\n","sig":null,"attributes":[{"value":"/ Converts the lower `f32` to `f64` and replace the low lane of the input","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842396,"byte_end":8842471,"line_start":1309,"line_end":1309,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842472,"byte_end":8842479,"line_start":1310,"line_end":1310,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842480,"byte_end":8842503,"line_start":1311,"line_end":1311,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842504,"byte_end":8842546,"line_start":1312,"line_end":1312,"column_start":1,"column_end":43}},{"value":"/ let b = m128::from_array([3.0, 4.0, 5.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842547,"byte_end":8842598,"line_start":1313,"line_end":1313,"column_start":1,"column_end":52}},{"value":"/ let c = convert_m128_s_replace_m128d_s(a, b);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842599,"byte_end":8842648,"line_start":1314,"line_end":1314,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842649,"byte_end":8842690,"line_start":1315,"line_end":1315,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842691,"byte_end":8842698,"line_start":1316,"line_end":1316,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_cvtss_sd`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842699,"byte_end":8842736,"line_start":1317,"line_end":1317,"column_start":1,"column_end":38}},{"value":"/ * **Assembly:** `cvtss2sd xmm, xmm`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842737,"byte_end":8842776,"line_start":1318,"line_end":1318,"column_start":1,"column_end":40}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842777,"byte_end":8842788,"line_start":1319,"line_end":1319,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842789,"byte_end":8842806,"line_start":1320,"line_end":1320,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843321,"byte_end":8843344,"line_start":1336,"line_end":1336,"column_start":8,"column_end":31},"name":"truncate_m128d_to_m128i","qualname":"::x86_x64::sse2::truncate_m128d_to_m128i","value":"pub fn truncate_m128d_to_m128i(m128d) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.1, 2.6]);\n let b = truncate_m128d_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f64` lanes to the lower `i32` lanes (upper `i32` lanes 0).","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8842977,"byte_end":8843053,"line_start":1326,"line_end":1326,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843054,"byte_end":8843061,"line_start":1327,"line_end":1327,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843062,"byte_end":8843085,"line_start":1328,"line_end":1328,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.1, 2.6]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843086,"byte_end":8843128,"line_start":1329,"line_end":1329,"column_start":1,"column_end":43}},{"value":"/ let b = truncate_m128d_to_m128i(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843129,"byte_end":8843168,"line_start":1330,"line_end":1330,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843169,"byte_end":8843219,"line_start":1331,"line_end":1331,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843220,"byte_end":8843227,"line_start":1332,"line_end":1332,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843228,"byte_end":8843239,"line_start":1333,"line_end":1333,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843240,"byte_end":8843257,"line_start":1334,"line_end":1334,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843731,"byte_end":8843753,"line_start":1350,"line_end":1350,"column_start":8,"column_end":30},"name":"truncate_m128_to_m128i","qualname":"::x86_x64::sse2::truncate_m128_to_m128i","value":"pub fn truncate_m128_to_m128i(m128) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `f32` lanes to `i32` lanes.\n ```\n # use safe_arch::*;\n let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);\n let b = truncate_m128_to_m128i(a);\n assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the `f32` lanes to `i32` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843411,"byte_end":8843455,"line_start":1340,"line_end":1340,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843456,"byte_end":8843463,"line_start":1341,"line_end":1341,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843464,"byte_end":8843487,"line_start":1342,"line_end":1342,"column_start":1,"column_end":24}},{"value":"/ let a = m128::from_array([1.1, 2.6, 3.5, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843488,"byte_end":8843539,"line_start":1343,"line_end":1343,"column_start":1,"column_end":52}},{"value":"/ let b = truncate_m128_to_m128i(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843540,"byte_end":8843578,"line_start":1344,"line_end":1344,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(b), [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843579,"byte_end":8843629,"line_start":1345,"line_end":1345,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843630,"byte_end":8843637,"line_start":1346,"line_end":1346,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843638,"byte_end":8843649,"line_start":1347,"line_end":1347,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843650,"byte_end":8843667,"line_start":1348,"line_end":1348,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844089,"byte_end":8844112,"line_start":1363,"line_end":1363,"column_start":8,"column_end":31},"name":"truncate_to_i32_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i32_m128d_s","value":"pub fn truncate_to_i32_m128d_s(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i32`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i32`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843819,"byte_end":8843861,"line_start":1354,"line_end":1354,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843862,"byte_end":8843869,"line_start":1355,"line_end":1355,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843870,"byte_end":8843893,"line_start":1356,"line_end":1356,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843894,"byte_end":8843936,"line_start":1357,"line_end":1357,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i32_m128d_s(a), 1_i32);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843937,"byte_end":8843987,"line_start":1358,"line_end":1358,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843988,"byte_end":8843995,"line_start":1359,"line_end":1359,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8843996,"byte_end":8844007,"line_start":1360,"line_end":1360,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844008,"byte_end":8844025,"line_start":1361,"line_end":1361,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":699},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844470,"byte_end":8844493,"line_start":1377,"line_end":1377,"column_start":8,"column_end":31},"name":"truncate_to_i64_m128d_s","qualname":"::x86_x64::sse2::truncate_to_i64_m128d_s","value":"pub fn truncate_to_i64_m128d_s(m128d) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Truncate the lower lane into an `i64`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.7, 2.6]);\n assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Truncate the lower lane into an `i64`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844169,"byte_end":8844211,"line_start":1367,"line_end":1367,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844212,"byte_end":8844219,"line_start":1368,"line_end":1368,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844220,"byte_end":8844243,"line_start":1369,"line_end":1369,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.7, 2.6]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844244,"byte_end":8844286,"line_start":1370,"line_end":1370,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(truncate_to_i64_m128d_s(a), 1_i64);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844287,"byte_end":8844337,"line_start":1371,"line_end":1371,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844338,"byte_end":8844345,"line_start":1372,"line_end":1372,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844346,"byte_end":8844357,"line_start":1373,"line_end":1373,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844358,"byte_end":8844375,"line_start":1374,"line_end":1374,"column_start":1,"column_end":18}},{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844376,"byte_end":8844406,"line_start":1375,"line_end":1375,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":700},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844869,"byte_end":8844878,"line_start":1392,"line_end":1392,"column_start":8,"column_end":17},"name":"div_m128d","qualname":"::x86_x64::sse2::div_m128d","value":"pub fn div_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a / b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 42.0]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = div_m128d(a, b).to_array();\n assert_eq!(c, [0.92, -7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a / b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844550,"byte_end":8844571,"line_start":1381,"line_end":1381,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844572,"byte_end":8844579,"line_start":1382,"line_end":1382,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844580,"byte_end":8844603,"line_start":1383,"line_end":1383,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 42.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844604,"byte_end":8844648,"line_start":1384,"line_end":1384,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844649,"byte_end":8844694,"line_start":1385,"line_end":1385,"column_start":1,"column_end":46}},{"value":"/ let c = div_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844695,"byte_end":8844734,"line_start":1386,"line_end":1386,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [0.92, -7.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844735,"byte_end":8844767,"line_start":1387,"line_end":1387,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844768,"byte_end":8844775,"line_start":1388,"line_end":1388,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844776,"byte_end":8844787,"line_start":1389,"line_end":1389,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844788,"byte_end":8844805,"line_start":1390,"line_end":1390,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845301,"byte_end":8845312,"line_start":1407,"line_end":1407,"column_start":8,"column_end":19},"name":"div_m128d_s","qualname":"::x86_x64::sse2::div_m128d_s","value":"pub fn div_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a / b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = div_m128d_s(a, b).to_array();\n assert_eq!(c, [0.92, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a / b`, high lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8844954,"byte_end":8844999,"line_start":1396,"line_end":1396,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845000,"byte_end":8845007,"line_start":1397,"line_end":1397,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845008,"byte_end":8845031,"line_start":1398,"line_end":1398,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845032,"byte_end":8845076,"line_start":1399,"line_end":1399,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845077,"byte_end":8845124,"line_start":1400,"line_end":1400,"column_start":1,"column_end":48}},{"value":"/ let c = div_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845125,"byte_end":8845166,"line_start":1401,"line_end":1401,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.92, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845167,"byte_end":8845199,"line_start":1402,"line_end":1402,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845200,"byte_end":8845207,"line_start":1403,"line_end":1403,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845208,"byte_end":8845219,"line_start":1404,"line_end":1404,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845220,"byte_end":8845237,"line_start":1405,"line_end":1405,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845820,"byte_end":8845844,"line_start":1425,"line_end":1425,"column_start":8,"column_end":32},"name":"extract_i16_as_i32_m128i","qualname":"::x86_x64::sse2::extract_i16_as_i32_m128i","value":"pub fn extract_i16_as_i32_m128i<const LANE: i32>(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gets an `i16` value out of an `m128i`, returns as `i32`.","sig":null,"attributes":[{"value":"/ Gets an `i16` value out of an `m128i`, returns as `i32`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845388,"byte_end":8845448,"line_start":1411,"line_end":1411,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845449,"byte_end":8845452,"line_start":1412,"line_end":1412,"column_start":1,"column_end":4}},{"value":"/ The lane to get must be a constant in `0..8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845453,"byte_end":8845502,"line_start":1413,"line_end":1413,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845503,"byte_end":8845506,"line_start":1414,"line_end":1414,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845507,"byte_end":8845514,"line_start":1415,"line_end":1415,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845515,"byte_end":8845538,"line_start":1416,"line_end":1416,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0xA_i16, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845539,"byte_end":8845601,"line_start":1417,"line_end":1417,"column_start":1,"column_end":63}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845602,"byte_end":8845608,"line_start":1418,"line_end":1418,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(extract_i16_as_i32_m128i::<0>(a), 0xA);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845609,"byte_end":8845663,"line_start":1419,"line_end":1419,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(extract_i16_as_i32_m128i::<1>(a), 0xB);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845664,"byte_end":8845718,"line_start":1420,"line_end":1420,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845719,"byte_end":8845726,"line_start":1421,"line_end":1421,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845727,"byte_end":8845738,"line_start":1422,"line_end":1422,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845739,"byte_end":8845756,"line_start":1423,"line_end":1423,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846371,"byte_end":8846396,"line_start":1443,"line_end":1443,"column_start":8,"column_end":33},"name":"insert_i16_from_i32_m128i","qualname":"::x86_x64::sse2::insert_i16_from_i32_m128i","value":"pub fn insert_i16_from_i32_m128i<const LANE: i32>(m128i, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Inserts the low 16 bits of an `i32` value into an `m128i`.","sig":null,"attributes":[{"value":"/ Inserts the low 16 bits of an `i32` value into an `m128i`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845926,"byte_end":8845988,"line_start":1429,"line_end":1429,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845989,"byte_end":8845992,"line_start":1430,"line_end":1430,"column_start":1,"column_end":4}},{"value":"/ The lane to get must be a constant in `0..8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8845993,"byte_end":8846042,"line_start":1431,"line_end":1431,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846043,"byte_end":8846046,"line_start":1432,"line_end":1432,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846047,"byte_end":8846054,"line_start":1433,"line_end":1433,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846055,"byte_end":8846078,"line_start":1434,"line_end":1434,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0xA_i16, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846079,"byte_end":8846141,"line_start":1435,"line_end":1435,"column_start":1,"column_end":63}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846142,"byte_end":8846148,"line_start":1436,"line_end":1436,"column_start":1,"column_end":7}},{"value":"/ let b = insert_i16_from_i32_m128i::<0>(a, -1);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846149,"byte_end":8846199,"line_start":1437,"line_end":1437,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(<[i16; 8]>::from(b), [-1, 0xB, 0xC, 0xD, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846200,"byte_end":8846269,"line_start":1438,"line_end":1438,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846270,"byte_end":8846277,"line_start":1439,"line_end":1439,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846278,"byte_end":8846289,"line_start":1440,"line_end":1440,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846290,"byte_end":8846307,"line_start":1441,"line_end":1441,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846786,"byte_end":8846796,"line_start":1457,"line_end":1457,"column_start":8,"column_end":18},"name":"load_m128d","qualname":"::x86_x64::sse2::load_m128d","value":"pub fn load_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_m128d(&a);\n assert_eq!(a.to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846497,"byte_end":8846537,"line_start":1447,"line_end":1447,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846538,"byte_end":8846545,"line_start":1448,"line_end":1448,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846546,"byte_end":8846569,"line_start":1449,"line_end":1449,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846570,"byte_end":8846614,"line_start":1450,"line_end":1450,"column_start":1,"column_end":45}},{"value":"/ let b = load_m128d(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846615,"byte_end":8846642,"line_start":1451,"line_end":1451,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846643,"byte_end":8846684,"line_start":1452,"line_end":1452,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846685,"byte_end":8846692,"line_start":1453,"line_end":1453,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846693,"byte_end":8846704,"line_start":1454,"line_end":1454,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846705,"byte_end":8846722,"line_start":1455,"line_end":1455,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847250,"byte_end":8847270,"line_start":1472,"line_end":1472,"column_start":8,"column_end":28},"name":"load_f64_splat_m128d","qualname":"::x86_x64::sse2::load_f64_splat_m128d","value":"pub fn load_f64_splat_m128d(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the `f64` reference into all lanes of a register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_splat_m128d(&a);\n assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the `f64` reference into all lanes of a register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846887,"byte_end":8846946,"line_start":1461,"line_end":1461,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846947,"byte_end":8846954,"line_start":1462,"line_end":1462,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846955,"byte_end":8846978,"line_start":1463,"line_end":1463,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846979,"byte_end":8846995,"line_start":1464,"line_end":1464,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_splat_m128d(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8846996,"byte_end":8847033,"line_start":1465,"line_end":1465,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array([1.0, 1.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847034,"byte_end":8847103,"line_start":1466,"line_end":1466,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847104,"byte_end":8847111,"line_start":1467,"line_end":1467,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847112,"byte_end":8847123,"line_start":1468,"line_end":1468,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847124,"byte_end":8847141,"line_start":1469,"line_end":1469,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847142,"byte_end":8847186,"line_start":1470,"line_end":1470,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847688,"byte_end":8847704,"line_start":1487,"line_end":1487,"column_start":8,"column_end":24},"name":"load_f64_m128d_s","qualname":"::x86_x64::sse2::load_f64_m128d_s","value":"pub fn load_f64_m128d_s(&f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into the low lane of the register.\n ```\n # use safe_arch::*;\n let a = 1.0;\n let b = load_f64_m128d_s(&a);\n assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into the low lane of the register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847330,"byte_end":8847388,"line_start":1476,"line_end":1476,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847389,"byte_end":8847396,"line_start":1477,"line_end":1477,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847397,"byte_end":8847420,"line_start":1478,"line_end":1478,"column_start":1,"column_end":24}},{"value":"/ let a = 1.0;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847421,"byte_end":8847437,"line_start":1479,"line_end":1479,"column_start":1,"column_end":17}},{"value":"/ let b = load_f64_m128d_s(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847438,"byte_end":8847471,"line_start":1480,"line_end":1480,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(m128d::from_array([1.0, 0.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847472,"byte_end":8847541,"line_start":1481,"line_end":1481,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847542,"byte_end":8847549,"line_start":1482,"line_end":1482,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847550,"byte_end":8847561,"line_start":1483,"line_end":1483,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847562,"byte_end":8847579,"line_start":1484,"line_end":1484,"column_start":1,"column_end":18}},{"value":"allow(clippy :: trivially_copy_pass_by_ref)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847580,"byte_end":8847624,"line_start":1485,"line_end":1485,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":709},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848062,"byte_end":8848072,"line_start":1501,"line_end":1501,"column_start":8,"column_end":18},"name":"load_m128i","qualname":"::x86_x64::sse2::load_m128i","value":"pub fn load_m128i(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = load_m128i(&a);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847763,"byte_end":8847803,"line_start":1491,"line_end":1491,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847804,"byte_end":8847811,"line_start":1492,"line_end":1492,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847812,"byte_end":8847835,"line_start":1493,"line_end":1493,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847836,"byte_end":8847874,"line_start":1494,"line_end":1494,"column_start":1,"column_end":39}},{"value":"/ let b = load_m128i(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847875,"byte_end":8847902,"line_start":1495,"line_end":1495,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847903,"byte_end":8847960,"line_start":1496,"line_end":1496,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847961,"byte_end":8847968,"line_start":1497,"line_end":1497,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847969,"byte_end":8847980,"line_start":1498,"line_end":1498,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8847981,"byte_end":8847998,"line_start":1499,"line_end":1499,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848519,"byte_end":8848542,"line_start":1516,"line_end":1516,"column_start":8,"column_end":31},"name":"load_replace_high_m128d","qualname":"::x86_x64::sse2::load_replace_high_m128d","value":"pub fn load_replace_high_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_high_m128d(a, &double);\n assert_eq!(b.to_array(), [1.0, 7.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the high lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848170,"byte_end":8848235,"line_start":1505,"line_end":1505,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848236,"byte_end":8848243,"line_start":1506,"line_end":1506,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848244,"byte_end":8848267,"line_start":1507,"line_end":1507,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848268,"byte_end":8848304,"line_start":1508,"line_end":1508,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848305,"byte_end":8848326,"line_start":1509,"line_end":1509,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_high_m128d(a, &double);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848327,"byte_end":8848375,"line_start":1510,"line_end":1510,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(b.to_array(), [1.0, 7.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848376,"byte_end":8848417,"line_start":1511,"line_end":1511,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848418,"byte_end":8848425,"line_start":1512,"line_end":1512,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848426,"byte_end":8848437,"line_start":1513,"line_end":1513,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848438,"byte_end":8848455,"line_start":1514,"line_end":1514,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848911,"byte_end":8848927,"line_start":1530,"line_end":1530,"column_start":8,"column_end":24},"name":"load_i64_m128i_s","qualname":"::x86_x64::sse2::load_i64_m128i_s","value":"pub fn load_i64_m128i_s(&m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the low `i64` into a register.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = load_i64_m128i_s(&a);\n assert_eq!([1_i64, 0], <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Loads the low `i64` into a register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848617,"byte_end":8848657,"line_start":1520,"line_end":1520,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848658,"byte_end":8848665,"line_start":1521,"line_end":1521,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848666,"byte_end":8848689,"line_start":1522,"line_end":1522,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848690,"byte_end":8848726,"line_start":1523,"line_end":1523,"column_start":1,"column_end":37}},{"value":"/ let b = load_i64_m128i_s(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848727,"byte_end":8848760,"line_start":1524,"line_end":1524,"column_start":1,"column_end":34}},{"value":"/ assert_eq!([1_i64, 0], <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848761,"byte_end":8848809,"line_start":1525,"line_end":1525,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848810,"byte_end":8848817,"line_start":1526,"line_end":1526,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848818,"byte_end":8848829,"line_start":1527,"line_end":1527,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8848830,"byte_end":8848847,"line_start":1528,"line_end":1528,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":712},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849373,"byte_end":8849395,"line_start":1545,"line_end":1545,"column_start":8,"column_end":30},"name":"load_replace_low_m128d","qualname":"::x86_x64::sse2::load_replace_low_m128d","value":"pub fn load_replace_low_m128d(m128d, &f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register, replacing the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let double = 7.0;\n let b = load_replace_low_m128d(a, &double);\n assert_eq!(b.to_array(), [7.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register, replacing the low lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849026,"byte_end":8849090,"line_start":1534,"line_end":1534,"column_start":1,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849091,"byte_end":8849098,"line_start":1535,"line_end":1535,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849099,"byte_end":8849122,"line_start":1536,"line_end":1536,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849123,"byte_end":8849159,"line_start":1537,"line_end":1537,"column_start":1,"column_end":37}},{"value":"/ let double = 7.0;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849160,"byte_end":8849181,"line_start":1538,"line_end":1538,"column_start":1,"column_end":22}},{"value":"/ let b = load_replace_low_m128d(a, &double);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849182,"byte_end":8849229,"line_start":1539,"line_end":1539,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(b.to_array(), [7.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849230,"byte_end":8849271,"line_start":1540,"line_end":1540,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849272,"byte_end":8849279,"line_start":1541,"line_end":1541,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849280,"byte_end":8849291,"line_start":1542,"line_end":1542,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849292,"byte_end":8849309,"line_start":1543,"line_end":1543,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849817,"byte_end":8849835,"line_start":1559,"line_end":1559,"column_start":8,"column_end":26},"name":"load_reverse_m128d","qualname":"::x86_x64::sse2::load_reverse_m128d","value":"pub fn load_reverse_m128d(&m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register with reversed order.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let b = load_reverse_m128d(&a);\n assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());\n ```\n","sig":null,"attributes":[{"value":"/ Loads the reference into a register with reversed order.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849470,"byte_end":8849530,"line_start":1549,"line_end":1549,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849531,"byte_end":8849538,"line_start":1550,"line_end":1550,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849539,"byte_end":8849562,"line_start":1551,"line_end":1551,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849563,"byte_end":8849607,"line_start":1552,"line_end":1552,"column_start":1,"column_end":45}},{"value":"/ let b = load_reverse_m128d(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849608,"byte_end":8849643,"line_start":1553,"line_end":1553,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(m128d::from_array([12.0, 10.0]).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849644,"byte_end":8849715,"line_start":1554,"line_end":1554,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849716,"byte_end":8849723,"line_start":1555,"line_end":1555,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849724,"byte_end":8849735,"line_start":1556,"line_end":1556,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849736,"byte_end":8849753,"line_start":1557,"line_end":1557,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850403,"byte_end":8850423,"line_start":1577,"line_end":1577,"column_start":8,"column_end":28},"name":"load_unaligned_m128d","qualname":"::x86_x64::sse2::load_unaligned_m128d","value":"pub fn load_unaligned_m128d(&[f64; ]) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849927,"byte_end":8849967,"line_start":1563,"line_end":1563,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849968,"byte_end":8849971,"line_start":1564,"line_end":1564,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8849972,"byte_end":8850050,"line_start":1565,"line_end":1565,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is only 8-byte","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850051,"byte_end":8850131,"line_start":1566,"line_end":1566,"column_start":1,"column_end":81}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850132,"byte_end":8850144,"line_start":1567,"line_end":1567,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850145,"byte_end":8850152,"line_start":1568,"line_end":1568,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850153,"byte_end":8850176,"line_start":1569,"line_end":1569,"column_start":1,"column_end":24}},{"value":"/ let a = [10.0, 12.0];","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850177,"byte_end":8850202,"line_start":1570,"line_end":1570,"column_start":1,"column_end":26}},{"value":"/ let b = load_unaligned_m128d(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850203,"byte_end":8850240,"line_start":1571,"line_end":1571,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(m128d::from_array(a).to_bits(), b.to_bits());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850241,"byte_end":8850301,"line_start":1572,"line_end":1572,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850302,"byte_end":8850309,"line_start":1573,"line_end":1573,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850310,"byte_end":8850321,"line_start":1574,"line_end":1574,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850322,"byte_end":8850339,"line_start":1575,"line_end":1575,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851049,"byte_end":8851069,"line_start":1596,"line_end":1596,"column_start":8,"column_end":28},"name":"load_unaligned_m128i","qualname":"::x86_x64::sse2::load_unaligned_m128i","value":"pub fn load_unaligned_m128i(&[u8; ]) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Loads the reference into a register.","sig":null,"attributes":[{"value":"/ Loads the reference into a register.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850521,"byte_end":8850561,"line_start":1581,"line_end":1581,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850562,"byte_end":8850565,"line_start":1582,"line_end":1582,"column_start":1,"column_end":4}},{"value":"/ This generally has no speed penalty if the reference happens to be 16-byte","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850566,"byte_end":8850644,"line_start":1583,"line_end":1583,"column_start":1,"column_end":79}},{"value":"/ aligned, but there is a slight speed penalty if the reference is less","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850645,"byte_end":8850718,"line_start":1584,"line_end":1584,"column_start":1,"column_end":74}},{"value":"/ aligned.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850719,"byte_end":8850731,"line_start":1585,"line_end":1585,"column_start":1,"column_end":13}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850732,"byte_end":8850739,"line_start":1586,"line_end":1586,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850740,"byte_end":8850763,"line_start":1587,"line_end":1587,"column_start":1,"column_end":24}},{"value":"/ let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850764,"byte_end":8850832,"line_start":1588,"line_end":1588,"column_start":1,"column_end":69}},{"value":"/ let b = load_unaligned_m128i(&a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850833,"byte_end":8850870,"line_start":1589,"line_end":1589,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(a, <[u8; 16]>::from(b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850871,"byte_end":8850910,"line_start":1590,"line_end":1590,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850911,"byte_end":8850918,"line_start":1591,"line_end":1591,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850919,"byte_end":8850930,"line_start":1592,"line_end":1592,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850931,"byte_end":8850948,"line_start":1593,"line_end":1593,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8850949,"byte_end":8850985,"line_start":1594,"line_end":1594,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":720},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851650,"byte_end":8851678,"line_start":1612,"line_end":1612,"column_start":8,"column_end":36},"name":"mul_i16_horizontal_add_m128i","qualname":"::x86_x64::sse2::mul_i16_horizontal_add_m128i","value":"pub fn mul_i16_horizontal_add_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`\n values to produce the final output.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();\n assert_eq!(c, [17, 53, 67, -81]);\n ```\n","sig":null,"attributes":[{"value":"/ Multiply `i16` lanes producing `i32` values, horizontal add pairs of `i32`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851174,"byte_end":8851252,"line_start":1600,"line_end":1600,"column_start":1,"column_end":79}},{"value":"/ values to produce the final output.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851253,"byte_end":8851292,"line_start":1601,"line_end":1601,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851293,"byte_end":8851300,"line_start":1602,"line_end":1602,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851301,"byte_end":8851324,"line_start":1603,"line_end":1603,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851325,"byte_end":8851383,"line_start":1604,"line_end":1604,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851384,"byte_end":8851445,"line_start":1605,"line_end":1605,"column_start":1,"column_end":62}},{"value":"/ let c: [i32; 4] = mul_i16_horizontal_add_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851446,"byte_end":8851510,"line_start":1606,"line_end":1606,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(c, [17, 53, 67, -81]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851511,"byte_end":8851548,"line_start":1607,"line_end":1607,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851549,"byte_end":8851556,"line_start":1608,"line_end":1608,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851557,"byte_end":8851568,"line_start":1609,"line_end":1609,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851569,"byte_end":8851586,"line_start":1610,"line_end":1610,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":721},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852240,"byte_end":8852252,"line_start":1627,"line_end":1627,"column_start":8,"column_end":20},"name":"max_u8_m128i","qualname":"::x86_x64::sse2::max_u8_m128i","value":"pub fn max_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = max_u8_m128i(a, b).into();\n assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851758,"byte_end":8851802,"line_start":1616,"line_end":1616,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851803,"byte_end":8851810,"line_start":1617,"line_end":1617,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851811,"byte_end":8851834,"line_start":1618,"line_end":1618,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851835,"byte_end":8851918,"line_start":1619,"line_end":1619,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8851919,"byte_end":8852008,"line_start":1620,"line_end":1620,"column_start":1,"column_end":90}},{"value":"/ let c: [u8; 16] = max_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852009,"byte_end":8852057,"line_start":1621,"line_end":1621,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852058,"byte_end":8852138,"line_start":1622,"line_end":1622,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852139,"byte_end":8852146,"line_start":1623,"line_end":1623,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852147,"byte_end":8852158,"line_start":1624,"line_end":1624,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852159,"byte_end":8852176,"line_start":1625,"line_end":1625,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852733,"byte_end":8852746,"line_start":1642,"line_end":1642,"column_start":8,"column_end":21},"name":"max_i16_m128i","qualname":"::x86_x64::sse2::max_i16_m128i","value":"pub fn max_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = max_i16_m128i(a, b).into();\n assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852330,"byte_end":8852375,"line_start":1631,"line_end":1631,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852376,"byte_end":8852383,"line_start":1632,"line_end":1632,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852384,"byte_end":8852407,"line_start":1633,"line_end":1633,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852408,"byte_end":8852466,"line_start":1634,"line_end":1634,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852467,"byte_end":8852528,"line_start":1635,"line_end":1635,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = max_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852529,"byte_end":8852578,"line_start":1636,"line_end":1636,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [5_i16, 6, 7, 8, -1, -2, -3, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852579,"byte_end":8852631,"line_start":1637,"line_end":1637,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852632,"byte_end":8852639,"line_start":1638,"line_end":1638,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852640,"byte_end":8852651,"line_start":1639,"line_end":1639,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852652,"byte_end":8852669,"line_start":1640,"line_end":1640,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853141,"byte_end":8853150,"line_start":1657,"line_end":1657,"column_start":8,"column_end":17},"name":"max_m128d","qualname":"::x86_x64::sse2::max_m128d","value":"pub fn max_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `max(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([5.0, 2.0]);\n let b = m128d::from_array([1.0, 6.0]);\n let c = max_m128d(a, b).to_array();\n assert_eq!(c, [5.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `max(a, b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852825,"byte_end":8852850,"line_start":1646,"line_end":1646,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852851,"byte_end":8852858,"line_start":1647,"line_end":1647,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852859,"byte_end":8852882,"line_start":1648,"line_end":1648,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([5.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852883,"byte_end":8852925,"line_start":1649,"line_end":1649,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852926,"byte_end":8852968,"line_start":1650,"line_end":1650,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8852969,"byte_end":8853008,"line_start":1651,"line_end":1651,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [5.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853009,"byte_end":8853039,"line_start":1652,"line_end":1652,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853040,"byte_end":8853047,"line_start":1653,"line_end":1653,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853048,"byte_end":8853059,"line_start":1654,"line_end":1654,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853060,"byte_end":8853077,"line_start":1655,"line_end":1655,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853569,"byte_end":8853580,"line_start":1672,"line_end":1672,"column_start":8,"column_end":19},"name":"max_m128d_s","qualname":"::x86_x64::sse2::max_m128d_s","value":"pub fn max_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `max(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = max_m128d_s(a, b).to_array();\n assert_eq!(c, [5.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `max(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853226,"byte_end":8853274,"line_start":1661,"line_end":1661,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853275,"byte_end":8853282,"line_start":1662,"line_end":1662,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853283,"byte_end":8853306,"line_start":1663,"line_end":1663,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853307,"byte_end":8853350,"line_start":1664,"line_end":1664,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853351,"byte_end":8853393,"line_start":1665,"line_end":1665,"column_start":1,"column_end":43}},{"value":"/ let c = max_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853394,"byte_end":8853435,"line_start":1666,"line_end":1666,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [5.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853436,"byte_end":8853467,"line_start":1667,"line_end":1667,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853468,"byte_end":8853475,"line_start":1668,"line_end":1668,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853476,"byte_end":8853487,"line_start":1669,"line_end":1669,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853488,"byte_end":8853505,"line_start":1670,"line_end":1670,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854127,"byte_end":8854139,"line_start":1687,"line_end":1687,"column_start":8,"column_end":20},"name":"min_u8_m128i","qualname":"::x86_x64::sse2::min_u8_m128i","value":"pub fn min_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);\n let c: [u8; 16] = min_u8_m128i(a, b).into();\n assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `u8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853656,"byte_end":8853700,"line_start":1676,"line_end":1676,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853701,"byte_end":8853708,"line_start":1677,"line_end":1677,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853709,"byte_end":8853732,"line_start":1678,"line_end":1678,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853733,"byte_end":8853816,"line_start":1679,"line_end":1679,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 0, 20, 0, 22, 0, 24, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853817,"byte_end":8853901,"line_start":1680,"line_end":1680,"column_start":1,"column_end":85}},{"value":"/ let c: [u8; 16] = min_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853902,"byte_end":8853950,"line_start":1681,"line_end":1681,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 0, 12, 0, 14, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8853951,"byte_end":8854025,"line_start":1682,"line_end":1682,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854026,"byte_end":8854033,"line_start":1683,"line_end":1683,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854034,"byte_end":8854045,"line_start":1684,"line_end":1684,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854046,"byte_end":8854063,"line_start":1685,"line_end":1685,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854623,"byte_end":8854636,"line_start":1702,"line_end":1702,"column_start":8,"column_end":21},"name":"min_i16_m128i","qualname":"::x86_x64::sse2::min_i16_m128i","value":"pub fn min_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = min_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)` with lanes as `i16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854217,"byte_end":8854262,"line_start":1691,"line_end":1691,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854263,"byte_end":8854270,"line_start":1692,"line_end":1692,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854271,"byte_end":8854294,"line_start":1693,"line_end":1693,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854295,"byte_end":8854353,"line_start":1694,"line_end":1694,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854354,"byte_end":8854415,"line_start":1695,"line_end":1695,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = min_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854416,"byte_end":8854465,"line_start":1696,"line_end":1696,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, -15, -26, -37, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854466,"byte_end":8854521,"line_start":1697,"line_end":1697,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854522,"byte_end":8854529,"line_start":1698,"line_end":1698,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854530,"byte_end":8854541,"line_start":1699,"line_end":1699,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854542,"byte_end":8854559,"line_start":1700,"line_end":1700,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":727},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855032,"byte_end":8855041,"line_start":1717,"line_end":1717,"column_start":8,"column_end":17},"name":"min_m128d","qualname":"::x86_x64::sse2::min_m128d","value":"pub fn min_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `min(a, b)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([5.0, 6.0]);\n let c = min_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `min(a, b)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854715,"byte_end":8854740,"line_start":1706,"line_end":1706,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854741,"byte_end":8854748,"line_start":1707,"line_end":1707,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854749,"byte_end":8854772,"line_start":1708,"line_end":1708,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854773,"byte_end":8854816,"line_start":1709,"line_end":1709,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([5.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854817,"byte_end":8854859,"line_start":1710,"line_end":1710,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854860,"byte_end":8854899,"line_start":1711,"line_end":1711,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [1.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854900,"byte_end":8854930,"line_start":1712,"line_end":1712,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854931,"byte_end":8854938,"line_start":1713,"line_end":1713,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854939,"byte_end":8854950,"line_start":1714,"line_end":1714,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8854951,"byte_end":8854968,"line_start":1715,"line_end":1715,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855460,"byte_end":8855471,"line_start":1732,"line_end":1732,"column_start":8,"column_end":19},"name":"min_m128d_s","qualname":"::x86_x64::sse2::min_m128d_s","value":"pub fn min_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `min(a, b)`, other lanes unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 12.0]);\n let b = m128d::from_array([0.0, 6.0]);\n let c = min_m128d_s(a, b).to_array();\n assert_eq!(c, [0.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `min(a, b)`, other lanes unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855117,"byte_end":8855165,"line_start":1721,"line_end":1721,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855166,"byte_end":8855173,"line_start":1722,"line_end":1722,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855174,"byte_end":8855197,"line_start":1723,"line_end":1723,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855198,"byte_end":8855241,"line_start":1724,"line_end":1724,"column_start":1,"column_end":44}},{"value":"/ let b = m128d::from_array([0.0, 6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855242,"byte_end":8855284,"line_start":1725,"line_end":1725,"column_start":1,"column_end":43}},{"value":"/ let c = min_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855285,"byte_end":8855326,"line_start":1726,"line_end":1726,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [0.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855327,"byte_end":8855358,"line_start":1727,"line_end":1727,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855359,"byte_end":8855366,"line_start":1728,"line_end":1728,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855367,"byte_end":8855378,"line_start":1729,"line_end":1729,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855379,"byte_end":8855396,"line_start":1730,"line_end":1730,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855856,"byte_end":8855872,"line_start":1746,"line_end":1746,"column_start":8,"column_end":24},"name":"copy_i64_m128i_s","qualname":"::x86_x64::sse2::copy_i64_m128i_s","value":"pub fn copy_i64_m128i_s(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Copy the low `i64` lane to a new register, upper bits 0.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let b = copy_i64_m128i_s(a);\n assert_eq!(<[i64; 2]>::from(b), [1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copy the low `i64` lane to a new register, upper bits 0.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855547,"byte_end":8855607,"line_start":1736,"line_end":1736,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855608,"byte_end":8855615,"line_start":1737,"line_end":1737,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855616,"byte_end":8855639,"line_start":1738,"line_end":1738,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855640,"byte_end":8855676,"line_start":1739,"line_end":1739,"column_start":1,"column_end":37}},{"value":"/ let b = copy_i64_m128i_s(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855677,"byte_end":8855709,"line_start":1740,"line_end":1740,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(b), [1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855710,"byte_end":8855754,"line_start":1741,"line_end":1741,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855755,"byte_end":8855762,"line_start":1742,"line_end":1742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855763,"byte_end":8855774,"line_start":1743,"line_end":1743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855775,"byte_end":8855792,"line_start":1744,"line_end":1744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":730},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856307,"byte_end":8856333,"line_start":1761,"line_end":1761,"column_start":8,"column_end":34},"name":"copy_replace_low_f64_m128d","qualname":"::x86_x64::sse2::copy_replace_low_f64_m128d","value":"pub fn copy_replace_low_f64_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Copies the `a` value and replaces the low lane with the low `b` value.\n ```\n # use safe_arch::*;\n let a = m128d::from([1.0, 2.0]);\n let b = m128d::from([3.0, 4.0]);\n let c = copy_replace_low_f64_m128d(a, b);\n assert_eq!(c.to_array(), [3.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Copies the `a` value and replaces the low lane with the low `b` value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8855937,"byte_end":8856011,"line_start":1750,"line_end":1750,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856012,"byte_end":8856019,"line_start":1751,"line_end":1751,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856020,"byte_end":8856043,"line_start":1752,"line_end":1752,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from([1.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856044,"byte_end":8856080,"line_start":1753,"line_end":1753,"column_start":1,"column_end":37}},{"value":"/ let b = m128d::from([3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856081,"byte_end":8856117,"line_start":1754,"line_end":1754,"column_start":1,"column_end":37}},{"value":"/ let c = copy_replace_low_f64_m128d(a, b);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856118,"byte_end":8856163,"line_start":1755,"line_end":1755,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(c.to_array(), [3.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856164,"byte_end":8856205,"line_start":1756,"line_end":1756,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856206,"byte_end":8856213,"line_start":1757,"line_end":1757,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856214,"byte_end":8856225,"line_start":1758,"line_end":1758,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856226,"byte_end":8856243,"line_start":1759,"line_end":1759,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856824,"byte_end":8856842,"line_start":1777,"line_end":1777,"column_start":8,"column_end":26},"name":"move_mask_i8_m128i","qualname":"::x86_x64::sse2::move_mask_i8_m128i","value":"pub fn move_mask_i8_m128i(m128i) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the `i8` sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the `i8` sign bit of each lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856410,"byte_end":8856453,"line_start":1765,"line_end":1765,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856454,"byte_end":8856457,"line_start":1766,"line_end":1766,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1, and so on.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856458,"byte_end":8856521,"line_start":1767,"line_end":1767,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856522,"byte_end":8856529,"line_start":1768,"line_end":1768,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856530,"byte_end":8856553,"line_start":1769,"line_end":1769,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, -11, -2, 13, 4, 15, -6, 17, 8, 19, -20, 21, 22, 23, -24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856554,"byte_end":8856648,"line_start":1770,"line_end":1770,"column_start":1,"column_end":95}},{"value":"/ let i = move_mask_i8_m128i(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856649,"byte_end":8856683,"line_start":1771,"line_end":1771,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(i, 0b0100010001000110);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856684,"byte_end":8856722,"line_start":1772,"line_end":1772,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856723,"byte_end":8856730,"line_start":1773,"line_end":1773,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856731,"byte_end":8856742,"line_start":1774,"line_end":1774,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856743,"byte_end":8856760,"line_start":1775,"line_end":1775,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857232,"byte_end":8857247,"line_start":1793,"line_end":1793,"column_start":8,"column_end":23},"name":"move_mask_m128d","qualname":"::x86_x64::sse2::move_mask_m128d","value":"pub fn move_mask_m128d(m128d) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gathers the sign bit of each lane.","sig":null,"attributes":[{"value":"/ Gathers the sign bit of each lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856901,"byte_end":8856939,"line_start":1781,"line_end":1781,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856940,"byte_end":8856943,"line_start":1782,"line_end":1782,"column_start":1,"column_end":4}},{"value":"/ The output has lane 0 as bit 0, lane 1 as bit 1.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856944,"byte_end":8856996,"line_start":1783,"line_end":1783,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8856997,"byte_end":8857004,"line_start":1784,"line_end":1784,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857005,"byte_end":8857028,"line_start":1785,"line_end":1785,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([-1.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857029,"byte_end":8857073,"line_start":1786,"line_end":1786,"column_start":1,"column_end":45}},{"value":"/ let i = move_mask_m128d(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857074,"byte_end":8857105,"line_start":1787,"line_end":1787,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(i, 0b01);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857106,"byte_end":8857130,"line_start":1788,"line_end":1788,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857131,"byte_end":8857138,"line_start":1789,"line_end":1789,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857139,"byte_end":8857150,"line_start":1790,"line_end":1790,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857151,"byte_end":8857168,"line_start":1791,"line_end":1791,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857734,"byte_end":8857757,"line_start":1809,"line_end":1809,"column_start":8,"column_end":31},"name":"mul_widen_u32_odd_m128i","qualname":"::x86_x64::sse2::mul_widen_u32_odd_m128i","value":"pub fn mul_widen_u32_odd_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","sig":null,"attributes":[{"value":"/ Multiplies the odd `u32` lanes and gives the widened (`u64`) results.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857304,"byte_end":8857377,"line_start":1797,"line_end":1797,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857378,"byte_end":8857381,"line_start":1798,"line_end":1798,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857382,"byte_end":8857389,"line_start":1799,"line_end":1799,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857390,"byte_end":8857413,"line_start":1800,"line_end":1800,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857414,"byte_end":8857459,"line_start":1801,"line_end":1801,"column_start":1,"column_end":46}},{"value":"/ let b = m128i::from([5, 7, u32::MAX, 7]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857460,"byte_end":8857505,"line_start":1802,"line_end":1802,"column_start":1,"column_end":46}},{"value":"/ let c: [u64; 2] = mul_widen_u32_odd_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857506,"byte_end":8857565,"line_start":1803,"line_end":1803,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [(1 * 5), (u32::MAX as u64 * u32::MAX as u64)]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857566,"byte_end":8857632,"line_start":1804,"line_end":1804,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857633,"byte_end":8857640,"line_start":1805,"line_end":1805,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857641,"byte_end":8857652,"line_start":1806,"line_end":1806,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857653,"byte_end":8857670,"line_start":1807,"line_end":1807,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858159,"byte_end":8858168,"line_start":1824,"line_end":1824,"column_start":8,"column_end":17},"name":"mul_m128d","qualname":"::x86_x64::sse2::mul_m128d","value":"pub fn mul_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = mul_m128d(a, b).to_array();\n assert_eq!(c, [9200.0, -525.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857836,"byte_end":8857857,"line_start":1813,"line_end":1813,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857858,"byte_end":8857865,"line_start":1814,"line_end":1814,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857866,"byte_end":8857889,"line_start":1815,"line_end":1815,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857890,"byte_end":8857934,"line_start":1816,"line_end":1816,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857935,"byte_end":8857980,"line_start":1817,"line_end":1817,"column_start":1,"column_end":46}},{"value":"/ let c = mul_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8857981,"byte_end":8858020,"line_start":1818,"line_end":1818,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [9200.0, -525.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858021,"byte_end":8858057,"line_start":1819,"line_end":1819,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858058,"byte_end":8858065,"line_start":1820,"line_end":1820,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858066,"byte_end":8858077,"line_start":1821,"line_end":1821,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858078,"byte_end":8858095,"line_start":1822,"line_end":1822,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858593,"byte_end":8858604,"line_start":1839,"line_end":1839,"column_start":8,"column_end":19},"name":"mul_m128d_s","qualname":"::x86_x64::sse2::mul_m128d_s","value":"pub fn mul_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a * b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = mul_m128d_s(a, b).to_array();\n assert_eq!(c, [9200.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a * b`, high lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858244,"byte_end":8858289,"line_start":1828,"line_end":1828,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858290,"byte_end":8858297,"line_start":1829,"line_end":1829,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858298,"byte_end":8858321,"line_start":1830,"line_end":1830,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858322,"byte_end":8858366,"line_start":1831,"line_end":1831,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858367,"byte_end":8858414,"line_start":1832,"line_end":1832,"column_start":1,"column_end":48}},{"value":"/ let c = mul_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858415,"byte_end":8858456,"line_start":1833,"line_end":1833,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [9200.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858457,"byte_end":8858491,"line_start":1834,"line_end":1834,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858492,"byte_end":8858499,"line_start":1835,"line_end":1835,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858500,"byte_end":8858511,"line_start":1836,"line_end":1836,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858512,"byte_end":8858529,"line_start":1837,"line_end":1837,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":736},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859149,"byte_end":8859172,"line_start":1855,"line_end":1855,"column_start":8,"column_end":31},"name":"mul_i16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_high_m128i","value":"pub fn mul_i16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the high bits of the `i32`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858680,"byte_end":8858753,"line_start":1843,"line_end":1843,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858754,"byte_end":8858772,"line_start":1844,"line_end":1844,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858773,"byte_end":8858780,"line_start":1845,"line_end":1845,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858781,"byte_end":8858804,"line_start":1846,"line_end":1846,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858805,"byte_end":8858870,"line_start":1847,"line_end":1847,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858871,"byte_end":8858939,"line_start":1848,"line_end":1848,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8858940,"byte_end":8858999,"line_start":1849,"line_end":1849,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 1, 3, 621, 0, 0, 0, -1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859000,"byte_end":8859047,"line_start":1850,"line_end":1850,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859048,"byte_end":8859055,"line_start":1851,"line_end":1851,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859056,"byte_end":8859067,"line_start":1852,"line_end":1852,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859068,"byte_end":8859085,"line_start":1853,"line_end":1853,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859724,"byte_end":8859747,"line_start":1871,"line_end":1871,"column_start":8,"column_end":31},"name":"mul_u16_keep_high_m128i","qualname":"::x86_x64::sse2::mul_u16_keep_high_m128i","value":"pub fn mul_u16_keep_high_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);\n let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);\n let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();\n assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `u16`, keep the high bits of the `u32`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859253,"byte_end":8859326,"line_start":1859,"line_end":1859,"column_start":1,"column_end":74}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859327,"byte_end":8859345,"line_start":1860,"line_end":1860,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859346,"byte_end":8859353,"line_start":1861,"line_end":1861,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859354,"byte_end":8859377,"line_start":1862,"line_end":1862,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2003, 3005, 45687, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859378,"byte_end":8859442,"line_start":1863,"line_end":1863,"column_start":1,"column_end":65}},{"value":"/ let b = m128i::from([5_u16, 6004, 7006, 8910, 15, 26, 37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859443,"byte_end":8859510,"line_start":1864,"line_end":1864,"column_start":1,"column_end":68}},{"value":"/ let c: [u16; 8] = mul_u16_keep_high_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859511,"byte_end":8859570,"line_start":1865,"line_end":1865,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, 183, 321, 6211, 0, 0, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859571,"byte_end":8859622,"line_start":1866,"line_end":1866,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859623,"byte_end":8859630,"line_start":1867,"line_end":1867,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859631,"byte_end":8859642,"line_start":1868,"line_end":1868,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859643,"byte_end":8859660,"line_start":1869,"line_end":1869,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860311,"byte_end":8860333,"line_start":1887,"line_end":1887,"column_start":8,"column_end":30},"name":"mul_i16_keep_low_m128i","qualname":"::x86_x64::sse2::mul_i16_keep_low_m128i","value":"pub fn mul_i16_keep_low_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`\n intermediates.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);\n let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();\n assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a * b` with lanes as `i16`, keep the low bits of the `i32`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859828,"byte_end":8859900,"line_start":1875,"line_end":1875,"column_start":1,"column_end":73}},{"value":"/ intermediates.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859901,"byte_end":8859919,"line_start":1876,"line_end":1876,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859920,"byte_end":8859927,"line_start":1877,"line_end":1877,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859928,"byte_end":8859951,"line_start":1878,"line_end":1878,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 200, 300, 4568, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8859952,"byte_end":8860017,"line_start":1879,"line_end":1879,"column_start":1,"column_end":66}},{"value":"/ let b = m128i::from([5_i16, 600, 700, 8910, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860018,"byte_end":8860086,"line_start":1880,"line_end":1880,"column_start":1,"column_end":69}},{"value":"/ let c: [i16; 8] = mul_i16_keep_low_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860087,"byte_end":8860145,"line_start":1881,"line_end":1881,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(c, [5, -11072, 13392, 3024, 15, 52, 111, -192]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860146,"byte_end":8860209,"line_start":1882,"line_end":1882,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860210,"byte_end":8860217,"line_start":1883,"line_end":1883,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860218,"byte_end":8860229,"line_start":1884,"line_end":1884,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860230,"byte_end":8860247,"line_start":1885,"line_end":1885,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860727,"byte_end":8860738,"line_start":1902,"line_end":1902,"column_start":8,"column_end":19},"name":"bitor_m128d","qualname":"::x86_x64::sse2::bitor_m128d","value":"pub fn bitor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitor_m128d(a, b).to_array();\n assert_eq!(c, [1.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860414,"byte_end":8860434,"line_start":1891,"line_end":1891,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860435,"byte_end":8860442,"line_start":1892,"line_end":1892,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860443,"byte_end":8860466,"line_start":1893,"line_end":1893,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860467,"byte_end":8860509,"line_start":1894,"line_end":1894,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860510,"byte_end":8860552,"line_start":1895,"line_end":1895,"column_start":1,"column_end":43}},{"value":"/ let c = bitor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860553,"byte_end":8860594,"line_start":1896,"line_end":1896,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860595,"byte_end":8860625,"line_start":1897,"line_end":1897,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860626,"byte_end":8860633,"line_start":1898,"line_end":1898,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860634,"byte_end":8860645,"line_start":1899,"line_end":1899,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860646,"byte_end":8860663,"line_start":1900,"line_end":1900,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861126,"byte_end":8861137,"line_start":1917,"line_end":1917,"column_start":8,"column_end":19},"name":"bitor_m128i","qualname":"::x86_x64::sse2::bitor_m128i","value":"pub fn bitor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a | b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitor_m128i(a, b).into();\n assert_eq!(c, [1, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a | b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860813,"byte_end":8860833,"line_start":1906,"line_end":1906,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860834,"byte_end":8860841,"line_start":1907,"line_end":1907,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860842,"byte_end":8860865,"line_start":1908,"line_end":1908,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860866,"byte_end":8860904,"line_start":1909,"line_end":1909,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860905,"byte_end":8860943,"line_start":1910,"line_end":1910,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860944,"byte_end":8860991,"line_start":1911,"line_end":1911,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [1, 1, 1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8860992,"byte_end":8861024,"line_start":1912,"line_end":1912,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861025,"byte_end":8861032,"line_start":1913,"line_end":1913,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861033,"byte_end":8861044,"line_start":1914,"line_end":1914,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861045,"byte_end":8861062,"line_start":1915,"line_end":1915,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861660,"byte_end":8861680,"line_start":1932,"line_end":1932,"column_start":8,"column_end":28},"name":"pack_i16_to_i8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_i8_m128i","value":"pub fn pack_i16_to_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `i8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);\n let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `i8`, and pack the values.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861215,"byte_end":8861273,"line_start":1921,"line_end":1921,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861274,"byte_end":8861281,"line_start":1922,"line_end":1922,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861282,"byte_end":8861305,"line_start":1923,"line_end":1923,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861306,"byte_end":8861360,"line_start":1924,"line_end":1924,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861361,"byte_end":8861422,"line_start":1925,"line_end":1925,"column_start":1,"column_end":62}},{"value":"/ let c: [i8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861423,"byte_end":8861479,"line_start":1926,"line_end":1926,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1_i8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861480,"byte_end":8861558,"line_start":1927,"line_end":1927,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861559,"byte_end":8861566,"line_start":1928,"line_end":1928,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861567,"byte_end":8861578,"line_start":1929,"line_end":1929,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861579,"byte_end":8861596,"line_start":1930,"line_end":1930,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862147,"byte_end":8862168,"line_start":1947,"line_end":1947,"column_start":8,"column_end":29},"name":"pack_i32_to_i16_m128i","qualname":"::x86_x64::sse2::pack_i32_to_i16_m128i","value":"pub fn pack_i32_to_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i32` to `i16`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i32, 2, 3, 4]);\n let b = m128i::from([5_i32, 6, 7, 8]);\n let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();\n assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i32` to `i16`, and pack the values.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861761,"byte_end":8861820,"line_start":1936,"line_end":1936,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861821,"byte_end":8861828,"line_start":1937,"line_end":1937,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861829,"byte_end":8861852,"line_start":1938,"line_end":1938,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861853,"byte_end":8861895,"line_start":1939,"line_end":1939,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([5_i32, 6, 7, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861896,"byte_end":8861938,"line_start":1940,"line_end":1940,"column_start":1,"column_end":43}},{"value":"/ let c: [i16; 8] = pack_i32_to_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861939,"byte_end":8861996,"line_start":1941,"line_end":1941,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8861997,"byte_end":8862045,"line_start":1942,"line_end":1942,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862046,"byte_end":8862053,"line_start":1943,"line_end":1943,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862054,"byte_end":8862065,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862066,"byte_end":8862083,"line_start":1945,"line_end":1945,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862710,"byte_end":8862730,"line_start":1962,"line_end":1962,"column_start":8,"column_end":28},"name":"pack_i16_to_u8_m128i","qualname":"::x86_x64::sse2::pack_i16_to_u8_m128i","value":"pub fn pack_i16_to_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Saturating convert `i16` to `u8`, and pack the values.\n ```\n # use safe_arch::*;\n let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);\n let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);\n let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();\n assert_eq!(c, [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]);\n ```\n","sig":null,"attributes":[{"value":"/ Saturating convert `i16` to `u8`, and pack the values.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862249,"byte_end":8862307,"line_start":1951,"line_end":1951,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862308,"byte_end":8862315,"line_start":1952,"line_end":1952,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862316,"byte_end":8862339,"line_start":1953,"line_end":1953,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([-1_i16, 2, -3, 4, -5, 6, -7, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862340,"byte_end":8862398,"line_start":1954,"line_end":1954,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([9_i16, 10, 11, 12, 13, -14, 15, -16]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862399,"byte_end":8862462,"line_start":1955,"line_end":1955,"column_start":1,"column_end":64}},{"value":"/ let c: [u8; 16] = pack_i16_to_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862463,"byte_end":8862519,"line_start":1956,"line_end":1956,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [255_u8, 2, 253, 4, 251, 6, 249, 8, 9, 10, 11, 12, 13, 242, 15, 240]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862520,"byte_end":8862608,"line_start":1957,"line_end":1957,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862609,"byte_end":8862616,"line_start":1958,"line_end":1958,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862617,"byte_end":8862628,"line_start":1959,"line_end":1959,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862629,"byte_end":8862646,"line_start":1960,"line_end":1960,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863461,"byte_end":8863485,"line_start":1981,"line_end":1981,"column_start":8,"column_end":32},"name":"sum_of_u8_abs_diff_m128i","qualname":"::x86_x64::sse2::sum_of_u8_abs_diff_m128i","value":"pub fn sum_of_u8_abs_diff_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Compute \"sum of `u8` absolute differences\".","sig":null,"attributes":[{"value":"/ Compute \"sum of `u8` absolute differences\".","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862812,"byte_end":8862859,"line_start":1966,"line_end":1966,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862860,"byte_end":8862863,"line_start":1967,"line_end":1967,"column_start":1,"column_end":4}},{"value":"/ * `u8` lanewise `abs(a - b)`, producing `u8` intermediate values.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862864,"byte_end":8862933,"line_start":1968,"line_end":1968,"column_start":1,"column_end":70}},{"value":"/ * Sum the first eight and second eight values.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862934,"byte_end":8862984,"line_start":1969,"line_end":1969,"column_start":1,"column_end":51}},{"value":"/ * Place into the low 16 bits of two `u64` lanes.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8862985,"byte_end":8863037,"line_start":1970,"line_end":1970,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863038,"byte_end":8863045,"line_start":1971,"line_end":1971,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863046,"byte_end":8863069,"line_start":1972,"line_end":1972,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 11, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863070,"byte_end":8863159,"line_start":1973,"line_end":1973,"column_start":1,"column_end":90}},{"value":"/ let b = m128i::from([20_u8, 110, 250, 103, 34, 105, 60, 217, 8, 19, 210, 201, 202, 203, 204, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863160,"byte_end":8863263,"line_start":1974,"line_end":1974,"column_start":1,"column_end":104}},{"value":"/ let c: [u64; 2] = sum_of_u8_abs_diff_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863264,"byte_end":8863324,"line_start":1975,"line_end":1975,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [831_u64, 910]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863325,"byte_end":8863359,"line_start":1976,"line_end":1976,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863360,"byte_end":8863367,"line_start":1977,"line_end":1977,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863368,"byte_end":8863379,"line_start":1978,"line_end":1978,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863380,"byte_end":8863397,"line_start":1979,"line_end":1979,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864062,"byte_end":8864074,"line_start":1997,"line_end":1997,"column_start":8,"column_end":20},"name":"set_i8_m128i","qualname":"::x86_x64::sse2::set_i8_m128i","value":"pub fn set_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                    i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863563,"byte_end":8863625,"line_start":1985,"line_end":1985,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863626,"byte_end":8863633,"line_start":1986,"line_end":1986,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863634,"byte_end":8863657,"line_start":1987,"line_end":1987,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([15_i8, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863658,"byte_end":8863741,"line_start":1988,"line_end":1988,"column_start":1,"column_end":84}},{"value":"/ let b = set_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863742,"byte_end":8863824,"line_start":1989,"line_end":1989,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863825,"byte_end":8863882,"line_start":1990,"line_end":1990,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863883,"byte_end":8863890,"line_start":1991,"line_end":1991,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863891,"byte_end":8863902,"line_start":1992,"line_end":1992,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863903,"byte_end":8863920,"line_start":1993,"line_end":1993,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863921,"byte_end":8863957,"line_start":1994,"line_end":1994,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8863958,"byte_end":8863998,"line_start":1995,"line_end":1995,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864724,"byte_end":8864737,"line_start":2013,"line_end":2013,"column_start":8,"column_end":21},"name":"set_i16_m128i","qualname":"::x86_x64::sse2::set_i16_m128i","value":"pub fn set_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);\n let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864282,"byte_end":8864344,"line_start":2001,"line_end":2001,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864345,"byte_end":8864352,"line_start":2002,"line_end":2002,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864353,"byte_end":8864376,"line_start":2003,"line_end":2003,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([7_i16, 6, 5, 4, 3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864377,"byte_end":8864431,"line_start":2004,"line_end":2004,"column_start":1,"column_end":55}},{"value":"/ let b = set_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864432,"byte_end":8864486,"line_start":2005,"line_end":2005,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864487,"byte_end":8864544,"line_start":2006,"line_end":2006,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864545,"byte_end":8864552,"line_start":2007,"line_end":2007,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864553,"byte_end":8864564,"line_start":2008,"line_end":2008,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864565,"byte_end":8864582,"line_start":2009,"line_end":2009,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864583,"byte_end":8864619,"line_start":2010,"line_end":2010,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864620,"byte_end":8864660,"line_start":2011,"line_end":2011,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865206,"byte_end":8865219,"line_start":2027,"line_end":2027,"column_start":8,"column_end":21},"name":"set_i32_m128i","qualname":"::x86_x64::sse2::set_i32_m128i","value":"pub fn set_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([3, 2, 1, 0]);\n let b = set_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864874,"byte_end":8864936,"line_start":2017,"line_end":2017,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864937,"byte_end":8864944,"line_start":2018,"line_end":2018,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864945,"byte_end":8864968,"line_start":2019,"line_end":2019,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([3, 2, 1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8864969,"byte_end":8865007,"line_start":2020,"line_end":2020,"column_start":1,"column_end":39}},{"value":"/ let b = set_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865008,"byte_end":8865046,"line_start":2021,"line_end":2021,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865047,"byte_end":8865104,"line_start":2022,"line_end":2022,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865105,"byte_end":8865112,"line_start":2023,"line_end":2023,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865113,"byte_end":8865124,"line_start":2024,"line_end":2024,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865125,"byte_end":8865142,"line_start":2025,"line_end":2025,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865636,"byte_end":8865649,"line_start":2041,"line_end":2041,"column_start":8,"column_end":21},"name":"set_i64_m128i","qualname":"::x86_x64::sse2::set_i64_m128i","value":"pub fn set_i64_m128i(i64, i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 0]);\n let b = set_i64_m128i(0, 1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the high lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865312,"byte_end":8865374,"line_start":2031,"line_end":2031,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865375,"byte_end":8865382,"line_start":2032,"line_end":2032,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865383,"byte_end":8865406,"line_start":2033,"line_end":2033,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865407,"byte_end":8865443,"line_start":2034,"line_end":2034,"column_start":1,"column_end":37}},{"value":"/ let b = set_i64_m128i(0, 1);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865444,"byte_end":8865476,"line_start":2035,"line_end":2035,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865477,"byte_end":8865534,"line_start":2036,"line_end":2036,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865535,"byte_end":8865542,"line_start":2037,"line_end":2037,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865543,"byte_end":8865554,"line_start":2038,"line_end":2038,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865555,"byte_end":8865572,"line_start":2039,"line_end":2039,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866037,"byte_end":8866046,"line_start":2055,"line_end":2055,"column_start":8,"column_end":17},"name":"set_m128d","qualname":"::x86_x64::sse2::set_m128d","value":"pub fn set_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the high lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the high lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865721,"byte_end":8865783,"line_start":2045,"line_end":2045,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865784,"byte_end":8865791,"line_start":2046,"line_end":2046,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865792,"byte_end":8865815,"line_start":2047,"line_end":2047,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865816,"byte_end":8865858,"line_start":2048,"line_end":2048,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865859,"byte_end":8865891,"line_start":2049,"line_end":2049,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865892,"byte_end":8865935,"line_start":2050,"line_end":2050,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865936,"byte_end":8865943,"line_start":2051,"line_end":2051,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865944,"byte_end":8865955,"line_start":2052,"line_end":2052,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8865956,"byte_end":8865973,"line_start":2053,"line_end":2053,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866414,"byte_end":8866425,"line_start":2069,"line_end":2069,"column_start":8,"column_end":19},"name":"set_m128d_s","qualname":"::x86_x64::sse2::set_m128d_s","value":"pub fn set_m128d_s(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into the low lane of a `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = set_m128d_s(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into the low lane of a `m128d`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866114,"byte_end":8866163,"line_start":2059,"line_end":2059,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866164,"byte_end":8866171,"line_start":2060,"line_end":2060,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866172,"byte_end":8866195,"line_start":2061,"line_end":2061,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866196,"byte_end":8866238,"line_start":2062,"line_end":2062,"column_start":1,"column_end":43}},{"value":"/ let b = set_m128d_s(1.0);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866239,"byte_end":8866268,"line_start":2063,"line_end":2063,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866269,"byte_end":8866312,"line_start":2064,"line_end":2064,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866313,"byte_end":8866320,"line_start":2065,"line_end":2065,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866321,"byte_end":8866332,"line_start":2066,"line_end":2066,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866333,"byte_end":8866350,"line_start":2067,"line_end":2067,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":751},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866788,"byte_end":8866803,"line_start":2083,"line_end":2083,"column_start":8,"column_end":23},"name":"set_splat_m128d","qualname":"::x86_x64::sse2::set_splat_m128d","value":"pub fn set_splat_m128d(f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Splats the args into both lanes of the `m128d`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 1.0]);\n let b = set_splat_m128d(1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Splats the args into both lanes of the `m128d`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866482,"byte_end":8866533,"line_start":2073,"line_end":2073,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866534,"byte_end":8866541,"line_start":2074,"line_end":2074,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866542,"byte_end":8866565,"line_start":2075,"line_end":2075,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866566,"byte_end":8866608,"line_start":2076,"line_end":2076,"column_start":1,"column_end":43}},{"value":"/ let b = set_splat_m128d(1.0);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866609,"byte_end":8866642,"line_start":2077,"line_end":2077,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866643,"byte_end":8866686,"line_start":2078,"line_end":2078,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866687,"byte_end":8866694,"line_start":2079,"line_end":2079,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866695,"byte_end":8866706,"line_start":2080,"line_end":2080,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866707,"byte_end":8866724,"line_start":2081,"line_end":2081,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867214,"byte_end":8867232,"line_start":2097,"line_end":2097,"column_start":8,"column_end":26},"name":"set_splat_i8_m128i","qualname":"::x86_x64::sse2::set_splat_i8_m128i","value":"pub fn set_splat_i8_m128i(i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i8` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i8_m128i(1);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i8` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866861,"byte_end":8866909,"line_start":2087,"line_end":2087,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866910,"byte_end":8866917,"line_start":2088,"line_end":2088,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866918,"byte_end":8866941,"line_start":2089,"line_end":2089,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8866942,"byte_end":8867019,"line_start":2090,"line_end":2090,"column_start":1,"column_end":78}},{"value":"/ let b = set_splat_i8_m128i(1);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867020,"byte_end":8867054,"line_start":2091,"line_end":2091,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(a));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867055,"byte_end":8867112,"line_start":2092,"line_end":2092,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867113,"byte_end":8867120,"line_start":2093,"line_end":2093,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867121,"byte_end":8867132,"line_start":2094,"line_end":2094,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867133,"byte_end":8867150,"line_start":2095,"line_end":2095,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867623,"byte_end":8867642,"line_start":2111,"line_end":2111,"column_start":8,"column_end":27},"name":"set_splat_i16_m128i","qualname":"::x86_x64::sse2::set_splat_i16_m128i","value":"pub fn set_splat_i16_m128i(i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i16` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);\n let b = set_splat_i16_m128i(1);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i16` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867291,"byte_end":8867340,"line_start":2101,"line_end":2101,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867341,"byte_end":8867348,"line_start":2102,"line_end":2102,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867349,"byte_end":8867372,"line_start":2103,"line_end":2103,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 1, 1, 1, 1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867373,"byte_end":8867427,"line_start":2104,"line_end":2104,"column_start":1,"column_end":55}},{"value":"/ let b = set_splat_i16_m128i(1);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867428,"byte_end":8867463,"line_start":2105,"line_end":2105,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(a));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867464,"byte_end":8867521,"line_start":2106,"line_end":2106,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867522,"byte_end":8867529,"line_start":2107,"line_end":2107,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867530,"byte_end":8867541,"line_start":2108,"line_end":2108,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867542,"byte_end":8867559,"line_start":2109,"line_end":2109,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868019,"byte_end":8868038,"line_start":2125,"line_end":2125,"column_start":8,"column_end":27},"name":"set_splat_i32_m128i","qualname":"::x86_x64::sse2::set_splat_i32_m128i","value":"pub fn set_splat_i32_m128i(i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i32` to all lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 1, 1, 1]);\n let b = set_splat_i32_m128i(1);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i32` to all lanes of the `m128i`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867703,"byte_end":8867752,"line_start":2115,"line_end":2115,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867753,"byte_end":8867760,"line_start":2116,"line_end":2116,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867761,"byte_end":8867784,"line_start":2117,"line_end":2117,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 1, 1, 1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867785,"byte_end":8867823,"line_start":2118,"line_end":2118,"column_start":1,"column_end":39}},{"value":"/ let b = set_splat_i32_m128i(1);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867824,"byte_end":8867859,"line_start":2119,"line_end":2119,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(a));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867860,"byte_end":8867917,"line_start":2120,"line_end":2120,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867918,"byte_end":8867925,"line_start":2121,"line_end":2121,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867926,"byte_end":8867937,"line_start":2122,"line_end":2122,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8867938,"byte_end":8867955,"line_start":2123,"line_end":2123,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868414,"byte_end":8868433,"line_start":2139,"line_end":2139,"column_start":8,"column_end":27},"name":"set_splat_i64_m128i","qualname":"::x86_x64::sse2::set_splat_i64_m128i","value":"pub fn set_splat_i64_m128i(i64) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Splats the `i64` to both lanes of the `m128i`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 1]);\n let b = set_splat_i64_m128i(1);\n assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));\n ```\n","sig":null,"attributes":[{"value":"/ Splats the `i64` to both lanes of the `m128i`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868099,"byte_end":8868149,"line_start":2129,"line_end":2129,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868150,"byte_end":8868157,"line_start":2130,"line_end":2130,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868158,"byte_end":8868181,"line_start":2131,"line_end":2131,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868182,"byte_end":8868218,"line_start":2132,"line_end":2132,"column_start":1,"column_end":37}},{"value":"/ let b = set_splat_i64_m128i(1);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868219,"byte_end":8868254,"line_start":2133,"line_end":2133,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(<[i64; 2]>::from(a), <[i64; 2]>::from(a));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868255,"byte_end":8868312,"line_start":2134,"line_end":2134,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868313,"byte_end":8868320,"line_start":2135,"line_end":2135,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868321,"byte_end":8868332,"line_start":2136,"line_end":2136,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868333,"byte_end":8868350,"line_start":2137,"line_end":2137,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869002,"byte_end":8869023,"line_start":2155,"line_end":2155,"column_start":8,"column_end":29},"name":"set_reversed_i8_m128i","qualname":"::x86_x64::sse2::set_reversed_i8_m128i","value":"pub fn set_reversed_i8_m128i(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8,\n                             i8, i8, i8, i8) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = set_reversed_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868495,"byte_end":8868556,"line_start":2143,"line_end":2143,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868557,"byte_end":8868564,"line_start":2144,"line_end":2144,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868565,"byte_end":8868588,"line_start":2145,"line_end":2145,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868589,"byte_end":8868672,"line_start":2146,"line_end":2146,"column_start":1,"column_end":84}},{"value":"/ let b = set_reversed_i8_m128i(0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868673,"byte_end":8868764,"line_start":2147,"line_end":2147,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(<[i8; 16]>::from(a), <[i8; 16]>::from(b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868765,"byte_end":8868822,"line_start":2148,"line_end":2148,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868823,"byte_end":8868830,"line_start":2149,"line_end":2149,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868831,"byte_end":8868842,"line_start":2150,"line_end":2150,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868843,"byte_end":8868860,"line_start":2151,"line_end":2151,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868861,"byte_end":8868897,"line_start":2152,"line_end":2152,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8868898,"byte_end":8868938,"line_start":2153,"line_end":2153,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":757},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869682,"byte_end":8869704,"line_start":2171,"line_end":2171,"column_start":8,"column_end":30},"name":"set_reversed_i16_m128i","qualname":"::x86_x64::sse2::set_reversed_i16_m128i","value":"pub fn set_reversed_i16_m128i(i16, i16, i16, i16, i16, i16, i16, i16) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);\n let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);\n assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869232,"byte_end":8869293,"line_start":2159,"line_end":2159,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869294,"byte_end":8869301,"line_start":2160,"line_end":2160,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869302,"byte_end":8869325,"line_start":2161,"line_end":2161,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i16, 1, 2, 3, 4, 5, 6, 7]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869326,"byte_end":8869380,"line_start":2162,"line_end":2162,"column_start":1,"column_end":55}},{"value":"/ let b = set_reversed_i16_m128i(0_i16, 1, 2, 3, 4, 5, 6, 7);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869381,"byte_end":8869444,"line_start":2163,"line_end":2163,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(<[i16; 8]>::from(a), <[i16; 8]>::from(b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869445,"byte_end":8869502,"line_start":2164,"line_end":2164,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869503,"byte_end":8869510,"line_start":2165,"line_end":2165,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869511,"byte_end":8869522,"line_start":2166,"line_end":2166,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869523,"byte_end":8869540,"line_start":2167,"line_end":2167,"column_start":1,"column_end":18}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869541,"byte_end":8869577,"line_start":2168,"line_end":2168,"column_start":1,"column_end":37}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869578,"byte_end":8869618,"line_start":2169,"line_end":2169,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870182,"byte_end":8870204,"line_start":2185,"line_end":2185,"column_start":8,"column_end":30},"name":"set_reversed_i32_m128i","qualname":"::x86_x64::sse2::set_reversed_i32_m128i","value":"pub fn set_reversed_i32_m128i(i32, i32, i32, i32) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128i`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128i::from([0, 1, 2, 3]);\n let b = set_reversed_i32_m128i(0, 1, 2, 3);\n assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128i`, first arg is the low lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869842,"byte_end":8869903,"line_start":2175,"line_end":2175,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869904,"byte_end":8869911,"line_start":2176,"line_end":2176,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869912,"byte_end":8869935,"line_start":2177,"line_end":2177,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0, 1, 2, 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869936,"byte_end":8869974,"line_start":2178,"line_end":2178,"column_start":1,"column_end":39}},{"value":"/ let b = set_reversed_i32_m128i(0, 1, 2, 3);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8869975,"byte_end":8870022,"line_start":2179,"line_end":2179,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(<[i32; 4]>::from(a), <[i32; 4]>::from(b));","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870023,"byte_end":8870080,"line_start":2180,"line_end":2180,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870081,"byte_end":8870088,"line_start":2181,"line_end":2181,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870089,"byte_end":8870100,"line_start":2182,"line_end":2182,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870101,"byte_end":8870118,"line_start":2183,"line_end":2183,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870622,"byte_end":8870640,"line_start":2199,"line_end":2199,"column_start":8,"column_end":26},"name":"set_reversed_m128d","qualname":"::x86_x64::sse2::set_reversed_m128d","value":"pub fn set_reversed_m128d(f64, f64) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Sets the args into an `m128d`, first arg is the low lane.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([0.0, 1.0]);\n let b = set_reversed_m128d(0.0, 1.0);\n assert_eq!(a.to_array(), b.to_array());\n ```\n","sig":null,"attributes":[{"value":"/ Sets the args into an `m128d`, first arg is the low lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870298,"byte_end":8870359,"line_start":2189,"line_end":2189,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870360,"byte_end":8870367,"line_start":2190,"line_end":2190,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870368,"byte_end":8870391,"line_start":2191,"line_end":2191,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([0.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870392,"byte_end":8870434,"line_start":2192,"line_end":2192,"column_start":1,"column_end":43}},{"value":"/ let b = set_reversed_m128d(0.0, 1.0);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870435,"byte_end":8870476,"line_start":2193,"line_end":2193,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(a.to_array(), b.to_array());","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870477,"byte_end":8870520,"line_start":2194,"line_end":2194,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870521,"byte_end":8870528,"line_start":2195,"line_end":2195,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870529,"byte_end":8870540,"line_start":2196,"line_end":2196,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870541,"byte_end":8870558,"line_start":2197,"line_end":2197,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870924,"byte_end":8870936,"line_start":2212,"line_end":2212,"column_start":8,"column_end":20},"name":"zeroed_m128i","qualname":"::x86_x64::sse2::zeroed_m128i","value":"pub fn zeroed_m128i() -> m128i","parent":null,"children":[],"decl_id":null,"docs":" All lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128i();\n assert_eq!(u128::from(a), 0);\n ```\n","sig":null,"attributes":[{"value":"/ All lanes zero.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870709,"byte_end":8870728,"line_start":2203,"line_end":2203,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870729,"byte_end":8870736,"line_start":2204,"line_end":2204,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870737,"byte_end":8870760,"line_start":2205,"line_end":2205,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128i();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870761,"byte_end":8870788,"line_start":2206,"line_end":2206,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(u128::from(a), 0);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870789,"byte_end":8870822,"line_start":2207,"line_end":2207,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870823,"byte_end":8870830,"line_start":2208,"line_end":2208,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870831,"byte_end":8870842,"line_start":2209,"line_end":2209,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870843,"byte_end":8870860,"line_start":2210,"line_end":2210,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871217,"byte_end":8871229,"line_start":2225,"line_end":2225,"column_start":8,"column_end":20},"name":"zeroed_m128d","qualname":"::x86_x64::sse2::zeroed_m128d","value":"pub fn zeroed_m128d() -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Both lanes zero.\n ```\n # use safe_arch::*;\n let a = zeroed_m128d();\n assert_eq!(a.to_array(), [0.0, 0.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Both lanes zero.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8870993,"byte_end":8871013,"line_start":2216,"line_end":2216,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871014,"byte_end":8871021,"line_start":2217,"line_end":2217,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871022,"byte_end":8871045,"line_start":2218,"line_end":2218,"column_start":1,"column_end":24}},{"value":"/ let a = zeroed_m128d();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871046,"byte_end":8871073,"line_start":2219,"line_end":2219,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(a.to_array(), [0.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871074,"byte_end":8871115,"line_start":2220,"line_end":2220,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871116,"byte_end":8871123,"line_start":2221,"line_end":2221,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871124,"byte_end":8871135,"line_start":2222,"line_end":2222,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871136,"byte_end":8871153,"line_start":2223,"line_end":2223,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871736,"byte_end":8871760,"line_start":2244,"line_end":2244,"column_start":8,"column_end":32},"name":"shuffle_ai_f32_all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_f32_all_m128i","value":"pub fn shuffle_ai_f32_all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `i32` lanes in `$a` using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `i32` lanes in `$a` using an immediate","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871283,"byte_end":8871337,"line_start":2229,"line_end":2229,"column_start":1,"column_end":55}},{"value":"/ control value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871338,"byte_end":8871356,"line_start":2230,"line_end":2230,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871357,"byte_end":8871360,"line_start":2231,"line_end":2231,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871361,"byte_end":8871368,"line_start":2232,"line_end":2232,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871369,"byte_end":8871392,"line_start":2233,"line_end":2233,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([6, 7, 8, 9]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871393,"byte_end":8871431,"line_start":2234,"line_end":2234,"column_start":1,"column_end":39}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871432,"byte_end":8871438,"line_start":2235,"line_end":2235,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_ai_f32_all_m128i::<0b01_10_10_00>(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871439,"byte_end":8871496,"line_start":2236,"line_end":2236,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(<[i32; 4]>::from(c), [6, 8, 8, 7]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871497,"byte_end":8871547,"line_start":2237,"line_end":2237,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871548,"byte_end":8871555,"line_start":2238,"line_end":2238,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shuffle_epi32`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871556,"byte_end":8871598,"line_start":2239,"line_end":2239,"column_start":1,"column_end":43}},{"value":"/ * **Assembly:** `pshufd xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871599,"byte_end":8871642,"line_start":2240,"line_end":2240,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871643,"byte_end":8871654,"line_start":2241,"line_end":2241,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871655,"byte_end":8871672,"line_start":2242,"line_end":2242,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872849,"byte_end":8872874,"line_start":2272,"line_end":2272,"column_start":8,"column_end":33},"name":"shuffle_abi_f64_all_m128d","qualname":"::x86_x64::sse2::shuffle_abi_f64_all_m128d","value":"pub fn shuffle_abi_f64_all_m128d<const MASK: i32>(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the `f64` lanes from `$a` and `$b` together using an immediate\n control value.","sig":null,"attributes":[{"value":"/ Shuffle the `f64` lanes from `$a` and `$b` together using an immediate","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871851,"byte_end":8871925,"line_start":2248,"line_end":2248,"column_start":1,"column_end":75}},{"value":"/ control value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871926,"byte_end":8871944,"line_start":2249,"line_end":2249,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871945,"byte_end":8871948,"line_start":2250,"line_end":2250,"column_start":1,"column_end":4}},{"value":"/ The `a:` and `b:` prefixes on the index selection values are literal tokens","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8871949,"byte_end":8872028,"line_start":2251,"line_end":2251,"column_start":1,"column_end":80}},{"value":"/ that you type. It helps keep clear what value comes from where. The first","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872029,"byte_end":8872106,"line_start":2252,"line_end":2252,"column_start":1,"column_end":78}},{"value":"/ two output lanes come from `$a`, the second two output lanes come from `$b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872107,"byte_end":8872187,"line_start":2253,"line_end":2253,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872188,"byte_end":8872191,"line_start":2254,"line_end":2254,"column_start":1,"column_end":4}},{"value":"/ You can pass the same value as both arguments, but if you want to swizzle","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872192,"byte_end":8872269,"line_start":2255,"line_end":2255,"column_start":1,"column_end":78}},{"value":"/ within only a single register and you have `avx` available consider using","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872270,"byte_end":8872347,"line_start":2256,"line_end":2256,"column_start":1,"column_end":78}},{"value":"/ [`shuffle_ai_f64_all_m128d`] instead. You'll get much better performance.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872348,"byte_end":8872425,"line_start":2257,"line_end":2257,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872426,"byte_end":8872433,"line_start":2258,"line_end":2258,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872434,"byte_end":8872457,"line_start":2259,"line_end":2259,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872458,"byte_end":8872500,"line_start":2260,"line_end":2260,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([3.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872501,"byte_end":8872543,"line_start":2261,"line_end":2261,"column_start":1,"column_end":43}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872544,"byte_end":8872550,"line_start":2262,"line_end":2262,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f64_all_m128d::<0b00>(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872551,"byte_end":8872614,"line_start":2263,"line_end":2263,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(c, [1.0, 3.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872615,"byte_end":8872645,"line_start":2264,"line_end":2264,"column_start":1,"column_end":31}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872646,"byte_end":8872652,"line_start":2265,"line_end":2265,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_abi_f64_all_m128d::<0b10>(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872653,"byte_end":8872716,"line_start":2266,"line_end":2266,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(c, [1.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872717,"byte_end":8872747,"line_start":2267,"line_end":2267,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872748,"byte_end":8872755,"line_start":2268,"line_end":2268,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872756,"byte_end":8872767,"line_start":2269,"line_end":2269,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872768,"byte_end":8872785,"line_start":2270,"line_end":2270,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873458,"byte_end":8873485,"line_start":2288,"line_end":2288,"column_start":8,"column_end":35},"name":"shuffle_ai_i16_h64all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_i16_h64all_m128i","value":"pub fn shuffle_ai_i16_h64all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the high `i16` lanes in `$a` using an immediate control value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n let c = shuffle_ai_i16_h64all_m128i::<0b01_00_10_11>(a);\n assert_eq!(<[i16; 8]>::from(c), [1_i16, 2, 3, 4, 8, 7, 5, 6]);\n ```\n * **Intrinsic:** [`_mm_shufflehi_epi16`]\n * **Assembly:** `pshufhw xmm, xmm, imm8`\n","sig":null,"attributes":[{"value":"/ Shuffle the high `i16` lanes in `$a` using an immediate control value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8872977,"byte_end":8873051,"line_start":2276,"line_end":2276,"column_start":1,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873052,"byte_end":8873059,"line_start":2277,"line_end":2277,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873060,"byte_end":8873083,"line_start":2278,"line_end":2278,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873084,"byte_end":8873138,"line_start":2279,"line_end":2279,"column_start":1,"column_end":55}},{"value":"/ let c = shuffle_ai_i16_h64all_m128i::<0b01_00_10_11>(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873139,"byte_end":8873199,"line_start":2280,"line_end":2280,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(<[i16; 8]>::from(c), [1_i16, 2, 3, 4, 8, 7, 5, 6]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873200,"byte_end":8873266,"line_start":2281,"line_end":2281,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873267,"byte_end":8873274,"line_start":2282,"line_end":2282,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shufflehi_epi16`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873275,"byte_end":8873319,"line_start":2283,"line_end":2283,"column_start":1,"column_end":45}},{"value":"/ * **Assembly:** `pshufhw xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873320,"byte_end":8873364,"line_start":2284,"line_end":2284,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873365,"byte_end":8873376,"line_start":2285,"line_end":2285,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873377,"byte_end":8873394,"line_start":2286,"line_end":2286,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874065,"byte_end":8874092,"line_start":2305,"line_end":2305,"column_start":8,"column_end":35},"name":"shuffle_ai_i16_l64all_m128i","qualname":"::x86_x64::sse2::shuffle_ai_i16_l64all_m128i","value":"pub fn shuffle_ai_i16_l64all_m128i<const MASK: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shuffle the low `i16` lanes in `$a` using an immediate control value.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);\n //\n let c = shuffle_ai_i16_l64all_m128i::<0b01_11_10_00>(a);\n assert_eq!(<[i16; 8]>::from(c), [1_i16, 3, 4, 2, 5, 6, 7, 8]);\n ```\n * **Intrinsic:** [`_mm_shufflelo_epi16`]\n * **Assembly:** `pshuflw xmm, xmm, imm8`\n","sig":null,"attributes":[{"value":"/ Shuffle the low `i16` lanes in `$a` using an immediate control value.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873578,"byte_end":8873651,"line_start":2292,"line_end":2292,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873652,"byte_end":8873659,"line_start":2293,"line_end":2293,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873660,"byte_end":8873683,"line_start":2294,"line_end":2294,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873684,"byte_end":8873738,"line_start":2295,"line_end":2295,"column_start":1,"column_end":55}},{"value":"/ //","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873739,"byte_end":8873745,"line_start":2296,"line_end":2296,"column_start":1,"column_end":7}},{"value":"/ let c = shuffle_ai_i16_l64all_m128i::<0b01_11_10_00>(a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873746,"byte_end":8873806,"line_start":2297,"line_end":2297,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(<[i16; 8]>::from(c), [1_i16, 3, 4, 2, 5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873807,"byte_end":8873873,"line_start":2298,"line_end":2298,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873874,"byte_end":8873881,"line_start":2299,"line_end":2299,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_shufflelo_epi16`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873882,"byte_end":8873926,"line_start":2300,"line_end":2300,"column_start":1,"column_end":45}},{"value":"/ * **Assembly:** `pshuflw xmm, xmm, imm8`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873927,"byte_end":8873971,"line_start":2301,"line_end":2301,"column_start":1,"column_end":45}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873972,"byte_end":8873983,"line_start":2302,"line_end":2302,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8873984,"byte_end":8874001,"line_start":2303,"line_end":2303,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874656,"byte_end":8874673,"line_start":2322,"line_end":2322,"column_start":8,"column_end":25},"name":"shl_all_u16_m128i","qualname":"::x86_x64::sse2::shl_all_u16_m128i","value":"pub fn shl_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u16` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874185,"byte_end":8874262,"line_start":2309,"line_end":2309,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874263,"byte_end":8874266,"line_start":2310,"line_end":2310,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874267,"byte_end":8874287,"line_start":2311,"line_end":2311,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874288,"byte_end":8874295,"line_start":2312,"line_end":2312,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874296,"byte_end":8874319,"line_start":2313,"line_end":2313,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874320,"byte_end":8874374,"line_start":2314,"line_end":2314,"column_start":1,"column_end":55}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874375,"byte_end":8874411,"line_start":2315,"line_end":2315,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shl_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874412,"byte_end":8874465,"line_start":2316,"line_end":2316,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874466,"byte_end":8874554,"line_start":2317,"line_end":2317,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874555,"byte_end":8874562,"line_start":2318,"line_end":2318,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874563,"byte_end":8874574,"line_start":2319,"line_end":2319,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874575,"byte_end":8874592,"line_start":2320,"line_end":2320,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875183,"byte_end":8875200,"line_start":2339,"line_end":2339,"column_start":8,"column_end":25},"name":"shl_all_u32_m128i","qualname":"::x86_x64::sse2::shl_all_u32_m128i","value":"pub fn shl_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u32` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874760,"byte_end":8874837,"line_start":2326,"line_end":2326,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874838,"byte_end":8874841,"line_start":2327,"line_end":2327,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874842,"byte_end":8874862,"line_start":2328,"line_end":2328,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874863,"byte_end":8874870,"line_start":2329,"line_end":2329,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874871,"byte_end":8874894,"line_start":2330,"line_end":2330,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874895,"byte_end":8874937,"line_start":2331,"line_end":2331,"column_start":1,"column_end":43}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874938,"byte_end":8874974,"line_start":2332,"line_end":2332,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shl_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8874975,"byte_end":8875028,"line_start":2333,"line_end":2333,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875029,"byte_end":8875081,"line_start":2334,"line_end":2334,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875082,"byte_end":8875089,"line_start":2335,"line_end":2335,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875090,"byte_end":8875101,"line_start":2336,"line_end":2336,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875102,"byte_end":8875119,"line_start":2337,"line_end":2337,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875688,"byte_end":8875705,"line_start":2356,"line_end":2356,"column_start":8,"column_end":25},"name":"shl_all_u64_m128i","qualname":"::x86_x64::sse2::shl_all_u64_m128i","value":"pub fn shl_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift all `u64` lanes to the left by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875287,"byte_end":8875364,"line_start":2343,"line_end":2343,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875365,"byte_end":8875368,"line_start":2344,"line_end":2344,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875369,"byte_end":8875389,"line_start":2345,"line_end":2345,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875390,"byte_end":8875397,"line_start":2346,"line_end":2346,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875398,"byte_end":8875421,"line_start":2347,"line_end":2347,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875422,"byte_end":8875458,"line_start":2348,"line_end":2348,"column_start":1,"column_end":37}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875459,"byte_end":8875495,"line_start":2349,"line_end":2349,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875496,"byte_end":8875549,"line_start":2350,"line_end":2350,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875550,"byte_end":8875586,"line_start":2351,"line_end":2351,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875587,"byte_end":8875594,"line_start":2352,"line_end":2352,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875595,"byte_end":8875606,"line_start":2353,"line_end":2353,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875607,"byte_end":8875624,"line_start":2354,"line_end":2354,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876178,"byte_end":8876195,"line_start":2371,"line_end":2371,"column_start":8,"column_end":25},"name":"shl_imm_u16_m128i","qualname":"::x86_x64::sse2::shl_imm_u16_m128i","value":"pub fn shl_imm_u16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u16` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u16` lanes left by an immediate.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875792,"byte_end":8875840,"line_start":2360,"line_end":2360,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875841,"byte_end":8875844,"line_start":2361,"line_end":2361,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875845,"byte_end":8875852,"line_start":2362,"line_end":2362,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875853,"byte_end":8875876,"line_start":2363,"line_end":2363,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875877,"byte_end":8875931,"line_start":2364,"line_end":2364,"column_start":1,"column_end":55}},{"value":"/ let c: [u16; 8] = shl_imm_u16_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875932,"byte_end":8875987,"line_start":2365,"line_end":2365,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u16 << 3, 2 << 3, 3 << 3, 4 << 3, 1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8875988,"byte_end":8876076,"line_start":2366,"line_end":2366,"column_start":1,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876077,"byte_end":8876084,"line_start":2367,"line_end":2367,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876085,"byte_end":8876096,"line_start":2368,"line_end":2368,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876097,"byte_end":8876114,"line_start":2369,"line_end":2369,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876615,"byte_end":8876632,"line_start":2386,"line_end":2386,"column_start":8,"column_end":25},"name":"shl_imm_u32_m128i","qualname":"::x86_x64::sse2::shl_imm_u32_m128i","value":"pub fn shl_imm_u32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u32` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u32` lanes left by an immediate.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876281,"byte_end":8876329,"line_start":2375,"line_end":2375,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876330,"byte_end":8876333,"line_start":2376,"line_end":2376,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876334,"byte_end":8876341,"line_start":2377,"line_end":2377,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876342,"byte_end":8876365,"line_start":2378,"line_end":2378,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876366,"byte_end":8876404,"line_start":2379,"line_end":2379,"column_start":1,"column_end":39}},{"value":"/ let c: [u32; 4] = shl_imm_u32_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876405,"byte_end":8876460,"line_start":2380,"line_end":2380,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 << 3, 2 << 3, 3 << 3, 4 << 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876461,"byte_end":8876513,"line_start":2381,"line_end":2381,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876514,"byte_end":8876521,"line_start":2382,"line_end":2382,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876522,"byte_end":8876533,"line_start":2383,"line_end":2383,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876534,"byte_end":8876551,"line_start":2384,"line_end":2384,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877039,"byte_end":8877056,"line_start":2401,"line_end":2401,"column_start":8,"column_end":25},"name":"shl_imm_u64_m128i","qualname":"::x86_x64::sse2::shl_imm_u64_m128i","value":"pub fn shl_imm_u64_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts both `u64` lanes left by an immediate.","sig":null,"attributes":[{"value":"/ Shifts both `u64` lanes left by an immediate.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876718,"byte_end":8876767,"line_start":2390,"line_end":2390,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876768,"byte_end":8876771,"line_start":2391,"line_end":2391,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876772,"byte_end":8876779,"line_start":2392,"line_end":2392,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876780,"byte_end":8876803,"line_start":2393,"line_end":2393,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 2]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876804,"byte_end":8876840,"line_start":2394,"line_end":2394,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shl_imm_u64_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876841,"byte_end":8876896,"line_start":2395,"line_end":2395,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u64 << 3, 2 << 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876897,"byte_end":8876937,"line_start":2396,"line_end":2396,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876938,"byte_end":8876945,"line_start":2397,"line_end":2397,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876946,"byte_end":8876957,"line_start":2398,"line_end":2398,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8876958,"byte_end":8876975,"line_start":2399,"line_end":2399,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877413,"byte_end":8877423,"line_start":2415,"line_end":2415,"column_start":8,"column_end":18},"name":"sqrt_m128d","qualname":"::x86_x64::sse2::sqrt_m128d","value":"pub fn sqrt_m128d(m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `sqrt(a)`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([25.0, 16.0]);\n let b = sqrt_m128d(a).to_array();\n assert_eq!(b, [5.0, 4.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `sqrt(a)`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877142,"byte_end":8877165,"line_start":2405,"line_end":2405,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877166,"byte_end":8877173,"line_start":2406,"line_end":2406,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877174,"byte_end":8877197,"line_start":2407,"line_end":2407,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([25.0, 16.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877198,"byte_end":8877242,"line_start":2408,"line_end":2408,"column_start":1,"column_end":45}},{"value":"/ let b = sqrt_m128d(a).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877243,"byte_end":8877280,"line_start":2409,"line_end":2409,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [5.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877281,"byte_end":8877311,"line_start":2410,"line_end":2410,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877312,"byte_end":8877319,"line_start":2411,"line_end":2411,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877320,"byte_end":8877331,"line_start":2412,"line_end":2412,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877332,"byte_end":8877349,"line_start":2413,"line_end":2413,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877837,"byte_end":8877849,"line_start":2430,"line_end":2430,"column_start":8,"column_end":20},"name":"sqrt_m128d_s","qualname":"::x86_x64::sse2::sqrt_m128d_s","value":"pub fn sqrt_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Low lane `sqrt(b)`, upper lane is unchanged from `a`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 2.0]);\n let b = m128d::from_array([25.0, 4.0]);\n let c = sqrt_m128d_s(a, b);\n assert_eq!(c.to_array(), [5.0, 2.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Low lane `sqrt(b)`, upper lane is unchanged from `a`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877485,"byte_end":8877542,"line_start":2419,"line_end":2419,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877543,"byte_end":8877550,"line_start":2420,"line_end":2420,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877551,"byte_end":8877574,"line_start":2421,"line_end":2421,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877575,"byte_end":8877617,"line_start":2422,"line_end":2422,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([25.0, 4.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877618,"byte_end":8877661,"line_start":2423,"line_end":2423,"column_start":1,"column_end":44}},{"value":"/ let c = sqrt_m128d_s(a, b);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877662,"byte_end":8877693,"line_start":2424,"line_end":2424,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c.to_array(), [5.0, 2.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877694,"byte_end":8877735,"line_start":2425,"line_end":2425,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877736,"byte_end":8877743,"line_start":2426,"line_end":2426,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877744,"byte_end":8877755,"line_start":2427,"line_end":2427,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877756,"byte_end":8877773,"line_start":2428,"line_end":2428,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878416,"byte_end":8878433,"line_start":2447,"line_end":2447,"column_start":8,"column_end":25},"name":"shr_all_i16_m128i","qualname":"::x86_x64::sse2::shr_all_i16_m128i","value":"pub fn shr_all_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i16` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8877926,"byte_end":8878004,"line_start":2434,"line_end":2434,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878005,"byte_end":8878008,"line_start":2435,"line_end":2435,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878009,"byte_end":8878039,"line_start":2436,"line_end":2436,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878040,"byte_end":8878047,"line_start":2437,"line_end":2437,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878048,"byte_end":8878071,"line_start":2438,"line_end":2438,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878072,"byte_end":8878130,"line_start":2439,"line_end":2439,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878131,"byte_end":8878167,"line_start":2440,"line_end":2440,"column_start":1,"column_end":37}},{"value":"/ let c: [i16; 8] = shr_all_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878168,"byte_end":8878221,"line_start":2441,"line_end":2441,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878222,"byte_end":8878314,"line_start":2442,"line_end":2442,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878315,"byte_end":8878322,"line_start":2443,"line_end":2443,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878323,"byte_end":8878334,"line_start":2444,"line_end":2444,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878335,"byte_end":8878352,"line_start":2445,"line_end":2445,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878958,"byte_end":8878975,"line_start":2464,"line_end":2464,"column_start":8,"column_end":25},"name":"shr_all_i32_m128i","qualname":"::x86_x64::sse2::shr_all_i32_m128i","value":"pub fn shr_all_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","sig":null,"attributes":[{"value":"/ Shift each `i32` lane to the right by the `count` in the lower `i64` lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878520,"byte_end":8878598,"line_start":2451,"line_end":2451,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878599,"byte_end":8878602,"line_start":2452,"line_end":2452,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878603,"byte_end":8878633,"line_start":2453,"line_end":2453,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878634,"byte_end":8878641,"line_start":2454,"line_end":2454,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878642,"byte_end":8878665,"line_start":2455,"line_end":2455,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i32, 2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878666,"byte_end":8878710,"line_start":2456,"line_end":2456,"column_start":1,"column_end":45}},{"value":"/ let b = m128i::from([3_i64, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878711,"byte_end":8878747,"line_start":2457,"line_end":2457,"column_start":1,"column_end":37}},{"value":"/ let c: [i32; 4] = shr_all_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878748,"byte_end":8878801,"line_start":2458,"line_end":2458,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878802,"byte_end":8878856,"line_start":2459,"line_end":2459,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878857,"byte_end":8878864,"line_start":2460,"line_end":2460,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878865,"byte_end":8878876,"line_start":2461,"line_end":2461,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8878877,"byte_end":8878894,"line_start":2462,"line_end":2462,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879492,"byte_end":8879509,"line_start":2481,"line_end":2481,"column_start":8,"column_end":25},"name":"shr_imm_i16_m128i","qualname":"::x86_x64::sse2::shr_imm_i16_m128i","value":"pub fn shr_imm_i16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `i16` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `i16` lanes right by an immediate.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879062,"byte_end":8879111,"line_start":2468,"line_end":2468,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879112,"byte_end":8879115,"line_start":2469,"line_end":2469,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879116,"byte_end":8879146,"line_start":2470,"line_end":2470,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879147,"byte_end":8879150,"line_start":2471,"line_end":2471,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879151,"byte_end":8879158,"line_start":2472,"line_end":2472,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879159,"byte_end":8879182,"line_start":2473,"line_end":2473,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879183,"byte_end":8879241,"line_start":2474,"line_end":2474,"column_start":1,"column_end":59}},{"value":"/ let c: [i16; 8] = shr_imm_i16_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879242,"byte_end":8879297,"line_start":2475,"line_end":2475,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_i16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, -1 >> 3, -2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879298,"byte_end":8879390,"line_start":2476,"line_end":2476,"column_start":1,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879391,"byte_end":8879398,"line_start":2477,"line_end":2477,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879399,"byte_end":8879410,"line_start":2478,"line_end":2478,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879411,"byte_end":8879428,"line_start":2479,"line_end":2479,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879969,"byte_end":8879986,"line_start":2498,"line_end":2498,"column_start":8,"column_end":25},"name":"shr_imm_i32_m128i","qualname":"::x86_x64::sse2::shr_imm_i32_m128i","value":"pub fn shr_imm_i32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `i32` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `i32` lanes right by an immediate.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879595,"byte_end":8879644,"line_start":2485,"line_end":2485,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879645,"byte_end":8879648,"line_start":2486,"line_end":2486,"column_start":1,"column_end":4}},{"value":"/ New bits are the sign bit.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879649,"byte_end":8879679,"line_start":2487,"line_end":2487,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879680,"byte_end":8879683,"line_start":2488,"line_end":2488,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879684,"byte_end":8879691,"line_start":2489,"line_end":2489,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879692,"byte_end":8879715,"line_start":2490,"line_end":2490,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879716,"byte_end":8879756,"line_start":2491,"line_end":2491,"column_start":1,"column_end":41}},{"value":"/ let c: [i32; 4] = shr_imm_i32_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879757,"byte_end":8879812,"line_start":2492,"line_end":2492,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, -3 >> 3, -4 >> 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879813,"byte_end":8879867,"line_start":2493,"line_end":2493,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879868,"byte_end":8879875,"line_start":2494,"line_end":2494,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879876,"byte_end":8879887,"line_start":2495,"line_end":2495,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8879888,"byte_end":8879905,"line_start":2496,"line_end":2496,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880540,"byte_end":8880557,"line_start":2514,"line_end":2514,"column_start":8,"column_end":25},"name":"shr_all_u16_m128i","qualname":"::x86_x64::sse2::shr_all_u16_m128i","value":"pub fn shr_all_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u16` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880072,"byte_end":8880150,"line_start":2502,"line_end":2502,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880151,"byte_end":8880154,"line_start":2503,"line_end":2503,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880155,"byte_end":8880162,"line_start":2504,"line_end":2504,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880163,"byte_end":8880186,"line_start":2505,"line_end":2505,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880187,"byte_end":8880249,"line_start":2506,"line_end":2506,"column_start":1,"column_end":63}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880250,"byte_end":8880286,"line_start":2507,"line_end":2507,"column_start":1,"column_end":37}},{"value":"/ let c: [u16; 8] = shr_all_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880287,"byte_end":8880340,"line_start":2508,"line_end":2508,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1_u16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, 100 >> 3, 200 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880341,"byte_end":8880438,"line_start":2509,"line_end":2509,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880439,"byte_end":8880446,"line_start":2510,"line_end":2510,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880447,"byte_end":8880458,"line_start":2511,"line_end":2511,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880459,"byte_end":8880476,"line_start":2512,"line_end":2512,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881056,"byte_end":8881073,"line_start":2530,"line_end":2530,"column_start":8,"column_end":25},"name":"shr_all_u32_m128i","qualname":"::x86_x64::sse2::shr_all_u32_m128i","value":"pub fn shr_all_u32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u32` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880644,"byte_end":8880722,"line_start":2518,"line_end":2518,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880723,"byte_end":8880726,"line_start":2519,"line_end":2519,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880727,"byte_end":8880734,"line_start":2520,"line_end":2520,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880735,"byte_end":8880758,"line_start":2521,"line_end":2521,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u32, 2, 300, 400]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880759,"byte_end":8880805,"line_start":2522,"line_end":2522,"column_start":1,"column_end":47}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880806,"byte_end":8880842,"line_start":2523,"line_end":2523,"column_start":1,"column_end":37}},{"value":"/ let c: [u32; 4] = shr_all_u32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880843,"byte_end":8880896,"line_start":2524,"line_end":2524,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880897,"byte_end":8880954,"line_start":2525,"line_end":2525,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880955,"byte_end":8880962,"line_start":2526,"line_end":2526,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880963,"byte_end":8880974,"line_start":2527,"line_end":2527,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8880975,"byte_end":8880992,"line_start":2528,"line_end":2528,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881564,"byte_end":8881581,"line_start":2547,"line_end":2547,"column_start":8,"column_end":25},"name":"shr_all_u64_m128i","qualname":"::x86_x64::sse2::shr_all_u64_m128i","value":"pub fn shr_all_u64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","sig":null,"attributes":[{"value":"/ Shift each `u64` lane to the right by the `count` in the lower `u64` lane.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881160,"byte_end":8881238,"line_start":2534,"line_end":2534,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881239,"byte_end":8881242,"line_start":2535,"line_end":2535,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881243,"byte_end":8881263,"line_start":2536,"line_end":2536,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881264,"byte_end":8881271,"line_start":2537,"line_end":2537,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881272,"byte_end":8881295,"line_start":2538,"line_end":2538,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 56]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881296,"byte_end":8881333,"line_start":2539,"line_end":2539,"column_start":1,"column_end":38}},{"value":"/ let b = m128i::from([3_u64, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881334,"byte_end":8881370,"line_start":2540,"line_end":2540,"column_start":1,"column_end":37}},{"value":"/ let c: [u64; 2] = shr_all_u64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881371,"byte_end":8881424,"line_start":2541,"line_end":2541,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(c, [1 >> 3, 56 >> 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881425,"byte_end":8881462,"line_start":2542,"line_end":2542,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881463,"byte_end":8881470,"line_start":2543,"line_end":2543,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881471,"byte_end":8881482,"line_start":2544,"line_end":2544,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881483,"byte_end":8881500,"line_start":2545,"line_end":2545,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882175,"byte_end":8882192,"line_start":2566,"line_end":2566,"column_start":8,"column_end":25},"name":"shr_imm_u16_m128i","qualname":"::x86_x64::sse2::shr_imm_u16_m128i","value":"pub fn shr_imm_u16_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u16` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u16` lanes right by an immediate.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881668,"byte_end":8881717,"line_start":2551,"line_end":2551,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881718,"byte_end":8881721,"line_start":2552,"line_end":2552,"column_start":1,"column_end":4}},{"value":"/ New bits are 0s.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881722,"byte_end":8881742,"line_start":2553,"line_end":2553,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881743,"byte_end":8881746,"line_start":2554,"line_end":2554,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881747,"byte_end":8881754,"line_start":2555,"line_end":2555,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881755,"byte_end":8881778,"line_start":2556,"line_end":2556,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u16, 2, 3, 4, 100, 200, 300, 400]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881779,"byte_end":8881841,"line_start":2557,"line_end":2557,"column_start":1,"column_end":63}},{"value":"/ let c: [u16; 8] = shr_imm_u16_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881842,"byte_end":8881897,"line_start":2558,"line_end":2558,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u16 >> 3, 2 >> 3, 3 >> 3, 4 >> 3, 100 >> 3, 200 >> 3, 300 >> 3, 400 >> 3,]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881898,"byte_end":8881995,"line_start":2559,"line_end":2559,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8881996,"byte_end":8882003,"line_start":2560,"line_end":2560,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi16`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882004,"byte_end":8882043,"line_start":2561,"line_end":2561,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrlw xmm, imm8`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882044,"byte_end":8882081,"line_start":2562,"line_end":2562,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882082,"byte_end":8882093,"line_start":2563,"line_end":2563,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882094,"byte_end":8882111,"line_start":2564,"line_end":2564,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882699,"byte_end":8882716,"line_start":2583,"line_end":2583,"column_start":8,"column_end":25},"name":"shr_imm_u32_m128i","qualname":"::x86_x64::sse2::shr_imm_u32_m128i","value":"pub fn shr_imm_u32_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts all `u32` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts all `u32` lanes right by an immediate.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882278,"byte_end":8882327,"line_start":2570,"line_end":2570,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882328,"byte_end":8882331,"line_start":2571,"line_end":2571,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882332,"byte_end":8882339,"line_start":2572,"line_end":2572,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882340,"byte_end":8882363,"line_start":2573,"line_end":2573,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 300, 400]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882364,"byte_end":8882406,"line_start":2574,"line_end":2574,"column_start":1,"column_end":43}},{"value":"/ let c: [u32; 4] = shr_imm_u32_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882407,"byte_end":8882462,"line_start":2575,"line_end":2575,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1 >> 3, 2 >> 3, 300 >> 3, 400 >> 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882463,"byte_end":8882519,"line_start":2576,"line_end":2576,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882520,"byte_end":8882527,"line_start":2577,"line_end":2577,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi32`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882528,"byte_end":8882567,"line_start":2578,"line_end":2578,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrld xmm, imm8`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882568,"byte_end":8882605,"line_start":2579,"line_end":2579,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882606,"byte_end":8882617,"line_start":2580,"line_end":2580,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882618,"byte_end":8882635,"line_start":2581,"line_end":2581,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":794},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883206,"byte_end":8883223,"line_start":2600,"line_end":2600,"column_start":8,"column_end":25},"name":"shr_imm_u64_m128i","qualname":"::x86_x64::sse2::shr_imm_u64_m128i","value":"pub fn shr_imm_u64_m128i<const IMM: i32>(m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Shifts both `u64` lanes right by an immediate.","sig":null,"attributes":[{"value":"/ Shifts both `u64` lanes right by an immediate.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882802,"byte_end":8882852,"line_start":2587,"line_end":2587,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882853,"byte_end":8882856,"line_start":2588,"line_end":2588,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882857,"byte_end":8882864,"line_start":2589,"line_end":2589,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882865,"byte_end":8882888,"line_start":2590,"line_end":2590,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_u64, 200]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882889,"byte_end":8882927,"line_start":2591,"line_end":2591,"column_start":1,"column_end":39}},{"value":"/ let c: [u64; 2] = shr_imm_u64_m128i::<3>(a).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882928,"byte_end":8882983,"line_start":2592,"line_end":2592,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [1_u64 >> 3, 200 >> 3]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8882984,"byte_end":8883026,"line_start":2593,"line_end":2593,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883027,"byte_end":8883034,"line_start":2594,"line_end":2594,"column_start":1,"column_end":8}},{"value":"/ * **Intrinsic:** [`_mm_srli_epi64`]","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883035,"byte_end":8883074,"line_start":2595,"line_end":2595,"column_start":1,"column_end":40}},{"value":"/ * **Assembly:** `psrlq xmm, imm8`","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883075,"byte_end":8883112,"line_start":2596,"line_end":2596,"column_start":1,"column_end":38}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883113,"byte_end":8883124,"line_start":2597,"line_end":2597,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883125,"byte_end":8883142,"line_start":2598,"line_end":2598,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":796},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883639,"byte_end":8883650,"line_start":2615,"line_end":2615,"column_start":8,"column_end":19},"name":"store_m128d","qualname":"::x86_x64::sse2::store_m128d","value":"pub fn store_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883309,"byte_end":8883353,"line_start":2604,"line_end":2604,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883354,"byte_end":8883361,"line_start":2605,"line_end":2605,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883362,"byte_end":8883385,"line_start":2606,"line_end":2606,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883386,"byte_end":8883430,"line_start":2607,"line_end":2607,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883431,"byte_end":8883462,"line_start":2608,"line_end":2608,"column_start":1,"column_end":32}},{"value":"/ store_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883463,"byte_end":8883490,"line_start":2609,"line_end":2609,"column_start":1,"column_end":28}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883491,"byte_end":8883516,"line_start":2610,"line_end":2610,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883517,"byte_end":8883549,"line_start":2611,"line_end":2611,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883550,"byte_end":8883557,"line_start":2612,"line_end":2612,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883558,"byte_end":8883575,"line_start":2613,"line_end":2613,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884037,"byte_end":8884050,"line_start":2629,"line_end":2629,"column_start":8,"column_end":21},"name":"store_m128d_s","qualname":"::x86_x64::sse2::store_m128d_s","value":"pub fn store_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_m128d_s(&mut f, a);\n assert_eq!(f, 10.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883741,"byte_end":8883794,"line_start":2619,"line_end":2619,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883795,"byte_end":8883802,"line_start":2620,"line_end":2620,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883803,"byte_end":8883826,"line_start":2621,"line_end":2621,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883827,"byte_end":8883871,"line_start":2622,"line_end":2622,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883872,"byte_end":8883892,"line_start":2623,"line_end":2623,"column_start":1,"column_end":21}},{"value":"/ store_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883893,"byte_end":8883922,"line_start":2624,"line_end":2624,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(f, 10.0);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883923,"byte_end":8883947,"line_start":2625,"line_end":2625,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883948,"byte_end":8883955,"line_start":2626,"line_end":2626,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8883956,"byte_end":8883973,"line_start":2627,"line_end":2627,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884483,"byte_end":8884500,"line_start":2644,"line_end":2644,"column_start":8,"column_end":25},"name":"store_splat_m128d","qualname":"::x86_x64::sse2::store_splat_m128d","value":"pub fn store_splat_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the low lane value to all lanes of the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_splat_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [10.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the low lane value to all lanes of the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884125,"byte_end":8884191,"line_start":2633,"line_end":2633,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884192,"byte_end":8884199,"line_start":2634,"line_end":2634,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884200,"byte_end":8884223,"line_start":2635,"line_end":2635,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884224,"byte_end":8884268,"line_start":2636,"line_end":2636,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884269,"byte_end":8884300,"line_start":2637,"line_end":2637,"column_start":1,"column_end":32}},{"value":"/ store_splat_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884301,"byte_end":8884334,"line_start":2638,"line_end":2638,"column_start":1,"column_end":34}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884335,"byte_end":8884360,"line_start":2639,"line_end":2639,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [10.0, 10.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884361,"byte_end":8884393,"line_start":2640,"line_end":2640,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884394,"byte_end":8884401,"line_start":2641,"line_end":2641,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884402,"byte_end":8884419,"line_start":2642,"line_end":2642,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":799},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884922,"byte_end":8884933,"line_start":2659,"line_end":2659,"column_start":8,"column_end":19},"name":"store_m128i","qualname":"::x86_x64::sse2::store_m128i","value":"pub fn store_m128i(&mut m128i, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let mut b = zeroed_m128i();\n store_m128i(&mut b, a);\n let c: [i32; 4] = b.into();\n assert_eq!(c, [1, 2, 3, 4]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884592,"byte_end":8884636,"line_start":2648,"line_end":2648,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884637,"byte_end":8884644,"line_start":2649,"line_end":2649,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884645,"byte_end":8884668,"line_start":2650,"line_end":2650,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884669,"byte_end":8884707,"line_start":2651,"line_end":2651,"column_start":1,"column_end":39}},{"value":"/ let mut b = zeroed_m128i();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884708,"byte_end":8884739,"line_start":2652,"line_end":2652,"column_start":1,"column_end":32}},{"value":"/ store_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884740,"byte_end":8884767,"line_start":2653,"line_end":2653,"column_start":1,"column_end":28}},{"value":"/ let c: [i32; 4] = b.into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884768,"byte_end":8884799,"line_start":2654,"line_end":2654,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(c, [1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884800,"byte_end":8884832,"line_start":2655,"line_end":2655,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884833,"byte_end":8884840,"line_start":2656,"line_end":2656,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8884841,"byte_end":8884858,"line_start":2657,"line_end":2657,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":800},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885310,"byte_end":8885328,"line_start":2673,"line_end":2673,"column_start":8,"column_end":26},"name":"store_high_m128d_s","qualname":"::x86_x64::sse2::store_high_m128d_s","value":"pub fn store_high_m128d_s(&mut f64, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the high lane value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut f = 0.0;\n store_high_m128d_s(&mut f, a);\n assert_eq!(f, 12.0);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the high lane value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885008,"byte_end":8885062,"line_start":2663,"line_end":2663,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885063,"byte_end":8885070,"line_start":2664,"line_end":2664,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885071,"byte_end":8885094,"line_start":2665,"line_end":2665,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885095,"byte_end":8885139,"line_start":2666,"line_end":2666,"column_start":1,"column_end":45}},{"value":"/ let mut f = 0.0;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885140,"byte_end":8885160,"line_start":2667,"line_end":2667,"column_start":1,"column_end":21}},{"value":"/ store_high_m128d_s(&mut f, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885161,"byte_end":8885195,"line_start":2668,"line_end":2668,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(f, 12.0);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885196,"byte_end":8885220,"line_start":2669,"line_end":2669,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885221,"byte_end":8885228,"line_start":2670,"line_end":2670,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885229,"byte_end":8885246,"line_start":2671,"line_end":2671,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885727,"byte_end":8885744,"line_start":2688,"line_end":2688,"column_start":8,"column_end":25},"name":"store_i64_m128i_s","qualname":"::x86_x64::sse2::store_i64_m128i_s","value":"pub fn store_i64_m128i_s(&mut i64, m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i64, 2]);\n let mut b = 0_i64;\n store_i64_m128i_s(&mut b, a);\n assert_eq!(b, 1_i64);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885404,"byte_end":8885448,"line_start":2677,"line_end":2677,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885449,"byte_end":8885456,"line_start":2678,"line_end":2678,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885457,"byte_end":8885480,"line_start":2679,"line_end":2679,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i64, 2]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885481,"byte_end":8885517,"line_start":2680,"line_end":2680,"column_start":1,"column_end":37}},{"value":"/ let mut b = 0_i64;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885518,"byte_end":8885540,"line_start":2681,"line_end":2681,"column_start":1,"column_end":23}},{"value":"/ store_i64_m128i_s(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885541,"byte_end":8885574,"line_start":2682,"line_end":2682,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, 1_i64);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885575,"byte_end":8885600,"line_start":2683,"line_end":2683,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885601,"byte_end":8885608,"line_start":2684,"line_end":2684,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885609,"byte_end":8885626,"line_start":2685,"line_end":2685,"column_start":1,"column_end":18}},{"value":"allow(clippy :: cast_ptr_alignment)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885627,"byte_end":8885663,"line_start":2686,"line_end":2686,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886178,"byte_end":8886198,"line_start":2703,"line_end":2703,"column_start":8,"column_end":28},"name":"store_reversed_m128d","qualname":"::x86_x64::sse2::store_reversed_m128d","value":"pub fn store_reversed_m128d(&mut m128d, m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = zeroed_m128d();\n store_reversed_m128d(&mut b, a);\n let c = b.to_array();\n assert_eq!(c, [12.0, 10.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885839,"byte_end":8885883,"line_start":2692,"line_end":2692,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885884,"byte_end":8885891,"line_start":2693,"line_end":2693,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885892,"byte_end":8885915,"line_start":2694,"line_end":2694,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885916,"byte_end":8885960,"line_start":2695,"line_end":2695,"column_start":1,"column_end":45}},{"value":"/ let mut b = zeroed_m128d();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885961,"byte_end":8885992,"line_start":2696,"line_end":2696,"column_start":1,"column_end":32}},{"value":"/ store_reversed_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8885993,"byte_end":8886029,"line_start":2697,"line_end":2697,"column_start":1,"column_end":37}},{"value":"/ let c = b.to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886030,"byte_end":8886055,"line_start":2698,"line_end":2698,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(c, [12.0, 10.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886056,"byte_end":8886088,"line_start":2699,"line_end":2699,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886089,"byte_end":8886096,"line_start":2700,"line_end":2700,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886097,"byte_end":8886114,"line_start":2701,"line_end":2701,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":803},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886600,"byte_end":8886621,"line_start":2717,"line_end":2717,"column_start":8,"column_end":29},"name":"store_unaligned_m128d","qualname":"::x86_x64::sse2::store_unaligned_m128d","value":"pub fn store_unaligned_m128d(&mut [f64; ], m128d)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([10.0, 12.0]);\n let mut b = [0.0, 0.0];\n store_unaligned_m128d(&mut b, a);\n assert_eq!(b, [10.0, 12.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886290,"byte_end":8886334,"line_start":2707,"line_end":2707,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886335,"byte_end":8886342,"line_start":2708,"line_end":2708,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886343,"byte_end":8886366,"line_start":2709,"line_end":2709,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([10.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886367,"byte_end":8886411,"line_start":2710,"line_end":2710,"column_start":1,"column_end":45}},{"value":"/ let mut b = [0.0, 0.0];","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886412,"byte_end":8886439,"line_start":2711,"line_end":2711,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128d(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886440,"byte_end":8886477,"line_start":2712,"line_end":2712,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [10.0, 12.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886478,"byte_end":8886510,"line_start":2713,"line_end":2713,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886511,"byte_end":8886518,"line_start":2714,"line_end":2714,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886519,"byte_end":8886536,"line_start":2715,"line_end":2715,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887097,"byte_end":8887118,"line_start":2731,"line_end":2731,"column_start":8,"column_end":29},"name":"store_unaligned_m128i","qualname":"::x86_x64::sse2::store_unaligned_m128i","value":"pub fn store_unaligned_m128i(&mut [u8; ], m128i)","parent":null,"children":[],"decl_id":null,"docs":" Stores the value to the reference given.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let mut b = [0_u8; 16];\n store_unaligned_m128i(&mut b, a);\n assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n ```\n","sig":null,"attributes":[{"value":"/ Stores the value to the reference given.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886703,"byte_end":8886747,"line_start":2721,"line_end":2721,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886748,"byte_end":8886755,"line_start":2722,"line_end":2722,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886756,"byte_end":8886779,"line_start":2723,"line_end":2723,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886780,"byte_end":8886863,"line_start":2724,"line_end":2724,"column_start":1,"column_end":84}},{"value":"/ let mut b = [0_u8; 16];","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886864,"byte_end":8886891,"line_start":2725,"line_end":2725,"column_start":1,"column_end":28}},{"value":"/ store_unaligned_m128i(&mut b, a);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886892,"byte_end":8886929,"line_start":2726,"line_end":2726,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(b, [0_u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8886930,"byte_end":8887007,"line_start":2727,"line_end":2727,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887008,"byte_end":8887015,"line_start":2728,"line_end":2728,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887016,"byte_end":8887033,"line_start":2729,"line_end":2729,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887699,"byte_end":8887711,"line_start":2746,"line_end":2746,"column_start":8,"column_end":20},"name":"sub_i8_m128i","qualname":"::x86_x64::sse2::sub_i8_m128i","value":"pub fn sub_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = sub_i8_m128i(a, b).into();\n assert_eq!(c, [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887210,"byte_end":8887250,"line_start":2735,"line_end":2735,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887251,"byte_end":8887258,"line_start":2736,"line_end":2736,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887259,"byte_end":8887282,"line_start":2737,"line_end":2737,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887283,"byte_end":8887366,"line_start":2738,"line_end":2738,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887367,"byte_end":8887458,"line_start":2739,"line_end":2739,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = sub_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887459,"byte_end":8887507,"line_start":2740,"line_end":2740,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, -10, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -112]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887508,"byte_end":8887597,"line_start":2741,"line_end":2741,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887598,"byte_end":8887605,"line_start":2742,"line_end":2742,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887606,"byte_end":8887617,"line_start":2743,"line_end":2743,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887618,"byte_end":8887635,"line_start":2744,"line_end":2744,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":808},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888197,"byte_end":8888210,"line_start":2761,"line_end":2761,"column_start":8,"column_end":21},"name":"sub_i16_m128i","qualname":"::x86_x64::sse2::sub_i16_m128i","value":"pub fn sub_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);\n let c: [i16; 8] = sub_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887789,"byte_end":8887830,"line_start":2750,"line_end":2750,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887831,"byte_end":8887838,"line_start":2751,"line_end":2751,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887839,"byte_end":8887862,"line_start":2752,"line_end":2752,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887863,"byte_end":8887921,"line_start":2753,"line_end":2753,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887922,"byte_end":8887987,"line_start":2754,"line_end":2754,"column_start":1,"column_end":66}},{"value":"/ let c: [i16; 8] = sub_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8887988,"byte_end":8888037,"line_start":2755,"line_end":2755,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, 14, 24, 34, -52]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888038,"byte_end":8888095,"line_start":2756,"line_end":2756,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888096,"byte_end":8888103,"line_start":2757,"line_end":2757,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888104,"byte_end":8888115,"line_start":2758,"line_end":2758,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888116,"byte_end":8888133,"line_start":2759,"line_end":2759,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888637,"byte_end":8888650,"line_start":2776,"line_end":2776,"column_start":8,"column_end":21},"name":"sub_i32_m128i","qualname":"::x86_x64::sse2::sub_i32_m128i","value":"pub fn sub_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i32`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([50, 60, 70, 87]);\n let c: [i32; 4] = sub_i32_m128i(a, b).into();\n assert_eq!(c, [-49, -58, -67, -83]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i32`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888289,"byte_end":8888330,"line_start":2765,"line_end":2765,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888331,"byte_end":8888338,"line_start":2766,"line_end":2766,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888339,"byte_end":8888362,"line_start":2767,"line_end":2767,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888363,"byte_end":8888401,"line_start":2768,"line_end":2768,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([50, 60, 70, 87]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888402,"byte_end":8888444,"line_start":2769,"line_end":2769,"column_start":1,"column_end":43}},{"value":"/ let c: [i32; 4] = sub_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888445,"byte_end":8888494,"line_start":2770,"line_end":2770,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [-49, -58, -67, -83]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888495,"byte_end":8888535,"line_start":2771,"line_end":2771,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888536,"byte_end":8888543,"line_start":2772,"line_end":2772,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888544,"byte_end":8888555,"line_start":2773,"line_end":2773,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888556,"byte_end":8888573,"line_start":2774,"line_end":2774,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889065,"byte_end":8889078,"line_start":2791,"line_end":2791,"column_start":8,"column_end":21},"name":"sub_i64_m128i","qualname":"::x86_x64::sse2::sub_i64_m128i","value":"pub fn sub_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b` with lanes as `i64`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = sub_i64_m128i(a, b).into();\n assert_eq!(c, [9093, 86]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b` with lanes as `i64`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888729,"byte_end":8888770,"line_start":2780,"line_end":2780,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888771,"byte_end":8888778,"line_start":2781,"line_end":2781,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888779,"byte_end":8888802,"line_start":2782,"line_end":2782,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888803,"byte_end":8888841,"line_start":2783,"line_end":2783,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888842,"byte_end":8888882,"line_start":2784,"line_end":2784,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = sub_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888883,"byte_end":8888932,"line_start":2785,"line_end":2785,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(c, [9093, 86]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888933,"byte_end":8888963,"line_start":2786,"line_end":2786,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888964,"byte_end":8888971,"line_start":2787,"line_end":2787,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888972,"byte_end":8888983,"line_start":2788,"line_end":2788,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8888984,"byte_end":8889001,"line_start":2789,"line_end":2789,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889476,"byte_end":8889485,"line_start":2806,"line_end":2806,"column_start":8,"column_end":17},"name":"sub_m128d","qualname":"::x86_x64::sse2::sub_m128d","value":"pub fn sub_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lanewise `a - b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = sub_m128d(a, b).to_array();\n assert_eq!(c, [-8.0, 93.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise `a - b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889157,"byte_end":8889178,"line_start":2795,"line_end":2795,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889179,"byte_end":8889186,"line_start":2796,"line_end":2796,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889187,"byte_end":8889210,"line_start":2797,"line_end":2797,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889211,"byte_end":8889255,"line_start":2798,"line_end":2798,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889256,"byte_end":8889301,"line_start":2799,"line_end":2799,"column_start":1,"column_end":46}},{"value":"/ let c = sub_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889302,"byte_end":8889341,"line_start":2800,"line_end":2800,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(c, [-8.0, 93.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889342,"byte_end":8889374,"line_start":2801,"line_end":2801,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889375,"byte_end":8889382,"line_start":2802,"line_end":2802,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889383,"byte_end":8889394,"line_start":2803,"line_end":2803,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889395,"byte_end":8889412,"line_start":2804,"line_end":2804,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":812},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889908,"byte_end":8889919,"line_start":2821,"line_end":2821,"column_start":8,"column_end":19},"name":"sub_m128d_s","qualname":"::x86_x64::sse2::sub_m128d_s","value":"pub fn sub_m128d_s(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Lowest lane `a - b`, high lane unchanged.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -600.0]);\n let c = sub_m128d_s(a, b).to_array();\n assert_eq!(c, [-8.0, 87.5]);\n ```\n","sig":null,"attributes":[{"value":"/ Lowest lane `a - b`, high lane unchanged.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889561,"byte_end":8889606,"line_start":2810,"line_end":2810,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889607,"byte_end":8889614,"line_start":2811,"line_end":2811,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889615,"byte_end":8889638,"line_start":2812,"line_end":2812,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889639,"byte_end":8889683,"line_start":2813,"line_end":2813,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -600.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889684,"byte_end":8889731,"line_start":2814,"line_end":2814,"column_start":1,"column_end":48}},{"value":"/ let c = sub_m128d_s(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889732,"byte_end":8889773,"line_start":2815,"line_end":2815,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(c, [-8.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889774,"byte_end":8889806,"line_start":2816,"line_end":2816,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889807,"byte_end":8889814,"line_start":2817,"line_end":2817,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889815,"byte_end":8889826,"line_start":2818,"line_end":2818,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889827,"byte_end":8889844,"line_start":2819,"line_end":2819,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":813},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890511,"byte_end":8890534,"line_start":2836,"line_end":2836,"column_start":8,"column_end":31},"name":"sub_saturating_i8_m128i","qualname":"::x86_x64::sse2::sub_saturating_i8_m128i","value":"pub fn sub_saturating_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);\n let b = m128i::from([0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();\n assert_eq!(c, [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8889995,"byte_end":8890046,"line_start":2825,"line_end":2825,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890047,"byte_end":8890054,"line_start":2826,"line_end":2826,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890055,"byte_end":8890078,"line_start":2827,"line_end":2827,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, -128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890079,"byte_end":8890167,"line_start":2828,"line_end":2828,"column_start":1,"column_end":89}},{"value":"/ let b = m128i::from([0_i8, 1, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890168,"byte_end":8890258,"line_start":2829,"line_end":2829,"column_start":1,"column_end":91}},{"value":"/ let c: [i8; 16] = sub_saturating_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890259,"byte_end":8890318,"line_start":2830,"line_end":2830,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [0, -128, 0, -10, 0, -10, 0, -10, 0, -10, 30, -10, -10, 36, -10, -128]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890319,"byte_end":8890409,"line_start":2831,"line_end":2831,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890410,"byte_end":8890417,"line_start":2832,"line_end":2832,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890418,"byte_end":8890429,"line_start":2833,"line_end":2833,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890430,"byte_end":8890447,"line_start":2834,"line_end":2834,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":814},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891052,"byte_end":8891076,"line_start":2851,"line_end":2851,"column_start":8,"column_end":32},"name":"sub_saturating_i16_m128i","qualname":"::x86_x64::sse2::sub_saturating_i16_m128i","value":"pub fn sub_saturating_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `i16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);\n let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();\n assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `i16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890613,"byte_end":8890665,"line_start":2840,"line_end":2840,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890666,"byte_end":8890673,"line_start":2841,"line_end":2841,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890674,"byte_end":8890697,"line_start":2842,"line_end":2842,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890698,"byte_end":8890756,"line_start":2843,"line_end":2843,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([51_i16, 61, 71, 81, i16::MAX, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890757,"byte_end":8890827,"line_start":2844,"line_end":2844,"column_start":1,"column_end":71}},{"value":"/ let c: [i16; 8] = sub_saturating_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890828,"byte_end":8890888,"line_start":2845,"line_end":2845,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [-50, -59, -68, -77, -32768, 24, 34, -52]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890889,"byte_end":8890950,"line_start":2846,"line_end":2846,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890951,"byte_end":8890958,"line_start":2847,"line_end":2847,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890959,"byte_end":8890970,"line_start":2848,"line_end":2848,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8890971,"byte_end":8890988,"line_start":2849,"line_end":2849,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891654,"byte_end":8891677,"line_start":2866,"line_end":2866,"column_start":8,"column_end":31},"name":"sub_saturating_u8_m128i","qualname":"::x86_x64::sse2::sub_saturating_u8_m128i","value":"pub fn sub_saturating_u8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u8`.\n ```\n # use safe_arch::*;\n let a = m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);\n let b = m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);\n let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();\n assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u8`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891156,"byte_end":8891207,"line_start":2855,"line_end":2855,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891208,"byte_end":8891215,"line_start":2856,"line_end":2856,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891216,"byte_end":8891239,"line_start":2857,"line_end":2857,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([10_u8, 255, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891240,"byte_end":8891327,"line_start":2858,"line_end":2858,"column_start":1,"column_end":88}},{"value":"/ let b = m128i::from([1_u8, 1, 2, 13, 4, 15, 6, 17, 8, 19, 20, 21, 22, 23, 24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891328,"byte_end":8891416,"line_start":2859,"line_end":2859,"column_start":1,"column_end":89}},{"value":"/ let c: [u8; 16] = sub_saturating_u8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891417,"byte_end":8891476,"line_start":2860,"line_end":2860,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(c, [9_u8, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891477,"byte_end":8891552,"line_start":2861,"line_end":2861,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891553,"byte_end":8891560,"line_start":2862,"line_end":2862,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891561,"byte_end":8891572,"line_start":2863,"line_end":2863,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891573,"byte_end":8891590,"line_start":2864,"line_end":2864,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":816},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892201,"byte_end":8892225,"line_start":2881,"line_end":2881,"column_start":8,"column_end":32},"name":"sub_saturating_u16_m128i","qualname":"::x86_x64::sse2::sub_saturating_u16_m128i","value":"pub fn sub_saturating_u16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Lanewise saturating `a - b` with lanes as `u16`.\n ```\n # use safe_arch::*;\n let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);\n let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);\n let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();\n assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);\n ```\n","sig":null,"attributes":[{"value":"/ Lanewise saturating `a - b` with lanes as `u16`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891756,"byte_end":8891808,"line_start":2870,"line_end":2870,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891809,"byte_end":8891816,"line_start":2871,"line_end":2871,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891817,"byte_end":8891840,"line_start":2872,"line_end":2872,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([51_u16, 61, 3, 4, u16::MAX, 2, 3, u16::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891841,"byte_end":8891911,"line_start":2873,"line_end":2873,"column_start":1,"column_end":71}},{"value":"/ let b = m128i::from([5_u16, 2, 71, 81, u16::MAX, 26, 37, u16::MIN]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891912,"byte_end":8891984,"line_start":2874,"line_end":2874,"column_start":1,"column_end":73}},{"value":"/ let c: [u16; 8] = sub_saturating_u16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8891985,"byte_end":8892045,"line_start":2875,"line_end":2875,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(c, [46, 59, 0, 0, 0, 0, 0, u16::MAX]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892046,"byte_end":8892099,"line_start":2876,"line_end":2876,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892100,"byte_end":8892107,"line_start":2877,"line_end":2877,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892108,"byte_end":8892119,"line_start":2878,"line_end":2878,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892120,"byte_end":8892137,"line_start":2879,"line_end":2879,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892814,"byte_end":8892834,"line_start":2896,"line_end":2896,"column_start":8,"column_end":28},"name":"unpack_high_i8_m128i","qualname":"::x86_x64::sse2::unpack_high_i8_m128i","value":"pub fn unpack_high_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();\n assert_eq!(c, [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892305,"byte_end":8892362,"line_start":2885,"line_end":2885,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892363,"byte_end":8892370,"line_start":2886,"line_end":2886,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892371,"byte_end":8892394,"line_start":2887,"line_end":2887,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892395,"byte_end":8892478,"line_start":2888,"line_end":2888,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([0_i8, 11, 2, 13, 4, 15, 6, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892479,"byte_end":8892570,"line_start":2889,"line_end":2889,"column_start":1,"column_end":92}},{"value":"/ let c: [i8; 16] = unpack_high_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892571,"byte_end":8892627,"line_start":2890,"line_end":2890,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [8, 8, 9, 19, 10, -20, 11, 21, 12, 22, 13, -23, 14, 24, 15, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892628,"byte_end":8892712,"line_start":2891,"line_end":2891,"column_start":1,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892713,"byte_end":8892720,"line_start":2892,"line_end":2892,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892721,"byte_end":8892732,"line_start":2893,"line_end":2893,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892733,"byte_end":8892750,"line_start":2894,"line_end":2894,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893344,"byte_end":8893365,"line_start":2911,"line_end":2911,"column_start":8,"column_end":29},"name":"unpack_high_i16_m128i","qualname":"::x86_x64::sse2::unpack_high_i16_m128i","value":"pub fn unpack_high_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();\n assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892917,"byte_end":8892975,"line_start":2900,"line_end":2900,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892976,"byte_end":8892983,"line_start":2901,"line_end":2901,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8892984,"byte_end":8893007,"line_start":2902,"line_end":2902,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893008,"byte_end":8893066,"line_start":2903,"line_end":2903,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893067,"byte_end":8893128,"line_start":2904,"line_end":2904,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_high_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893129,"byte_end":8893186,"line_start":2905,"line_end":2905,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [-1, -15, -2, -26, -3, -37, -4, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893187,"byte_end":8893242,"line_start":2906,"line_end":2906,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893243,"byte_end":8893250,"line_start":2907,"line_end":2907,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893251,"byte_end":8893262,"line_start":2908,"line_end":2908,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893263,"byte_end":8893280,"line_start":2909,"line_end":2909,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":819},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893810,"byte_end":8893831,"line_start":2926,"line_end":2926,"column_start":8,"column_end":29},"name":"unpack_high_i32_m128i","qualname":"::x86_x64::sse2::unpack_high_i32_m128i","value":"pub fn unpack_high_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();\n assert_eq!(c, [3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893449,"byte_end":8893507,"line_start":2915,"line_end":2915,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893508,"byte_end":8893515,"line_start":2916,"line_end":2916,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893516,"byte_end":8893539,"line_start":2917,"line_end":2917,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893540,"byte_end":8893578,"line_start":2918,"line_end":2918,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893579,"byte_end":8893617,"line_start":2919,"line_end":2919,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_high_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893618,"byte_end":8893675,"line_start":2920,"line_end":2920,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893676,"byte_end":8893708,"line_start":2921,"line_end":2921,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893709,"byte_end":8893716,"line_start":2922,"line_end":2922,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893717,"byte_end":8893728,"line_start":2923,"line_end":2923,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893729,"byte_end":8893746,"line_start":2924,"line_end":2924,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":820},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894273,"byte_end":8894294,"line_start":2941,"line_end":2941,"column_start":8,"column_end":29},"name":"unpack_high_i64_m128i","qualname":"::x86_x64::sse2::unpack_high_i64_m128i","value":"pub fn unpack_high_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();\n assert_eq!(c, [87, 1]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893915,"byte_end":8893973,"line_start":2930,"line_end":2930,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893974,"byte_end":8893981,"line_start":2931,"line_end":2931,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8893982,"byte_end":8894005,"line_start":2932,"line_end":2932,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894006,"byte_end":8894044,"line_start":2933,"line_end":2933,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894045,"byte_end":8894085,"line_start":2934,"line_end":2934,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_high_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894086,"byte_end":8894143,"line_start":2935,"line_end":2935,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(c, [87, 1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894144,"byte_end":8894171,"line_start":2936,"line_end":2936,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894172,"byte_end":8894179,"line_start":2937,"line_end":2937,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894180,"byte_end":8894191,"line_start":2938,"line_end":2938,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894192,"byte_end":8894209,"line_start":2939,"line_end":2939,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894736,"byte_end":8894753,"line_start":2956,"line_end":2956,"column_start":8,"column_end":25},"name":"unpack_high_m128d","qualname":"::x86_x64::sse2::unpack_high_m128d","value":"pub fn unpack_high_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave high lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_high_m128d(a, b).to_array();\n assert_eq!(c, [87.5, -6.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave high lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894378,"byte_end":8894430,"line_start":2945,"line_end":2945,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894431,"byte_end":8894438,"line_start":2946,"line_end":2946,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894439,"byte_end":8894462,"line_start":2947,"line_end":2947,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894463,"byte_end":8894507,"line_start":2948,"line_end":2948,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894508,"byte_end":8894553,"line_start":2949,"line_end":2949,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_high_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894554,"byte_end":8894601,"line_start":2950,"line_end":2950,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(c, [87.5, -6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894602,"byte_end":8894634,"line_start":2951,"line_end":2951,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894635,"byte_end":8894642,"line_start":2952,"line_end":2952,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894643,"byte_end":8894654,"line_start":2953,"line_end":2953,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894655,"byte_end":8894672,"line_start":2954,"line_end":2954,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895337,"byte_end":8895356,"line_start":2971,"line_end":2971,"column_start":8,"column_end":27},"name":"unpack_low_i8_m128i","qualname":"::x86_x64::sse2::unpack_low_i8_m128i","value":"pub fn unpack_low_i8_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i8` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n let b = m128i::from([12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127]);\n let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();\n assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i8` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894834,"byte_end":8894890,"line_start":2960,"line_end":2960,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894891,"byte_end":8894898,"line_start":2961,"line_end":2961,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894899,"byte_end":8894922,"line_start":2962,"line_end":2962,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([0_i8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8894923,"byte_end":8895006,"line_start":2963,"line_end":2963,"column_start":1,"column_end":84}},{"value":"/ let b = m128i::from([12_i8, 11, 22, 13, 99, 15, 16, 17, 8, 19, -20, 21, 22, -23, 24, 127]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895007,"byte_end":8895102,"line_start":2964,"line_end":2964,"column_start":1,"column_end":96}},{"value":"/ let c: [i8; 16] = unpack_low_i8_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895103,"byte_end":8895158,"line_start":2965,"line_end":2965,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(c, [0, 12, 1, 11, 2, 22, 3, 13, 4, 99, 5, 15, 6, 16, 7, 17]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895159,"byte_end":8895235,"line_start":2966,"line_end":2966,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895236,"byte_end":8895243,"line_start":2967,"line_end":2967,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895244,"byte_end":8895255,"line_start":2968,"line_end":2968,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895256,"byte_end":8895273,"line_start":2969,"line_end":2969,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895853,"byte_end":8895873,"line_start":2986,"line_end":2986,"column_start":8,"column_end":28},"name":"unpack_low_i16_m128i","qualname":"::x86_x64::sse2::unpack_low_i16_m128i","value":"pub fn unpack_low_i16_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i16` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);\n let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);\n let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i16` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895439,"byte_end":8895496,"line_start":2975,"line_end":2975,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895497,"byte_end":8895504,"line_start":2976,"line_end":2976,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895505,"byte_end":8895528,"line_start":2977,"line_end":2977,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1_i16, 2, 3, 4, -1, -2, -3, -4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895529,"byte_end":8895587,"line_start":2978,"line_end":2978,"column_start":1,"column_end":59}},{"value":"/ let b = m128i::from([5_i16, 6, 7, 8, -15, -26, -37, 48]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895588,"byte_end":8895649,"line_start":2979,"line_end":2979,"column_start":1,"column_end":62}},{"value":"/ let c: [i16; 8] = unpack_low_i16_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895650,"byte_end":8895706,"line_start":2980,"line_end":2980,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6, 3, 7, 4, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895707,"byte_end":8895751,"line_start":2981,"line_end":2981,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895752,"byte_end":8895759,"line_start":2982,"line_end":2982,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895760,"byte_end":8895771,"line_start":2983,"line_end":2983,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895772,"byte_end":8895789,"line_start":2984,"line_end":2984,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896316,"byte_end":8896336,"line_start":3001,"line_end":3001,"column_start":8,"column_end":28},"name":"unpack_low_i32_m128i","qualname":"::x86_x64::sse2::unpack_low_i32_m128i","value":"pub fn unpack_low_i32_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i32` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 2, 3, 4]);\n let b = m128i::from([5, 6, 7, 8]);\n let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();\n assert_eq!(c, [1, 5, 2, 6]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i32` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8895957,"byte_end":8896014,"line_start":2990,"line_end":2990,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896015,"byte_end":8896022,"line_start":2991,"line_end":2991,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896023,"byte_end":8896046,"line_start":2992,"line_end":2992,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 2, 3, 4]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896047,"byte_end":8896085,"line_start":2993,"line_end":2993,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([5, 6, 7, 8]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896086,"byte_end":8896124,"line_start":2994,"line_end":2994,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = unpack_low_i32_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896125,"byte_end":8896181,"line_start":2995,"line_end":2995,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [1, 5, 2, 6]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896182,"byte_end":8896214,"line_start":2996,"line_end":2996,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896215,"byte_end":8896222,"line_start":2997,"line_end":2997,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896223,"byte_end":8896234,"line_start":2998,"line_end":2998,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896235,"byte_end":8896252,"line_start":2999,"line_end":2999,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":825},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896780,"byte_end":8896800,"line_start":3016,"line_end":3016,"column_start":8,"column_end":28},"name":"unpack_low_i64_m128i","qualname":"::x86_x64::sse2::unpack_low_i64_m128i","value":"pub fn unpack_low_i64_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low `i64` lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([92_i64, 87]);\n let b = m128i::from([-9001_i64, 1]);\n let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();\n assert_eq!(c, [92, -9001]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low `i64` lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896420,"byte_end":8896477,"line_start":3005,"line_end":3005,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896478,"byte_end":8896485,"line_start":3006,"line_end":3006,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896486,"byte_end":8896509,"line_start":3007,"line_end":3007,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([92_i64, 87]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896510,"byte_end":8896548,"line_start":3008,"line_end":3008,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([-9001_i64, 1]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896549,"byte_end":8896589,"line_start":3009,"line_end":3009,"column_start":1,"column_end":41}},{"value":"/ let c: [i64; 2] = unpack_low_i64_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896590,"byte_end":8896646,"line_start":3010,"line_end":3010,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(c, [92, -9001]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896647,"byte_end":8896678,"line_start":3011,"line_end":3011,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896679,"byte_end":8896686,"line_start":3012,"line_end":3012,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896687,"byte_end":8896698,"line_start":3013,"line_end":3013,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896699,"byte_end":8896716,"line_start":3014,"line_end":3014,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897241,"byte_end":8897257,"line_start":3031,"line_end":3031,"column_start":8,"column_end":24},"name":"unpack_low_m128d","qualname":"::x86_x64::sse2::unpack_low_m128d","value":"pub fn unpack_low_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Unpack and interleave low lanes of `a` and `b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([92.0, 87.5]);\n let b = m128d::from_array([100.0, -6.0]);\n let c = unpack_low_m128d(a, b).to_array();\n assert_eq!(c, [92.0, 100.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Unpack and interleave low lanes of `a` and `b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896884,"byte_end":8896935,"line_start":3020,"line_end":3020,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896936,"byte_end":8896943,"line_start":3021,"line_end":3021,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896944,"byte_end":8896967,"line_start":3022,"line_end":3022,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([92.0, 87.5]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8896968,"byte_end":8897012,"line_start":3023,"line_end":3023,"column_start":1,"column_end":45}},{"value":"/ let b = m128d::from_array([100.0, -6.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897013,"byte_end":8897058,"line_start":3024,"line_end":3024,"column_start":1,"column_end":46}},{"value":"/ let c = unpack_low_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897059,"byte_end":8897105,"line_start":3025,"line_end":3025,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(c, [92.0, 100.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897106,"byte_end":8897139,"line_start":3026,"line_end":3026,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897140,"byte_end":8897147,"line_start":3027,"line_end":3027,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897148,"byte_end":8897159,"line_start":3028,"line_end":3028,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897160,"byte_end":8897177,"line_start":3029,"line_end":3029,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":827},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897652,"byte_end":8897664,"line_start":3046,"line_end":3046,"column_start":8,"column_end":20},"name":"bitxor_m128d","qualname":"::x86_x64::sse2::bitxor_m128d","value":"pub fn bitxor_m128d(m128d, m128d) -> m128d","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128d::from_array([1.0, 0.0]);\n let b = m128d::from_array([1.0, 1.0]);\n let c = bitxor_m128d(a, b).to_array();\n assert_eq!(c, [0.0, 1.0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897338,"byte_end":8897358,"line_start":3035,"line_end":3035,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897359,"byte_end":8897366,"line_start":3036,"line_end":3036,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897367,"byte_end":8897390,"line_start":3037,"line_end":3037,"column_start":1,"column_end":24}},{"value":"/ let a = m128d::from_array([1.0, 0.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897391,"byte_end":8897433,"line_start":3038,"line_end":3038,"column_start":1,"column_end":43}},{"value":"/ let b = m128d::from_array([1.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897434,"byte_end":8897476,"line_start":3039,"line_end":3039,"column_start":1,"column_end":43}},{"value":"/ let c = bitxor_m128d(a, b).to_array();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897477,"byte_end":8897519,"line_start":3040,"line_end":3040,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(c, [0.0, 1.0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897520,"byte_end":8897550,"line_start":3041,"line_end":3041,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897551,"byte_end":8897558,"line_start":3042,"line_end":3042,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897559,"byte_end":8897570,"line_start":3043,"line_end":3043,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897571,"byte_end":8897588,"line_start":3044,"line_end":3044,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":828},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8898054,"byte_end":8898066,"line_start":3061,"line_end":3061,"column_start":8,"column_end":20},"name":"bitxor_m128i","qualname":"::x86_x64::sse2::bitxor_m128i","value":"pub fn bitxor_m128i(m128i, m128i) -> m128i","parent":null,"children":[],"decl_id":null,"docs":" Bitwise `a ^ b`.\n ```\n # use safe_arch::*;\n let a = m128i::from([1, 0, 1, 0]);\n let b = m128i::from([1, 1, 0, 0]);\n let c: [i32; 4] = bitxor_m128i(a, b).into();\n assert_eq!(c, [0, 1, 1, 0]);\n ```\n","sig":null,"attributes":[{"value":"/ Bitwise `a ^ b`.","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897740,"byte_end":8897760,"line_start":3050,"line_end":3050,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897761,"byte_end":8897768,"line_start":3051,"line_end":3051,"column_start":1,"column_end":8}},{"value":"/ # use safe_arch::*;","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897769,"byte_end":8897792,"line_start":3052,"line_end":3052,"column_start":1,"column_end":24}},{"value":"/ let a = m128i::from([1, 0, 1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897793,"byte_end":8897831,"line_start":3053,"line_end":3053,"column_start":1,"column_end":39}},{"value":"/ let b = m128i::from([1, 1, 0, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897832,"byte_end":8897870,"line_start":3054,"line_end":3054,"column_start":1,"column_end":39}},{"value":"/ let c: [i32; 4] = bitxor_m128i(a, b).into();","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897871,"byte_end":8897919,"line_start":3055,"line_end":3055,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(c, [0, 1, 1, 0]);","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897920,"byte_end":8897952,"line_start":3056,"line_end":3056,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897953,"byte_end":8897960,"line_start":3057,"line_end":3057,"column_start":1,"column_end":8}},{"value":"must_use","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897961,"byte_end":8897972,"line_start":3058,"line_end":3058,"column_start":1,"column_end":12}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8897973,"byte_end":8897990,"line_start":3059,"line_end":3059,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":10541,"byte_end":10563,"line_start":233,"line_end":233,"column_start":10,"column_end":32},"name":"read_timestamp_counter","qualname":"::x86_x64::read_timestamp_counter","value":"pub fn read_timestamp_counter() -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":11408,"byte_end":11432,"line_start":253,"line_end":253,"column_start":10,"column_end":34},"name":"read_timestamp_counter_p","qualname":"::x86_x64::read_timestamp_counter_p","value":"pub fn read_timestamp_counter_p(&mut u32) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Reads the CPU's timestamp counter value and store the processor signature.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":11723,"byte_end":11736,"line_start":265,"line_end":265,"column_start":10,"column_end":23},"name":"byte_swap_i32","qualname":"::x86_x64::byte_swap_i32","value":"pub fn byte_swap_i32(i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 32-bit value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":12067,"byte_end":12080,"line_start":278,"line_end":278,"column_start":10,"column_end":23},"name":"byte_swap_i64","qualname":"::x86_x64::byte_swap_i64","value":"pub fn byte_swap_i64(i64) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Swap the bytes of the given 64-bit value.","sig":null,"attributes":[{"value":"cfg(target_arch = \"x86_64\")","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":12029,"byte_end":12057,"line_start":277,"line_end":277,"column_start":3,"column_end":31}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719336,"byte_end":8719340,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719403,"byte_end":8719407,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719493,"byte_end":8719497,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719507,"byte_end":8719511,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720529,"byte_end":8720533,"line_start":66,"line_end":66,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720628,"byte_end":8720632,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720654,"byte_end":8720658,"line_start":75,"line_end":75,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720786,"byte_end":8720790,"line_start":83,"line_end":83,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8721388,"byte_end":8721392,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8721710,"byte_end":8721714,"line_start":121,"line_end":121,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8722073,"byte_end":8722077,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8722442,"byte_end":8722446,"line_start":149,"line_end":149,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8722767,"byte_end":8722771,"line_start":163,"line_end":163,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8723092,"byte_end":8723096,"line_start":177,"line_end":177,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8723465,"byte_end":8723469,"line_start":191,"line_end":191,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8723835,"byte_end":8723839,"line_start":205,"line_end":205,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725069,"byte_end":8725074,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725137,"byte_end":8725142,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725229,"byte_end":8725234,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725244,"byte_end":8725249,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726264,"byte_end":8726269,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726364,"byte_end":8726369,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726391,"byte_end":8726396,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726524,"byte_end":8726529,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8727129,"byte_end":8727134,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8727549,"byte_end":8727554,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8728000,"byte_end":8728005,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8728467,"byte_end":8728472,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8728887,"byte_end":8728892,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8729307,"byte_end":8729312,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8729780,"byte_end":8729785,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8730250,"byte_end":8730255,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731762,"byte_end":8731767,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731830,"byte_end":8731835,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731922,"byte_end":8731927,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731947,"byte_end":8731952,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8732047,"byte_end":8732052,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8732074,"byte_end":8732079,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8732217,"byte_end":8732222,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8732508,"byte_end":8732513,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8732810,"byte_end":8732815,"line_start":81,"line_end":81,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8733101,"byte_end":8733106,"line_start":97,"line_end":97,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8733403,"byte_end":8733408,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8733694,"byte_end":8733699,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8733996,"byte_end":8734001,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8734287,"byte_end":8734292,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8734586,"byte_end":8734591,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8734861,"byte_end":8734866,"line_start":199,"line_end":199,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8735201,"byte_end":8735206,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8735667,"byte_end":8735672,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8736166,"byte_end":8736171,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8736625,"byte_end":8736630,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8737096,"byte_end":8737101,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8737567,"byte_end":8737572,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8738030,"byte_end":8738035,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8738490,"byte_end":8738495,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739964,"byte_end":8739968,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740031,"byte_end":8740035,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740121,"byte_end":8740125,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740135,"byte_end":8740139,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741153,"byte_end":8741157,"line_start":64,"line_end":64,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741252,"byte_end":8741256,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741278,"byte_end":8741282,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741410,"byte_end":8741414,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8742012,"byte_end":8742016,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8742498,"byte_end":8742502,"line_start":124,"line_end":124,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8743003,"byte_end":8743007,"line_start":143,"line_end":143,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8743516,"byte_end":8743520,"line_start":162,"line_end":162,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8744001,"byte_end":8744005,"line_start":181,"line_end":181,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8744486,"byte_end":8744490,"line_start":200,"line_end":200,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8745003,"byte_end":8745007,"line_start":219,"line_end":219,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8745517,"byte_end":8745521,"line_start":238,"line_end":238,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746934,"byte_end":8746939,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747002,"byte_end":8747007,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747094,"byte_end":8747099,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747109,"byte_end":8747114,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748129,"byte_end":8748134,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748229,"byte_end":8748234,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748256,"byte_end":8748261,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748389,"byte_end":8748394,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748994,"byte_end":8748999,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8749414,"byte_end":8749419,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8749865,"byte_end":8749870,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8750332,"byte_end":8750337,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8750752,"byte_end":8750757,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8751172,"byte_end":8751177,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8751645,"byte_end":8751650,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8752115,"byte_end":8752120,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753627,"byte_end":8753632,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753695,"byte_end":8753700,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753787,"byte_end":8753792,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753812,"byte_end":8753817,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753912,"byte_end":8753917,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753939,"byte_end":8753944,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8754082,"byte_end":8754087,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8754373,"byte_end":8754378,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8754676,"byte_end":8754681,"line_start":81,"line_end":81,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8754970,"byte_end":8754975,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8755274,"byte_end":8755279,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8755565,"byte_end":8755570,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8755867,"byte_end":8755872,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8756158,"byte_end":8756163,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8756462,"byte_end":8756467,"line_start":183,"line_end":183,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8756752,"byte_end":8756757,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8757102,"byte_end":8757107,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8757580,"byte_end":8757585,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8758091,"byte_end":8758096,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8758562,"byte_end":8758567,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8759053,"byte_end":8759058,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8759544,"byte_end":8759549,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8760019,"byte_end":8760024,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8760491,"byte_end":8760496,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800119,"byte_end":8800123,"line_start":1295,"line_end":1295,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800267,"byte_end":8800271,"line_start":1303,"line_end":1303,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800382,"byte_end":8800386,"line_start":1310,"line_end":1310,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800539,"byte_end":8800543,"line_start":1318,"line_end":1318,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800656,"byte_end":8800660,"line_start":1325,"line_end":1325,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800810,"byte_end":8800814,"line_start":1333,"line_end":1333,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800927,"byte_end":8800931,"line_start":1340,"line_end":1340,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801084,"byte_end":8801088,"line_start":1348,"line_end":1348,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801199,"byte_end":8801203,"line_start":1355,"line_end":1355,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801347,"byte_end":8801351,"line_start":1363,"line_end":1363,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801459,"byte_end":8801463,"line_start":1370,"line_end":1370,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801607,"byte_end":8801611,"line_start":1378,"line_end":1378,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801719,"byte_end":8801723,"line_start":1385,"line_end":1385,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801861,"byte_end":8801865,"line_start":1394,"line_end":1394,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8802228,"byte_end":8802232,"line_start":1408,"line_end":1408,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8802376,"byte_end":8802380,"line_start":1416,"line_end":1416,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8802494,"byte_end":8802498,"line_start":1423,"line_end":1423,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8898797,"byte_end":8898802,"line_start":3078,"line_end":3078,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8898947,"byte_end":8898952,"line_start":3086,"line_end":3086,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899063,"byte_end":8899068,"line_start":3093,"line_end":3093,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":835},{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899222,"byte_end":8899227,"line_start":3101,"line_end":3101,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899340,"byte_end":8899345,"line_start":3108,"line_end":3108,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899496,"byte_end":8899501,"line_start":3116,"line_end":3116,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899614,"byte_end":8899619,"line_start":3123,"line_end":3123,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899773,"byte_end":8899778,"line_start":3131,"line_end":3131,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899889,"byte_end":8899894,"line_start":3138,"line_end":3138,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900039,"byte_end":8900044,"line_start":3146,"line_end":3146,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900152,"byte_end":8900157,"line_start":3153,"line_end":3153,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900302,"byte_end":8900307,"line_start":3161,"line_end":3161,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900415,"byte_end":8900420,"line_start":3168,"line_end":3168,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900560,"byte_end":8900565,"line_start":3177,"line_end":3177,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900929,"byte_end":8900934,"line_start":3191,"line_end":3191,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8901079,"byte_end":8901084,"line_start":3199,"line_end":3199,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8901198,"byte_end":8901203,"line_start":3206,"line_end":3206,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8901613,"byte_end":8901618,"line_start":3219,"line_end":3219,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8901772,"byte_end":8901777,"line_start":3227,"line_end":3227,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8901890,"byte_end":8901895,"line_start":3234,"line_end":3234,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8902046,"byte_end":8902051,"line_start":3242,"line_end":3242,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8902164,"byte_end":8902169,"line_start":3249,"line_end":3249,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8902323,"byte_end":8902328,"line_start":3257,"line_end":3257,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8902439,"byte_end":8902444,"line_start":3264,"line_end":3264,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8902796,"byte_end":8902801,"line_start":3278,"line_end":3278,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8903145,"byte_end":8903150,"line_start":3288,"line_end":3288,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\lib.rs","byte_start":7091,"byte_end":7109,"line_start":133,"line_end":133,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719336,"byte_end":8719340,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719403,"byte_end":8719407,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719493,"byte_end":8719497,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":95},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8719507,"byte_end":8719511,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":95},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720529,"byte_end":8720533,"line_start":66,"line_end":66,"column_start":16,"column_end":20},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2474}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720628,"byte_end":8720632,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2863}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720654,"byte_end":8720658,"line_start":75,"line_end":75,"column_start":18,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2831}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8720786,"byte_end":8720790,"line_start":83,"line_end":83,"column_start":25,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8721388,"byte_end":8721392,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8894}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8721710,"byte_end":8721714,"line_start":121,"line_end":121,"column_start":18,"column_end":22},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8901}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8722073,"byte_end":8722077,"line_start":135,"line_end":135,"column_start":17,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8905}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8722442,"byte_end":8722446,"line_start":149,"line_end":149,"column_start":19,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8913}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8722767,"byte_end":8722771,"line_start":163,"line_end":163,"column_start":19,"column_end":23},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8915}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8723092,"byte_end":8723096,"line_start":177,"line_end":177,"column_start":19,"column_end":23},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8907}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8723465,"byte_end":8723469,"line_start":191,"line_end":191,"column_start":19,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8909}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128_.rs","byte_start":8723835,"byte_end":8723839,"line_start":205,"line_end":205,"column_start":16,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":8903}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725069,"byte_end":8725074,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725137,"byte_end":8725142,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725229,"byte_end":8725234,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":141},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8725244,"byte_end":8725249,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726264,"byte_end":8726269,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2474}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726364,"byte_end":8726369,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2863}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726391,"byte_end":8726396,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2831}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8726524,"byte_end":8726529,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8727129,"byte_end":8727134,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8894}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8727549,"byte_end":8727554,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8901}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8728000,"byte_end":8728005,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8905}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8728467,"byte_end":8728472,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8913}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8728887,"byte_end":8728892,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8915}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8729307,"byte_end":8729312,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8907}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8729780,"byte_end":8729785,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8909}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128d_.rs","byte_start":8730250,"byte_end":8730255,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":8903}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731762,"byte_end":8731767,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731830,"byte_end":8731835,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731922,"byte_end":8731927,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":187},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8731947,"byte_end":8731952,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2474}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8732047,"byte_end":8732052,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2863}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8732074,"byte_end":8732079,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2831}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8732217,"byte_end":8732222,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8732508,"byte_end":8732513,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8732810,"byte_end":8732815,"line_start":81,"line_end":81,"column_start":25,"column_end":30},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8733101,"byte_end":8733106,"line_start":97,"line_end":97,"column_start":25,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8733403,"byte_end":8733408,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8733694,"byte_end":8733699,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8733996,"byte_end":8734001,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8734287,"byte_end":8734292,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8734586,"byte_end":8734591,"line_start":183,"line_end":183,"column_start":21,"column_end":26},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8734861,"byte_end":8734866,"line_start":199,"line_end":199,"column_start":21,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8735201,"byte_end":8735206,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8894}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8735667,"byte_end":8735672,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8901}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8736166,"byte_end":8736171,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8905}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8736625,"byte_end":8736630,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8913}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8737096,"byte_end":8737101,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8915}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8737567,"byte_end":8737572,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8907}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8738030,"byte_end":8738035,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8909}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m128i_.rs","byte_start":8738490,"byte_end":8738495,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":8903}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8739964,"byte_end":8739968,"line_start":19,"line_end":19,"column_start":36,"column_end":40},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740031,"byte_end":8740035,"line_start":21,"line_end":21,"column_start":31,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740121,"byte_end":8740125,"line_start":23,"line_end":23,"column_start":54,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":289},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8740135,"byte_end":8740139,"line_start":25,"line_end":25,"column_start":6,"column_end":10},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741153,"byte_end":8741157,"line_start":64,"line_end":64,"column_start":16,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2474}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741252,"byte_end":8741256,"line_start":71,"line_end":71,"column_start":15,"column_end":19},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2863}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741278,"byte_end":8741282,"line_start":73,"line_end":73,"column_start":18,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2831}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8741410,"byte_end":8741414,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8742012,"byte_end":8742016,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8894}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8742498,"byte_end":8742502,"line_start":124,"line_end":124,"column_start":18,"column_end":22},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8901}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8743003,"byte_end":8743007,"line_start":143,"line_end":143,"column_start":17,"column_end":21},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8905}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8743516,"byte_end":8743520,"line_start":162,"line_end":162,"column_start":19,"column_end":23},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8913}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8744001,"byte_end":8744005,"line_start":181,"line_end":181,"column_start":19,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8915}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8744486,"byte_end":8744490,"line_start":200,"line_end":200,"column_start":19,"column_end":23},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8907}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8745003,"byte_end":8745007,"line_start":219,"line_end":219,"column_start":19,"column_end":23},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8909}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256_.rs","byte_start":8745517,"byte_end":8745521,"line_start":238,"line_end":238,"column_start":16,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":289},"to":{"krate":1,"index":8903}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8746934,"byte_end":8746939,"line_start":19,"line_end":19,"column_start":36,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747002,"byte_end":8747007,"line_start":21,"line_end":21,"column_start":31,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747094,"byte_end":8747099,"line_start":23,"line_end":23,"column_start":55,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":335},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8747109,"byte_end":8747114,"line_start":25,"line_end":25,"column_start":6,"column_end":11},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748129,"byte_end":8748134,"line_start":66,"line_end":66,"column_start":16,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2474}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748229,"byte_end":8748234,"line_start":73,"line_end":73,"column_start":15,"column_end":20},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2863}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748256,"byte_end":8748261,"line_start":75,"line_end":75,"column_start":18,"column_end":23},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2831}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748389,"byte_end":8748394,"line_start":83,"line_end":83,"column_start":25,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8748994,"byte_end":8748999,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8894}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8749414,"byte_end":8749419,"line_start":124,"line_end":124,"column_start":18,"column_end":23},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8901}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8749865,"byte_end":8749870,"line_start":141,"line_end":141,"column_start":17,"column_end":22},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8905}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8750332,"byte_end":8750337,"line_start":158,"line_end":158,"column_start":19,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8913}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8750752,"byte_end":8750757,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8915}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8751172,"byte_end":8751177,"line_start":192,"line_end":192,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8907}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8751645,"byte_end":8751650,"line_start":209,"line_end":209,"column_start":19,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8909}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256d_.rs","byte_start":8752115,"byte_end":8752120,"line_start":226,"line_end":226,"column_start":16,"column_end":21},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":335},"to":{"krate":1,"index":8903}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753627,"byte_end":8753632,"line_start":22,"line_end":22,"column_start":36,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":19}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753695,"byte_end":8753700,"line_start":24,"line_end":24,"column_start":31,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":115}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753787,"byte_end":8753792,"line_start":26,"line_end":26,"column_start":55,"column_end":60},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":381},"to":{"krate":4,"index":171}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753812,"byte_end":8753817,"line_start":28,"line_end":28,"column_start":16,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2474}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753912,"byte_end":8753917,"line_start":35,"line_end":35,"column_start":15,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2863}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8753939,"byte_end":8753944,"line_start":37,"line_end":37,"column_start":18,"column_end":23},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2831}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8754082,"byte_end":8754087,"line_start":47,"line_end":47,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8754373,"byte_end":8754378,"line_start":63,"line_end":63,"column_start":25,"column_end":30},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8754676,"byte_end":8754681,"line_start":81,"line_end":81,"column_start":26,"column_end":31},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8754970,"byte_end":8754975,"line_start":97,"line_end":97,"column_start":26,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8755274,"byte_end":8755279,"line_start":115,"line_end":115,"column_start":25,"column_end":30},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8755565,"byte_end":8755570,"line_start":131,"line_end":131,"column_start":25,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8755867,"byte_end":8755872,"line_start":149,"line_end":149,"column_start":25,"column_end":30},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8756158,"byte_end":8756163,"line_start":165,"line_end":165,"column_start":25,"column_end":30},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8756462,"byte_end":8756467,"line_start":183,"line_end":183,"column_start":26,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8756752,"byte_end":8756757,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":2759}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8757102,"byte_end":8757107,"line_start":219,"line_end":219,"column_start":16,"column_end":21},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8894}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8757580,"byte_end":8757585,"line_start":238,"line_end":238,"column_start":18,"column_end":23},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8901}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8758091,"byte_end":8758096,"line_start":257,"line_end":257,"column_start":17,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8905}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8758562,"byte_end":8758567,"line_start":276,"line_end":276,"column_start":19,"column_end":24},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8913}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8759053,"byte_end":8759058,"line_start":295,"line_end":295,"column_start":19,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8915}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8759544,"byte_end":8759549,"line_start":314,"line_end":314,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8907}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8760019,"byte_end":8760024,"line_start":333,"line_end":333,"column_start":19,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8909}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\m256i_.rs","byte_start":8760491,"byte_end":8760496,"line_start":352,"line_end":352,"column_start":16,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":8903}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800119,"byte_end":8800123,"line_start":1295,"line_end":1295,"column_start":14,"column_end":18},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2920}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800267,"byte_end":8800271,"line_start":1303,"line_end":1303,"column_start":20,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2951}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800382,"byte_end":8800386,"line_start":1310,"line_end":1310,"column_start":17,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2976}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800539,"byte_end":8800543,"line_start":1318,"line_end":1318,"column_start":23,"column_end":27},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3003}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800656,"byte_end":8800660,"line_start":1325,"line_end":1325,"column_start":16,"column_end":20},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2981}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800810,"byte_end":8800814,"line_start":1333,"line_end":1333,"column_start":22,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3007}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8800927,"byte_end":8800931,"line_start":1340,"line_end":1340,"column_start":17,"column_end":21},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2986}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801084,"byte_end":8801088,"line_start":1348,"line_end":1348,"column_start":23,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3011}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801199,"byte_end":8801203,"line_start":1355,"line_end":1355,"column_start":14,"column_end":18},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2935}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801347,"byte_end":8801351,"line_start":1363,"line_end":1363,"column_start":20,"column_end":24},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801459,"byte_end":8801463,"line_start":1370,"line_end":1370,"column_start":14,"column_end":18},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801607,"byte_end":8801611,"line_start":1378,"line_end":1378,"column_start":20,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2959}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801719,"byte_end":8801723,"line_start":1385,"line_end":1385,"column_start":14,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2947}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8801861,"byte_end":8801865,"line_start":1394,"line_end":1394,"column_start":14,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2972}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8802228,"byte_end":8802232,"line_start":1408,"line_end":1408,"column_start":14,"column_end":18},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2925}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8802376,"byte_end":8802380,"line_start":1416,"line_end":1416,"column_start":20,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2955}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse.rs","byte_start":8802494,"byte_end":8802498,"line_start":1423,"line_end":1423,"column_start":20,"column_end":24},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":2504}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8898797,"byte_end":8898802,"line_start":3078,"line_end":3078,"column_start":14,"column_end":19},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2920}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8898947,"byte_end":8898952,"line_start":3086,"line_end":3086,"column_start":20,"column_end":25},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2951}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899063,"byte_end":8899068,"line_start":3093,"line_end":3093,"column_start":17,"column_end":22},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2976}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899222,"byte_end":8899227,"line_start":3101,"line_end":3101,"column_start":23,"column_end":28},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3003}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899340,"byte_end":8899345,"line_start":3108,"line_end":3108,"column_start":16,"column_end":21},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2981}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899496,"byte_end":8899501,"line_start":3116,"line_end":3116,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3007}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899614,"byte_end":8899619,"line_start":3123,"line_end":3123,"column_start":17,"column_end":22},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2986}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899773,"byte_end":8899778,"line_start":3131,"line_end":3131,"column_start":23,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":3011}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8899889,"byte_end":8899894,"line_start":3138,"line_end":3138,"column_start":14,"column_end":19},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2935}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900039,"byte_end":8900044,"line_start":3146,"line_end":3146,"column_start":20,"column_end":25},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2963}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900152,"byte_end":8900157,"line_start":3153,"line_end":3153,"column_start":14,"column_end":19},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2930}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900302,"byte_end":8900307,"line_start":3161,"line_end":3161,"column_start":20,"column_end":25},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2959}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900415,"byte_end":8900420,"line_start":3168,"line_end":3168,"column_start":14,"column_end":19},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2947}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900560,"byte_end":8900565,"line_start":3177,"line_end":3177,"column_start":14,"column_end":19},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2972}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8900929,"byte_end":8900934,"line_start":3191,"line_end":3191,"column_start":14,"column_end":19},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2925}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8901079,"byte_end":8901084,"line_start":3199,"line_end":3199,"column_start":20,"column_end":25},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2955}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8901198,"byte_end":8901203,"line_start":3206,"line_end":3206,"column_start":20,"column_end":25},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":141},"to":{"krate":1,"index":2504}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8901613,"byte_end":8901618,"line_start":3219,"line_end":3219,"column_start":17,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2976}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8901772,"byte_end":8901777,"line_start":3227,"line_end":3227,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3003}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8901890,"byte_end":8901895,"line_start":3234,"line_end":3234,"column_start":16,"column_end":21},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2981}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8902046,"byte_end":8902051,"line_start":3242,"line_end":3242,"column_start":22,"column_end":27},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3007}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8902164,"byte_end":8902169,"line_start":3249,"line_end":3249,"column_start":17,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2986}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8902323,"byte_end":8902328,"line_start":3257,"line_end":3257,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":3011}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8902439,"byte_end":8902444,"line_start":3264,"line_end":3264,"column_start":14,"column_end":19},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2972}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8902796,"byte_end":8902801,"line_start":3278,"line_end":3278,"column_start":20,"column_end":25},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2504}},{"span":{"file_name":"C:\\Users\\joesc\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\safe_arch-0.6.0\\src\\x86_x64\\sse2.rs","byte_start":8903145,"byte_end":8903150,"line_start":3288,"line_end":3288,"column_start":13,"column_end":18},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":187},"to":{"krate":1,"index":2509}}]}
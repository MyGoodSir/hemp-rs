{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1","program":"C:\\Users\\Joe\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","wgpu","--edition=2018","C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=dbae262a32982d22","-C","extra-filename=-dbae262a32982d22","--out-dir","c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps","-L","dependency=c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps","--extern","arrayvec=c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\libarrayvec-62d9150737a165b7.rmeta","--extern","log=c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\liblog-a181f3b2b1f410d0.rmeta","--extern","parking_lot=c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\libparking_lot-fd92e3b42d278193.rmeta","--extern","raw_window_handle=c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\libraw_window_handle-1b1c125ca0cbd4f1.rmeta","--extern","smallvec=c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\libsmallvec-aaf55bdcfeddb9cd.rmeta","--extern","wgc=c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\libwgpu_core-75a15410377dd73d.rmeta","--extern","hal=c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\libwgpu_hal-4f46af09fa4bc595.rmeta","--extern","wgt=c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\libwgpu_types-4cbff36d9ceb1f8b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Joe\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\dev\\hemp-rs\\hemp\\target\\rls\\debug\\deps\\libwgpu-dbae262a32982d22.rmeta"},"prelude":{"crate_id":{"name":"wgpu","disambiguator":[5190822300643022630,3825287070731797104]},"crate_root":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src","external_crates":[{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[902711862199739234,15082167224296373374]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5048311760381386034,12753961808535803278]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[847775214756591688,12437863933651081164]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18098153966720408130,4102567439342721650]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14085577876822856882,15393158987199036233]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[3188366355873518403,14471389999965490426]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10237517513868340142,18396708545822173986]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17305999185247584930,14125623615750666193]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7451980452763147359,4800032867518142595]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[842541340887862638,17591716377464122790]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14650435931294811010,18006816567319070280]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[16073749092757737146,5785406473963590530]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[9426002052484834533,14451905897035318657]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":14,"id":{"name":"arrayvec","disambiguator":[3299256277923563071,12844528022150085794]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":15,"id":{"name":"parking_lot","disambiguator":[2233486445298982791,7573187130904671188]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":16,"id":{"name":"instant","disambiguator":[934689599221008410,16516710509894900387]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":17,"id":{"name":"cfg_if","disambiguator":[5920805980929341637,15126950819943592384]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":18,"id":{"name":"lock_api","disambiguator":[1362090492698933700,1524326129803667476]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":19,"id":{"name":"scopeguard","disambiguator":[9175476050709573502,17932200134425875733]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":20,"id":{"name":"parking_lot_core","disambiguator":[3950719210505249457,8675729405198765510]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":21,"id":{"name":"smallvec","disambiguator":[9002179266611112948,6795740656492205194]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":22,"id":{"name":"winapi","disambiguator":[15239778777165128881,6134522914628284848]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":23,"id":{"name":"wgpu_core","disambiguator":[457654894155958046,12686448028377607919]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":24,"id":{"name":"thiserror","disambiguator":[9176953844832465542,3258731485600450133]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":25,"id":{"name":"thiserror_impl","disambiguator":[11621603685369047586,13220955717712708493]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":26,"id":{"name":"wgpu_hal","disambiguator":[286839711122278059,498423456101690382]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","num":27,"id":{"name":"wgpu_types","disambiguator":[6609674701168208684,6835152609791131785]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":28,"id":{"name":"bitflags","disambiguator":[15386412521590315247,4179434029902708510]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":29,"id":{"name":"bit_set","disambiguator":[5483980738923589461,476884092140697355]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":30,"id":{"name":"bit_vec","disambiguator":[10907707286489577547,17953352747816008068]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":31,"id":{"name":"range_alloc","disambiguator":[14583931490300615272,297134904635549564]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":32,"id":{"name":"naga","disambiguator":[6872615121491818008,3252460134748623842]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":33,"id":{"name":"spirv","disambiguator":[15227803056629475325,16793846582622930101]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":34,"id":{"name":"num_traits","disambiguator":[3741071117152297530,8997687924062032132]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":35,"id":{"name":"codespan_reporting","disambiguator":[13903991102862515505,12485063812135695203]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":36,"id":{"name":"termcolor","disambiguator":[5785254903746105129,14736297574007926755]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":37,"id":{"name":"winapi_util","disambiguator":[16280062441316249639,816964595730095528]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":38,"id":{"name":"unicode_width","disambiguator":[9272976851789570346,14765808742037152961]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":39,"id":{"name":"log","disambiguator":[7372147372538394700,1849684577154272793]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":40,"id":{"name":"fxhash","disambiguator":[13870433956816090613,4920123634547164333]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":41,"id":{"name":"byteorder","disambiguator":[679908780473436287,3094678682410985808]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":42,"id":{"name":"ash","disambiguator":[12003613248871158150,2868246550553135535]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":43,"id":{"name":"libloading","disambiguator":[5612579177066546143,7743843367086380049]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":44,"id":{"name":"inplace_it","disambiguator":[6672315584920121332,3221818582385441084]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":45,"id":{"name":"gpu_alloc","disambiguator":[15323101191089438,3581538267866288735]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":46,"id":{"name":"gpu_alloc_types","disambiguator":[5145592345202111172,5630495919219538508]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":47,"id":{"name":"raw_window_handle","disambiguator":[11826287084769123027,5745699372693966107]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":48,"id":{"name":"libc","disambiguator":[7802066425585832472,276718295615606981]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":49,"id":{"name":"d3d12","disambiguator":[13595519056485634343,10275992838102682830]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":50,"id":{"name":"gpu_descriptor","disambiguator":[5247985428965941356,475433808779453069]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":51,"id":{"name":"gpu_descriptor_types","disambiguator":[9675343148663952718,2698864440215955320]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":52,"id":{"name":"hashbrown","disambiguator":[102816898788751149,14872028589030221260]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":53,"id":{"name":"ahash","disambiguator":[13640771404514244833,18236468779372632599]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":54,"id":{"name":"renderdoc_sys","disambiguator":[3421895876886342832,13690234152484115094]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":55,"id":{"name":"copyless","disambiguator":[14639802537023905146,14034700163657344213]}},{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","num":56,"id":{"name":"profiling","disambiguator":[15734034774487978232,6144151204903664090]}}],"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":0,"byte_end":112299,"line_start":1,"line_end":3164,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":188530,"byte_end":188541,"line_start":15,"line_end":15,"column_start":15,"column_end":26},"alias_span":null,"name":"StagingBelt","value":"","parent":{"krate":0,"index":451}},{"kind":"Use","ref_id":{"krate":0,"index":1484},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":188560,"byte_end":188580,"line_start":16,"line_end":16,"column_start":18,"column_end":38},"alias_span":null,"name":"BufferInitDescriptor","value":"","parent":{"krate":0,"index":451}},{"kind":"Use","ref_id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":188582,"byte_end":188591,"line_start":16,"line_end":16,"column_start":40,"column_end":49},"alias_span":null,"name":"DeviceExt","value":"","parent":{"krate":0,"index":451}},{"kind":"Use","ref_id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":188611,"byte_end":188624,"line_start":17,"line_end":17,"column_start":18,"column_end":31},"alias_span":null,"name":"RenderEncoder","value":"","parent":{"krate":0,"index":451}},{"kind":"Use","ref_id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":188646,"byte_end":188667,"line_start":19,"line_end":19,"column_start":5,"column_end":26},"alias_span":null,"name":"backend_bits_from_env","value":"","parent":{"krate":0,"index":451}},{"kind":"Use","ref_id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":188669,"byte_end":188696,"line_start":19,"line_end":19,"column_start":28,"column_end":55},"alias_span":null,"name":"initialize_adapter_from_env","value":"","parent":{"krate":0,"index":451}},{"kind":"Use","ref_id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":188698,"byte_end":188736,"line_start":19,"line_end":19,"column_start":57,"column_end":95},"alias_span":null,"name":"initialize_adapter_from_env_or_default","value":"","parent":{"krate":0,"index":451}},{"kind":"Use","ref_id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":188742,"byte_end":188767,"line_start":20,"line_end":20,"column_start":5,"column_end":30},"alias_span":null,"name":"power_preference_from_env","value":"","parent":{"krate":0,"index":451}},{"kind":"Use","ref_id":{"krate":27,"index":854},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":584,"byte_end":595,"line_start":28,"line_end":28,"column_start":5,"column_end":16},"alias_span":null,"name":"AdapterInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2527},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":597,"byte_end":608,"line_start":28,"line_end":28,"column_start":18,"column_end":29},"alias_span":null,"name":"AddressMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":173},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":610,"byte_end":617,"line_start":28,"line_end":28,"column_start":31,"column_end":38},"alias_span":null,"name":"Backend","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":230},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":619,"byte_end":627,"line_start":28,"line_end":28,"column_start":40,"column_end":48},"alias_span":null,"name":"Backends","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2769},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":629,"byte_end":649,"line_start":28,"line_end":28,"column_start":50,"column_end":70},"alias_span":null,"name":"BindGroupLayoutEntry","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2738},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":651,"byte_end":662,"line_start":28,"line_end":28,"column_start":72,"column_end":83},"alias_span":null,"name":"BindingType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1100},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":664,"byte_end":678,"line_start":28,"line_end":28,"column_start":85,"column_end":99},"alias_span":null,"name":"BlendComponent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1016},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":684,"byte_end":695,"line_start":29,"line_end":29,"column_start":5,"column_end":16},"alias_span":null,"name":"BlendFactor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1070},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":697,"byte_end":711,"line_start":29,"line_end":29,"column_start":18,"column_end":32},"alias_span":null,"name":"BlendOperation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1119},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":713,"byte_end":723,"line_start":29,"line_end":29,"column_start":34,"column_end":44},"alias_span":null,"name":"BlendState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":10},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":725,"byte_end":738,"line_start":29,"line_end":29,"column_start":46,"column_end":59},"alias_span":null,"name":"BufferAddress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2673},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":740,"byte_end":757,"line_start":29,"line_end":29,"column_start":61,"column_end":78},"alias_span":null,"name":"BufferBindingType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":11},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":759,"byte_end":769,"line_start":29,"line_end":29,"column_start":80,"column_end":90},"alias_span":null,"name":"BufferSize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2059},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":775,"byte_end":787,"line_start":30,"line_end":30,"column_start":5,"column_end":17},"alias_span":null,"name":"BufferUsages","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2401},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":789,"byte_end":794,"line_start":30,"line_end":30,"column_start":19,"column_end":24},"alias_span":null,"name":"Color","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1137},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":796,"byte_end":812,"line_start":30,"line_end":30,"column_start":26,"column_end":42},"alias_span":null,"name":"ColorTargetState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1621},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":814,"byte_end":825,"line_start":30,"line_end":30,"column_start":44,"column_end":55},"alias_span":null,"name":"ColorWrites","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2592},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":827,"byte_end":850,"line_start":30,"line_end":30,"column_start":57,"column_end":80},"alias_span":null,"name":"CommandBufferDescriptor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1863},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":852,"byte_end":867,"line_start":30,"line_end":30,"column_start":82,"column_end":97},"alias_span":null,"name":"CompareFunction","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1754},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":873,"byte_end":887,"line_start":31,"line_end":31,"column_start":5,"column_end":19},"alias_span":null,"name":"DepthBiasState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1769},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":889,"byte_end":906,"line_start":31,"line_end":31,"column_start":21,"column_end":38},"alias_span":null,"name":"DepthStencilState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":835},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":908,"byte_end":918,"line_start":31,"line_end":31,"column_start":40,"column_end":50},"alias_span":null,"name":"DeviceType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":646},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":920,"byte_end":941,"line_start":31,"line_end":31,"column_start":52,"column_end":73},"alias_span":null,"name":"DownlevelCapabilities","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":668},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":943,"byte_end":957,"line_start":31,"line_end":31,"column_start":75,"column_end":89},"alias_span":null,"name":"DownlevelFlags","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":13},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":963,"byte_end":976,"line_start":32,"line_end":32,"column_start":5,"column_end":18},"alias_span":null,"name":"DynamicOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2457},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":978,"byte_end":986,"line_start":32,"line_end":32,"column_start":20,"column_end":28},"alias_span":null,"name":"Extent3d","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1206},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":988,"byte_end":992,"line_start":32,"line_end":32,"column_start":30,"column_end":34},"alias_span":null,"name":"Face","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":379},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":994,"byte_end":1002,"line_start":32,"line_end":32,"column_start":36,"column_end":44},"alias_span":null,"name":"Features","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2554},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1004,"byte_end":1014,"line_start":32,"line_end":32,"column_start":46,"column_end":56},"alias_span":null,"name":"FilterMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1185},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1016,"byte_end":1025,"line_start":32,"line_end":32,"column_start":58,"column_end":67},"alias_span":null,"name":"FrontFace","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2662},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1027,"byte_end":1042,"line_start":32,"line_end":32,"column_start":69,"column_end":84},"alias_span":null,"name":"ImageDataLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2811},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1048,"byte_end":1069,"line_start":33,"line_end":33,"column_start":5,"column_end":26},"alias_span":null,"name":"ImageSubresourceRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1783},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1071,"byte_end":1082,"line_start":33,"line_end":33,"column_start":28,"column_end":39},"alias_span":null,"name":"IndexFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":591},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1084,"byte_end":1090,"line_start":33,"line_end":33,"column_start":41,"column_end":47},"alias_span":null,"name":"Limits","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1276},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1092,"byte_end":1108,"line_start":33,"line_end":33,"column_start":49,"column_end":65},"alias_span":null,"name":"MultisampleState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2438},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1110,"byte_end":1118,"line_start":33,"line_end":33,"column_start":67,"column_end":75},"alias_span":null,"name":"Origin3d","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2872},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1124,"byte_end":1147,"line_start":34,"line_end":34,"column_start":5,"column_end":28},"alias_span":null,"name":"PipelineStatisticsTypes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1227},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1149,"byte_end":1160,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"alias_span":null,"name":"PolygonMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":209},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1162,"byte_end":1177,"line_start":34,"line_end":34,"column_start":43,"column_end":58},"alias_span":null,"name":"PowerPreference","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2237},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1179,"byte_end":1190,"line_start":34,"line_end":34,"column_start":60,"column_end":71},"alias_span":null,"name":"PresentMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1251},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1192,"byte_end":1206,"line_start":34,"line_end":34,"column_start":73,"column_end":87},"alias_span":null,"name":"PrimitiveState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1155},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1212,"byte_end":1229,"line_start":35,"line_end":35,"column_start":5,"column_end":22},"alias_span":null,"name":"PrimitiveTopology","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2575},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1231,"byte_end":1248,"line_start":35,"line_end":35,"column_start":24,"column_end":41},"alias_span":null,"name":"PushConstantRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2859},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1250,"byte_end":1259,"line_start":35,"line_end":35,"column_start":43,"column_end":52},"alias_span":null,"name":"QueryType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2619},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1261,"byte_end":1285,"line_start":35,"line_end":35,"column_start":54,"column_end":78},"alias_span":null,"name":"RenderBundleDepthStencil","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2827},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1287,"byte_end":1305,"line_start":35,"line_end":35,"column_start":80,"column_end":98},"alias_span":null,"name":"SamplerBorderColor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":12},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1311,"byte_end":1325,"line_start":36,"line_end":36,"column_start":5,"column_end":19},"alias_span":null,"name":"ShaderLocation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":810},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1327,"byte_end":1338,"line_start":36,"line_end":36,"column_start":21,"column_end":32},"alias_span":null,"name":"ShaderModel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":882},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1340,"byte_end":1352,"line_start":36,"line_end":36,"column_start":34,"column_end":46},"alias_span":null,"name":"ShaderStages","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1843},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1354,"byte_end":1370,"line_start":36,"line_end":36,"column_start":48,"column_end":64},"alias_span":null,"name":"StencilFaceState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1804},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1372,"byte_end":1388,"line_start":36,"line_end":36,"column_start":66,"column_end":82},"alias_span":null,"name":"StencilOperation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1733},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1390,"byte_end":1402,"line_start":36,"line_end":36,"column_start":84,"column_end":96},"alias_span":null,"name":"StencilState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2717},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1408,"byte_end":1428,"line_start":37,"line_end":37,"column_start":5,"column_end":25},"alias_span":null,"name":"StorageTextureAccess","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2368},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1430,"byte_end":1450,"line_start":37,"line_end":37,"column_start":27,"column_end":47},"alias_span":null,"name":"SurfaceConfiguration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2388},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1452,"byte_end":1465,"line_start":37,"line_end":37,"column_start":49,"column_end":62},"alias_span":null,"name":"SurfaceStatus","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2506},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1467,"byte_end":1480,"line_start":37,"line_end":37,"column_start":64,"column_end":77},"alias_span":null,"name":"TextureAspect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2417},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1482,"byte_end":1498,"line_start":37,"line_end":37,"column_start":79,"column_end":95},"alias_span":null,"name":"TextureDimension","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1428},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1504,"byte_end":1517,"line_start":38,"line_end":38,"column_start":5,"column_end":18},"alias_span":null,"name":"TextureFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1295},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1519,"byte_end":1544,"line_start":38,"line_end":38,"column_start":20,"column_end":45},"alias_span":null,"name":"TextureFormatFeatureFlags","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1387},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1546,"byte_end":1567,"line_start":38,"line_end":38,"column_start":47,"column_end":68},"alias_span":null,"name":"TextureFormatFeatures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2693},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1569,"byte_end":1586,"line_start":38,"line_end":38,"column_start":70,"column_end":87},"alias_span":null,"name":"TextureSampleType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2261},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1592,"byte_end":1605,"line_start":39,"line_end":39,"column_start":5,"column_end":18},"alias_span":null,"name":"TextureUsages","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":989},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1607,"byte_end":1627,"line_start":39,"line_end":39,"column_start":20,"column_end":40},"alias_span":null,"name":"TextureViewDimension","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1923},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1629,"byte_end":1644,"line_start":39,"line_end":39,"column_start":42,"column_end":57},"alias_span":null,"name":"VertexAttribute","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1942},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1646,"byte_end":1658,"line_start":39,"line_end":39,"column_start":59,"column_end":71},"alias_span":null,"name":"VertexFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":1902},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1660,"byte_end":1674,"line_start":39,"line_end":39,"column_start":73,"column_end":87},"alias_span":null,"name":"VertexStepMode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":15},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1680,"byte_end":1701,"line_start":40,"line_end":40,"column_start":5,"column_end":26},"alias_span":null,"name":"BIND_BUFFER_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":16},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1703,"byte_end":1724,"line_start":40,"line_end":40,"column_start":28,"column_end":49},"alias_span":null,"name":"COPY_BUFFER_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":14},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1726,"byte_end":1754,"line_start":40,"line_end":40,"column_start":51,"column_end":79},"alias_span":null,"name":"COPY_BYTES_PER_ROW_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":17},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1756,"byte_end":1769,"line_start":40,"line_end":40,"column_start":81,"column_end":94},"alias_span":null,"name":"MAP_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":19},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1775,"byte_end":1798,"line_start":41,"line_end":41,"column_start":5,"column_end":28},"alias_span":null,"name":"PUSH_CONSTANT_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":20},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1800,"byte_end":1821,"line_start":41,"line_end":41,"column_start":30,"column_end":51},"alias_span":null,"name":"QUERY_SET_MAX_QUERIES","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":21},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1823,"byte_end":1833,"line_start":41,"line_end":41,"column_start":53,"column_end":63},"alias_span":null,"name":"QUERY_SIZE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":18},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":1835,"byte_end":1858,"line_start":41,"line_end":41,"column_start":65,"column_end":88},"alias_span":null,"name":"VERTEX_STRIDE_ALIGNMENT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":352},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35578,"byte_end":35599,"line_start":1082,"line_end":1082,"column_start":14,"column_end":35},"alias_span":null,"name":"RequestAdapterOptionsBase","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2789},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45348,"byte_end":45363,"line_start":1300,"line_end":1300,"column_start":14,"column_end":29},"alias_span":null,"name":"ImageCopyBufferBase","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":27,"index":2799},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45532,"byte_end":45548,"line_start":1304,"line_end":1304,"column_start":14,"column_end":30},"alias_span":null,"name":"ImageCopyTextureBase","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":0,"byte_end":112299,"line_start":1,"line_end":3164,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":451},{"krate":0,"index":683},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":724},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":737},{"krate":0,"index":740},{"krate":0,"index":743},{"krate":0,"index":746},{"krate":0,"index":749},{"krate":0,"index":752},{"krate":0,"index":755},{"krate":0,"index":758},{"krate":0,"index":761},{"krate":0,"index":764},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":779},{"krate":0,"index":782},{"krate":0,"index":785},{"krate":0,"index":788},{"krate":0,"index":791},{"krate":0,"index":794},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":803},{"krate":0,"index":806},{"krate":0,"index":809},{"krate":0,"index":812},{"krate":0,"index":815},{"krate":0,"index":818},{"krate":0,"index":821},{"krate":0,"index":824},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":836},{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":848},{"krate":0,"index":851},{"krate":0,"index":854},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":863},{"krate":0,"index":866},{"krate":0,"index":869},{"krate":0,"index":872},{"krate":0,"index":875},{"krate":0,"index":878},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":887},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":905},{"krate":0,"index":908},{"krate":0,"index":911},{"krate":0,"index":914},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":923},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":932},{"krate":0,"index":935},{"krate":0,"index":938},{"krate":0,"index":941},{"krate":0,"index":944},{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":976},{"krate":0,"index":991},{"krate":0,"index":1006},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1517},{"krate":0,"index":1119},{"krate":0,"index":1519},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1529},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1544},{"krate":0,"index":1121},{"krate":0,"index":1546},{"krate":0,"index":1551},{"krate":0,"index":1553},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1575},{"krate":0,"index":1577},{"krate":0,"index":1580},{"krate":0,"index":1127},{"krate":0,"index":1582},{"krate":0,"index":1585},{"krate":0,"index":1129},{"krate":0,"index":1587},{"krate":0,"index":1590},{"krate":0,"index":1131},{"krate":0,"index":1592},{"krate":0,"index":1595},{"krate":0,"index":1133},{"krate":0,"index":1597},{"krate":0,"index":1600},{"krate":0,"index":1135},{"krate":0,"index":1137},{"krate":0,"index":1142},{"krate":0,"index":1146},{"krate":0,"index":1602},{"krate":0,"index":1605},{"krate":0,"index":1150},{"krate":0,"index":1607},{"krate":0,"index":1610},{"krate":0,"index":1152},{"krate":0,"index":1154},{"krate":0,"index":1612},{"krate":0,"index":1615},{"krate":0,"index":1156},{"krate":0,"index":1158},{"krate":0,"index":1617},{"krate":0,"index":1620},{"krate":0,"index":1160},{"krate":0,"index":1622},{"krate":0,"index":1626},{"krate":0,"index":1162},{"krate":0,"index":1628},{"krate":0,"index":1632},{"krate":0,"index":1635},{"krate":0,"index":1639},{"krate":0,"index":1642},{"krate":0,"index":1648},{"krate":0,"index":1651},{"krate":0,"index":1654},{"krate":0,"index":1164},{"krate":0,"index":1166},{"krate":0,"index":1169},{"krate":0,"index":1656},{"krate":0,"index":1659},{"krate":0,"index":1661},{"krate":0,"index":1678},{"krate":0,"index":1681},{"krate":0,"index":1684},{"krate":0,"index":1689},{"krate":0,"index":1692},{"krate":0,"index":1695},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1707},{"krate":0,"index":1710},{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1719},{"krate":0,"index":1721},{"krate":0,"index":1171},{"krate":0,"index":1725},{"krate":0,"index":1729},{"krate":0,"index":1731},{"krate":0,"index":1734},{"krate":0,"index":1737},{"krate":0,"index":1741},{"krate":0,"index":1743},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1174},{"krate":0,"index":1752},{"krate":0,"index":1757},{"krate":0,"index":1760},{"krate":0,"index":1763},{"krate":0,"index":1768},{"krate":0,"index":1771},{"krate":0,"index":1177},{"krate":0,"index":1179},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194},{"krate":0,"index":1774},{"krate":0,"index":1784},{"krate":0,"index":1787},{"krate":0,"index":1790},{"krate":0,"index":1793},{"krate":0,"index":1795},{"krate":0,"index":1799},{"krate":0,"index":1804},{"krate":0,"index":1807},{"krate":0,"index":1810},{"krate":0,"index":1813},{"krate":0,"index":1827},{"krate":0,"index":1830},{"krate":0,"index":1833},{"krate":0,"index":1835},{"krate":0,"index":1196},{"krate":0,"index":1839},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1849},{"krate":0,"index":1854},{"krate":0,"index":1857},{"krate":0,"index":1860},{"krate":0,"index":1866},{"krate":0,"index":1870},{"krate":0,"index":1874},{"krate":0,"index":1878},{"krate":0,"index":1883},{"krate":0,"index":1886},{"krate":0,"index":1889},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1898},{"krate":0,"index":1900},{"krate":0,"index":1904},{"krate":0,"index":1909},{"krate":0,"index":1912},{"krate":0,"index":1915},{"krate":0,"index":1920},{"krate":0,"index":1923},{"krate":0,"index":1926},{"krate":0,"index":1935},{"krate":0,"index":1938},{"krate":0,"index":1941},{"krate":0,"index":1944},{"krate":0,"index":1947},{"krate":0,"index":1950},{"krate":0,"index":1953},{"krate":0,"index":1959},{"krate":0,"index":1962},{"krate":0,"index":1198},{"krate":0,"index":1201},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1965},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":1987},{"krate":0,"index":1990},{"krate":0,"index":1992},{"krate":0,"index":1996},{"krate":0,"index":1998},{"krate":0,"index":2001},{"krate":0,"index":2005},{"krate":0,"index":2008},{"krate":0,"index":2010},{"krate":0,"index":2013},{"krate":0,"index":2015},{"krate":0,"index":2024},{"krate":0,"index":2026},{"krate":0,"index":2027},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2032},{"krate":0,"index":1208},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1228},{"krate":0,"index":1242},{"krate":0,"index":1265},{"krate":0,"index":2034},{"krate":0,"index":2036},{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2044},{"krate":0,"index":1267},{"krate":0,"index":1269},{"krate":0,"index":2046},{"krate":0,"index":2048},{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2056},{"krate":0,"index":1270},{"krate":0,"index":1272},{"krate":0,"index":2058},{"krate":0,"index":2063},{"krate":0,"index":2065},{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":1273},{"krate":0,"index":1276},{"krate":0,"index":2071},{"krate":0,"index":2075},{"krate":0,"index":2078},{"krate":0,"index":2083},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1285},{"krate":0,"index":1287},{"krate":0,"index":1289},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1302},{"krate":0,"index":1308},{"krate":0,"index":1310},{"krate":0,"index":1314},{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1356},{"krate":0,"index":1360},{"krate":0,"index":1364},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1374},{"krate":0,"index":1377},{"krate":0,"index":1386},{"krate":0,"index":1389},{"krate":0,"index":1392},{"krate":0,"index":1396},{"krate":0,"index":1399},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":2086},{"krate":0,"index":2092},{"krate":0,"index":1432},{"krate":0,"index":1434}],"decl_id":null,"docs":" A cross-platform graphics and compute library based on [WebGPU](https://gpuweb.github.io/gpuweb/).","sig":null,"attributes":[{"value":"/ A cross-platform graphics and compute library based on [WebGPU](https://gpuweb.github.io/gpuweb/).","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":0,"byte_end":102,"line_start":1,"line_end":1,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103,"byte_end":106,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ To start using the API, create an [`Instance`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107,"byte_end":158,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":249,"byte_end":271,"line_start":6,"line_end":6,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":527},{"krate":0,"index":537},{"krate":0,"index":603},{"krate":0,"index":627},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":676},{"krate":0,"index":680}],"decl_id":null,"docs":" Utility structures and functions.\n","sig":null,"attributes":[{"value":"/ Utility structures and functions.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":188314,"byte_end":188351,"line_start":1,"line_end":1,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193854,"byte_end":193865,"line_start":58,"line_end":58,"column_start":12,"column_end":23},"name":"StagingBelt","qualname":"::util::belt::StagingBelt","value":"StagingBelt {  }","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516}],"decl_id":null,"docs":" Staging belt is a machine that uploads data.","sig":null,"attributes":[{"value":"/ Staging belt is a machine that uploads data.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193314,"byte_end":193362,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193363,"byte_end":193366,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Internally it uses a ring-buffer of staging buffers that are sub-allocated.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193367,"byte_end":193446,"line_start":49,"line_end":49,"column_start":1,"column_end":80}},{"value":"/ It has an advantage over `Queue.write_buffer` in a way that it returns a mutable slice,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193447,"byte_end":193538,"line_start":50,"line_end":50,"column_start":1,"column_end":92}},{"value":"/ which you can fill to avoid an extra data copy.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193539,"byte_end":193590,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193591,"byte_end":193594,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Using a staging belt is slightly complicated, and generally goes as follows:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193595,"byte_end":193675,"line_start":53,"line_end":53,"column_start":1,"column_end":81}},{"value":"/ - Write to buffers that need writing to using `write_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193676,"byte_end":193741,"line_start":54,"line_end":54,"column_start":1,"column_end":66}},{"value":"/ - Call `finish`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193742,"byte_end":193762,"line_start":55,"line_end":55,"column_start":1,"column_end":21}},{"value":"/ - Submit all command encoders used with `write_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193763,"byte_end":193822,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/ - Call `recall`","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":193823,"byte_end":193842,"line_start":57,"line_end":57,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194533,"byte_end":194536,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<StagingBelt>::new","value":"pub fn new(BufferAddress) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new staging belt.","sig":null,"attributes":[{"value":"/ Create a new staging belt.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194284,"byte_end":194314,"line_start":71,"line_end":71,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194319,"byte_end":194322,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ The `chunk_size` is the unit of internal buffer allocation.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194327,"byte_end":194390,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ It's better when it's big, but ideally still 1-4 times less than","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194395,"byte_end":194463,"line_start":74,"line_end":74,"column_start":5,"column_end":73}},{"value":"/ the total amount of data uploaded per submission.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194468,"byte_end":194521,"line_start":75,"line_end":75,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":195150,"byte_end":195162,"line_start":93,"line_end":93,"column_start":12,"column_end":24},"name":"write_buffer","qualname":"<StagingBelt>::write_buffer","value":"pub fn write_buffer(&mut Self, &mut CommandEncoder, &Buffer, BufferAddress,\n                    BufferSize, &Device) -> BufferViewMut","parent":null,"children":[],"decl_id":null,"docs":" Allocate the staging belt slice of `size` to be uploaded into the `target` buffer\n at the specified offset.","sig":null,"attributes":[{"value":"/ Allocate the staging belt slice of `size` to be uploaded into the `target` buffer","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194848,"byte_end":194933,"line_start":88,"line_end":88,"column_start":5,"column_end":90}},{"value":"/ at the specified offset.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194938,"byte_end":194966,"line_start":89,"line_end":89,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194971,"byte_end":194974,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ The upload will be placed into the provided command encoder. This encoder","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194979,"byte_end":195056,"line_start":91,"line_end":91,"column_start":5,"column_end":82}},{"value":"/ must be submitted after `finish` is called and before `recall` is called.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":195061,"byte_end":195138,"line_start":92,"line_end":92,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":197004,"byte_end":197010,"line_start":148,"line_end":148,"column_start":12,"column_end":18},"name":"finish","qualname":"<StagingBelt>::finish","value":"pub fn finish(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Prepare currently mapped buffers for use in a submission.","sig":null,"attributes":[{"value":"/ Prepare currently mapped buffers for use in a submission.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":196792,"byte_end":196853,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":196858,"byte_end":196861,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ At this point, all the partially used staging buffers are closed until","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":196866,"byte_end":196940,"line_start":146,"line_end":146,"column_start":5,"column_end":79}},{"value":"/ the GPU is done copying the data from them.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":196945,"byte_end":196992,"line_start":147,"line_end":147,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":197348,"byte_end":197354,"line_start":158,"line_end":158,"column_start":12,"column_end":18},"name":"recall","qualname":"<StagingBelt>::recall","value":"pub fn recall(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Recall all of the closed buffers back to be reused.","sig":null,"attributes":[{"value":"/ Recall all of the closed buffers back to be reused.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":197175,"byte_end":197230,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":197235,"byte_end":197238,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ This has to be called after the command encoders written to `write_buffer` are submitted!","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":197243,"byte_end":197336,"line_start":157,"line_end":157,"column_start":5,"column_end":98}}]},{"kind":"Struct","id":{"krate":0,"index":1484},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198327,"byte_end":198347,"line_start":5,"line_end":5,"column_start":12,"column_end":32},"name":"BufferInitDescriptor","qualname":"::util::device::BufferInitDescriptor","value":"BufferInitDescriptor { label, contents, usage }","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488}],"decl_id":null,"docs":" Describes a [Buffer](crate::Buffer) when allocating.\n","sig":null,"attributes":[{"value":"/ Describes a [Buffer](crate::Buffer) when allocating.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198214,"byte_end":198270,"line_start":3,"line_end":3,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1486},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198460,"byte_end":198465,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"name":"label","qualname":"::util::device::BufferInitDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" Debug label of a buffer. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of a buffer. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198358,"byte_end":198451,"line_start":6,"line_end":6,"column_start":5,"column_end":98}}]},{"kind":"Field","id":{"krate":0,"index":1487},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198535,"byte_end":198543,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"name":"contents","qualname":"::util::device::BufferInitDescriptor::contents","value":"&'a [u8]","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" Contents of a buffer on creation.\n","sig":null,"attributes":[{"value":"/ Contents of a buffer on creation.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198489,"byte_end":198526,"line_start":8,"line_end":8,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198685,"byte_end":198690,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"name":"usage","qualname":"::util::device::BufferInitDescriptor::usage","value":"wgpu_types::BufferUsages","parent":{"krate":0,"index":1484},"children":[],"decl_id":null,"docs":" Usages of a buffer. If the buffer is used in any way that isn't specified here, the operation\n will panic.\n","sig":null,"attributes":[{"value":"/ Usages of a buffer. If the buffer is used in any way that isn't specified here, the operation","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198559,"byte_end":198656,"line_start":10,"line_end":10,"column_start":5,"column_end":102}},{"value":"/ will panic.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198661,"byte_end":198676,"line_start":11,"line_end":11,"column_start":5,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198779,"byte_end":198788,"line_start":16,"line_end":16,"column_start":11,"column_end":20},"name":"DeviceExt","qualname":"::util::device::DeviceExt","value":"DeviceExt","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"decl_id":null,"docs":" Utility methods not meant to be in the main API.\n","sig":null,"attributes":[{"value":"/ Utility methods not meant to be in the main API.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198716,"byte_end":198768,"line_start":15,"line_end":15,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198868,"byte_end":198886,"line_start":18,"line_end":18,"column_start":8,"column_end":26},"name":"create_buffer_init","qualname":"::util::device::DeviceExt::create_buffer_init","value":"pub fn create_buffer_init(&Self, &BufferInitDescriptor) -> crate::Buffer","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Creates a [Buffer](crate::Buffer) with data to initialize it.\n","sig":null,"attributes":[{"value":"/ Creates a [Buffer](crate::Buffer) with data to initialize it.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198795,"byte_end":198860,"line_start":17,"line_end":17,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199511,"byte_end":199535,"line_start":32,"line_end":32,"column_start":8,"column_end":32},"name":"create_texture_with_data","qualname":"::util::device::DeviceExt::create_texture_with_data","value":"pub fn create_texture_with_data(&Self, &crate::Queue,\n                                &crate::TextureDescriptor, &[u8])\n-> crate::Texture","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Upload an entire texture and its mipmaps from a source buffer.","sig":null,"attributes":[{"value":"/ Upload an entire texture and its mipmaps from a source buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":198946,"byte_end":199012,"line_start":20,"line_end":20,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199017,"byte_end":199020,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Expects all mipmaps to be tightly packed in the data buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199025,"byte_end":199089,"line_start":22,"line_end":22,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199094,"byte_end":199097,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ If the texture is a 2DArray texture, uploads each layer in order, expecting","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199102,"byte_end":199181,"line_start":24,"line_end":24,"column_start":5,"column_end":84}},{"value":"/ each layer and its mips to be tightly packed.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199186,"byte_end":199235,"line_start":25,"line_end":25,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199240,"byte_end":199243,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199248,"byte_end":199260,"line_start":27,"line_end":27,"column_start":5,"column_end":17}},{"value":"/ Layer0Mip0 Layer0Mip1 Layer0Mip2 ... Layer1Mip0 Layer1Mip1 Layer1Mip2 ...","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199265,"byte_end":199342,"line_start":28,"line_end":28,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199347,"byte_end":199350,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ Implicitly adds the `COPY_DST` usage if it is not present in the descriptor,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199355,"byte_end":199435,"line_start":30,"line_end":30,"column_start":5,"column_end":85}},{"value":"/ as it is required to be able to upload the data to the gpu.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199440,"byte_end":199503,"line_start":31,"line_end":31,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204338,"byte_end":204351,"line_start":8,"line_end":8,"column_start":11,"column_end":24},"name":"RenderEncoder","qualname":"::util::encoder::RenderEncoder","value":"RenderEncoder<'a>","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580}],"decl_id":null,"docs":" Methods shared by [`RenderPass`] and [`RenderBundleEncoder`].\n","sig":null,"attributes":[{"value":"/ Methods shared by [`RenderPass`] and [`RenderBundleEncoder`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204262,"byte_end":204327,"line_start":7,"line_end":7,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204662,"byte_end":204676,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"set_bind_group","qualname":"::util::encoder::RenderEncoder::set_bind_group","value":"pub fn set_bind_group(&mut Self, u32, &'a BindGroup, &[DynamicOffset])","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Sets the active bind group for a given bind group index. The bind group layout\n in the active pipeline when any `draw()` function is called must match the layout of this bind group.","sig":null,"attributes":[{"value":"/ Sets the active bind group for a given bind group index. The bind group layout","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204362,"byte_end":204444,"line_start":9,"line_end":9,"column_start":5,"column_end":87}},{"value":"/ in the active pipeline when any `draw()` function is called must match the layout of this bind group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204449,"byte_end":204554,"line_start":10,"line_end":10,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204559,"byte_end":204562,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ If the bind group have dynamic offsets, provide them in order of their declaration.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204567,"byte_end":204654,"line_start":12,"line_end":12,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204891,"byte_end":204903,"line_start":18,"line_end":18,"column_start":8,"column_end":20},"name":"set_pipeline","qualname":"::util::encoder::RenderEncoder::set_pipeline","value":"pub fn set_pipeline(&mut Self, &'a RenderPipeline)","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Sets the active render pipeline.","sig":null,"attributes":[{"value":"/ Sets the active render pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204760,"byte_end":204796,"line_start":15,"line_end":15,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204801,"byte_end":204804,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ Subsequent draw calls will exhibit the behavior defined by `pipeline`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204809,"byte_end":204883,"line_start":17,"line_end":17,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205154,"byte_end":205170,"line_start":24,"line_end":24,"column_start":8,"column_end":24},"name":"set_index_buffer","qualname":"::util::encoder::RenderEncoder::set_index_buffer","value":"pub fn set_index_buffer(&mut Self, BufferSlice, IndexFormat)","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Sets the active index buffer.","sig":null,"attributes":[{"value":"/ Sets the active index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204951,"byte_end":204984,"line_start":20,"line_end":20,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204989,"byte_end":204992,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw_indexed`](RenderEncoder::draw_indexed) on this [`RenderEncoder`] will","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":204997,"byte_end":205097,"line_start":22,"line_end":22,"column_start":5,"column_end":105}},{"value":"/ use `buffer` as the source index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205102,"byte_end":205146,"line_start":23,"line_end":23,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205684,"byte_end":205701,"line_start":36,"line_end":36,"column_start":8,"column_end":25},"name":"set_vertex_buffer","qualname":"::util::encoder::RenderEncoder::set_vertex_buffer","value":"pub fn set_vertex_buffer(&mut Self, u32, BufferSlice)","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Assign a vertex buffer to a slot.","sig":null,"attributes":[{"value":"/ Assign a vertex buffer to a slot.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205246,"byte_end":205283,"line_start":26,"line_end":26,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205288,"byte_end":205291,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw`] and [`draw_indexed`] on this","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205296,"byte_end":205357,"line_start":28,"line_end":28,"column_start":5,"column_end":66}},{"value":"/ [`RenderEncoder`] will use `buffer` as one of the source vertex buffers.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205362,"byte_end":205438,"line_start":29,"line_end":29,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205443,"byte_end":205446,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ The `slot` refers to the index of the matching descriptor in","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205451,"byte_end":205515,"line_start":31,"line_end":31,"column_start":5,"column_end":69}},{"value":"/ [VertexState::buffers](crate::VertexState::buffers).","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205520,"byte_end":205576,"line_start":32,"line_end":32,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205581,"byte_end":205584,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ [`draw`]: RenderEncoder::draw","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205589,"byte_end":205622,"line_start":34,"line_end":34,"column_start":5,"column_end":38}},{"value":"/ [`draw_indexed`]: RenderEncoder::draw_indexed","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205627,"byte_end":205676,"line_start":35,"line_end":35,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205919,"byte_end":205923,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"draw","qualname":"::util::encoder::RenderEncoder::draw","value":"pub fn draw(&mut Self, Range<u32>, Range<u32>)","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s).","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s).","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205761,"byte_end":205815,"line_start":38,"line_end":38,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205820,"byte_end":205823,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205828,"byte_end":205911,"line_start":40,"line_end":40,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206270,"byte_end":206282,"line_start":47,"line_end":47,"column_start":8,"column_end":20},"name":"draw_indexed","qualname":"::util::encoder::RenderEncoder::draw_indexed","value":"pub fn draw_indexed(&mut Self, Range<u32>, i32, Range<u32>)","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":205986,"byte_end":206075,"line_start":43,"line_end":43,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206080,"byte_end":206083,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderEncoder::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206088,"byte_end":206185,"line_start":45,"line_end":45,"column_start":5,"column_end":102}},{"value":"/ vertex buffers can be set with [`RenderEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206190,"byte_end":206262,"line_start":46,"line_end":46,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207029,"byte_end":207042,"line_start":64,"line_end":64,"column_start":8,"column_end":21},"name":"draw_indirect","qualname":"::util::encoder::RenderEncoder::draw_indirect","value":"pub fn draw_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206362,"byte_end":206463,"line_start":49,"line_end":49,"column_start":5,"column_end":106}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206468,"byte_end":206471,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206476,"byte_end":206559,"line_start":51,"line_end":51,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206564,"byte_end":206567,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206572,"byte_end":206637,"line_start":53,"line_end":53,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206642,"byte_end":206645,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206650,"byte_end":206661,"line_start":55,"line_end":55,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206666,"byte_end":206680,"line_start":56,"line_end":56,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirect {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206685,"byte_end":206710,"line_start":57,"line_end":57,"column_start":5,"column_end":30}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206715,"byte_end":206776,"line_start":58,"line_end":58,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206781,"byte_end":206845,"line_start":59,"line_end":59,"column_start":5,"column_end":69}},{"value":"/     base_vertex: u32, // The Index of the first vertex to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206850,"byte_end":206917,"line_start":60,"line_end":60,"column_start":5,"column_end":72}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":206922,"byte_end":206999,"line_start":61,"line_end":61,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207004,"byte_end":207009,"line_start":62,"line_end":62,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207014,"byte_end":207021,"line_start":63,"line_end":63,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208041,"byte_end":208062,"line_start":84,"line_end":84,"column_start":8,"column_end":29},"name":"draw_indexed_indirect","qualname":"::util::encoder::RenderEncoder::draw_indexed_indirect","value":"pub fn draw_indexed_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers,\n based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207121,"byte_end":207210,"line_start":66,"line_end":66,"column_start":5,"column_end":94}},{"value":"/ based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207215,"byte_end":207266,"line_start":67,"line_end":67,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207271,"byte_end":207274,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderEncoder::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207279,"byte_end":207376,"line_start":69,"line_end":69,"column_start":5,"column_end":102}},{"value":"/ vertex buffers can be set with [`RenderEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207381,"byte_end":207453,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207458,"byte_end":207461,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207466,"byte_end":207531,"line_start":72,"line_end":72,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207536,"byte_end":207539,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207544,"byte_end":207555,"line_start":74,"line_end":74,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207560,"byte_end":207574,"line_start":75,"line_end":75,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirect {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207579,"byte_end":207611,"line_start":76,"line_end":76,"column_start":5,"column_end":37}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207616,"byte_end":207677,"line_start":77,"line_end":77,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207682,"byte_end":207746,"line_start":78,"line_end":78,"column_start":5,"column_end":69}},{"value":"/     base_index: u32, // The base index within the index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207751,"byte_end":207818,"line_start":79,"line_end":79,"column_start":5,"column_end":72}},{"value":"/     vertex_offset: i32, // The value added to the vertex index before indexing into the vertex buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207823,"byte_end":207929,"line_start":80,"line_end":80,"column_start":5,"column_end":111}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":207934,"byte_end":208011,"line_start":81,"line_end":81,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208016,"byte_end":208021,"line_start":82,"line_end":82,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208026,"byte_end":208033,"line_start":83,"line_end":83,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209495,"byte_end":209513,"line_start":120,"line_end":120,"column_start":8,"column_end":26},"name":"set_push_constants","qualname":"::util::encoder::RenderEncoder::set_push_constants","value":"pub fn set_push_constants(&mut Self, wgt::ShaderStages, u32, &[u8])","parent":{"krate":0,"index":570},"children":[],"decl_id":null,"docs":" [`wgt::Features::PUSH_CONSTANTS`] must be enabled on the device in order to call this function.","sig":null,"attributes":[{"value":"/ [`wgt::Features::PUSH_CONSTANTS`] must be enabled on the device in order to call this function.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208172,"byte_end":208271,"line_start":90,"line_end":90,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208276,"byte_end":208279,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Set push constant data.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208284,"byte_end":208311,"line_start":92,"line_end":92,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208316,"byte_end":208319,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Offset is measured in bytes, but must be a multiple of [`wgt::PUSH_CONSTANT_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208324,"byte_end":208416,"line_start":94,"line_end":94,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208421,"byte_end":208424,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Data size must be a multiple of 4 and must be aligned to the 4s, so we take an array of u32.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208429,"byte_end":208525,"line_start":96,"line_end":96,"column_start":5,"column_end":101}},{"value":"/ For example, with an offset of 4 and an array of `[u32; 3]`, that will write to the range","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208530,"byte_end":208623,"line_start":97,"line_end":97,"column_start":5,"column_end":98}},{"value":"/ of 4..16.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208628,"byte_end":208641,"line_start":98,"line_end":98,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208646,"byte_end":208649,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ For each byte in the range of push constant data written, the union of the stages of all push constant","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208654,"byte_end":208760,"line_start":100,"line_end":100,"column_start":5,"column_end":111}},{"value":"/ ranges that covers that byte must be exactly `stages`. There's no good way of explaining this simply,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208765,"byte_end":208870,"line_start":101,"line_end":101,"column_start":5,"column_end":110}},{"value":"/ so here are some examples:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208875,"byte_end":208905,"line_start":102,"line_end":102,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208910,"byte_end":208913,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208918,"byte_end":208929,"line_start":104,"line_end":104,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208934,"byte_end":208959,"line_start":105,"line_end":105,"column_start":5,"column_end":30}},{"value":"/ - 0..4 Vertex","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208964,"byte_end":208981,"line_start":106,"line_end":106,"column_start":5,"column_end":22}},{"value":"/ - 4..8 Fragment","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":208986,"byte_end":209005,"line_start":107,"line_end":107,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209010,"byte_end":209017,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209022,"byte_end":209025,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in two set_push_constants calls. First for the `Vertex` range, second for the `Fragment` range.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209030,"byte_end":209159,"line_start":110,"line_end":110,"column_start":5,"column_end":134}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209164,"byte_end":209167,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209172,"byte_end":209183,"line_start":112,"line_end":112,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209188,"byte_end":209213,"line_start":113,"line_end":113,"column_start":5,"column_end":30}},{"value":"/ - 0..8  Vertex","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209218,"byte_end":209236,"line_start":114,"line_end":114,"column_start":5,"column_end":23}},{"value":"/ - 4..12 Fragment","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209241,"byte_end":209261,"line_start":115,"line_end":115,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209266,"byte_end":209273,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209278,"byte_end":209281,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in three set_push_constants calls. First for the `Vertex` only range 0..4, second","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209286,"byte_end":209401,"line_start":118,"line_end":118,"column_start":5,"column_end":120}},{"value":"/ for the `Vertex | Fragment` range 4..8, third for the `Fragment` range 8..12.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209406,"byte_end":209487,"line_start":119,"line_end":119,"column_start":5,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\init.rs","byte_start":213149,"byte_end":213170,"line_start":6,"line_end":6,"column_start":8,"column_end":29},"name":"backend_bits_from_env","qualname":"::util::init::backend_bits_from_env","value":"pub fn backend_bits_from_env() -> Option<Backends>","parent":null,"children":[],"decl_id":null,"docs":" Get a set of backend bits from the environment variable WGPU_BACKEND.\n","sig":null,"attributes":[{"value":"/ Get a set of backend bits from the environment variable WGPU_BACKEND.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\init.rs","byte_start":213068,"byte_end":213141,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\init.rs","byte_start":213739,"byte_end":213764,"line_start":25,"line_end":25,"column_start":8,"column_end":33},"name":"power_preference_from_env","qualname":"::util::init::power_preference_from_env","value":"pub fn power_preference_from_env() -> Option<PowerPreference>","parent":null,"children":[],"decl_id":null,"docs":" Get a power preference from the environment variable WGPU_POWER_PREF\n","sig":null,"attributes":[{"value":"/ Get a power preference from the environment variable WGPU_POWER_PREF","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\init.rs","byte_start":213659,"byte_end":213731,"line_start":24,"line_end":24,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\init.rs","byte_start":214231,"byte_end":214258,"line_start":41,"line_end":41,"column_start":8,"column_end":35},"name":"initialize_adapter_from_env","qualname":"::util::init::initialize_adapter_from_env","value":"pub fn initialize_adapter_from_env(&Instance, Backends) -> Option<Adapter>","parent":null,"children":[],"decl_id":null,"docs":" Initialize the adapter obeying the WGPU_ADAPTER_NAME environment variable.\n","sig":null,"attributes":[{"value":"/ Initialize the adapter obeying the WGPU_ADAPTER_NAME environment variable.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\init.rs","byte_start":214109,"byte_end":214187,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\init.rs","byte_start":214188,"byte_end":214223,"line_start":40,"line_end":40,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\init.rs","byte_start":215252,"byte_end":215290,"line_start":72,"line_end":72,"column_start":14,"column_end":52},"name":"initialize_adapter_from_env_or_default","qualname":"::util::init::initialize_adapter_from_env_or_default","value":"pub async fn initialize_adapter_from_env_or_default<'_>(&'_ Instance,\n                                                        wgt::Backends)\n-> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Initialize the adapter obeying the WGPU_ADAPTER_NAME environment variable and if it doesn't exist fall back on a default adapter.\n","sig":null,"attributes":[{"value":"/ Initialize the adapter obeying the WGPU_ADAPTER_NAME environment variable and if it doesn't exist fall back on a default adapter.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\init.rs","byte_start":215105,"byte_end":215238,"line_start":71,"line_end":71,"column_start":1,"column_end":134}}]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":189396,"byte_end":189410,"line_start":41,"line_end":41,"column_start":8,"column_end":22},"name":"make_spirv_raw","qualname":"::util::make_spirv_raw","value":"pub fn make_spirv_raw(&[u8]) -> Cow<, [u32]>","parent":null,"children":[],"decl_id":null,"docs":" Version of make_spirv intended for use with [`Device::create_shader_module_spirv`].\n Returns raw slice instead of ShaderSource.","sig":null,"attributes":[{"value":"/ Version of make_spirv intended for use with [`Device::create_shader_module_spirv`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":189164,"byte_end":189251,"line_start":37,"line_end":37,"column_start":1,"column_end":88}},{"value":"/ Returns raw slice instead of ShaderSource.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":189252,"byte_end":189298,"line_start":38,"line_end":38,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":189299,"byte_end":189302,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`Device::create_shader_module_spirv`]: crate::Device::create_shader_module_spirv","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":189303,"byte_end":189388,"line_start":40,"line_end":40,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":190466,"byte_end":190480,"line_start":74,"line_end":74,"column_start":12,"column_end":26},"name":"DownloadBuffer","qualname":"::util::DownloadBuffer","value":"","parent":null,"children":[],"decl_id":null,"docs":" CPU accessible buffer used to download data back from the GPU.\n","sig":null,"attributes":[{"value":"/ CPU accessible buffer used to download data back from the GPU.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":190388,"byte_end":190454,"line_start":73,"line_end":73,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":190611,"byte_end":190622,"line_start":78,"line_end":78,"column_start":12,"column_end":23},"name":"read_buffer","qualname":"<DownloadBuffer>::read_buffer","value":"pub fn read_buffer(&super::Device, &super::Queue, &super::BufferSlice)\n-> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously read the contents of a buffer.\n","sig":null,"attributes":[{"value":"/ Asynchronously read the contents of a buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":190550,"byte_end":190599,"line_start":77,"line_end":77,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":1007},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5650,"byte_end":5659,"line_start":156,"line_end":156,"column_start":10,"column_end":19},"name":"AdapterId","qualname":"::Context::AdapterId","value":"type AdapterId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5701,"byte_end":5709,"line_start":157,"line_end":157,"column_start":10,"column_end":18},"name":"DeviceId","qualname":"::Context::DeviceId","value":"type DeviceId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1009},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5751,"byte_end":5758,"line_start":158,"line_end":158,"column_start":10,"column_end":17},"name":"QueueId","qualname":"::Context::QueueId","value":"type QueueId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1010},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5800,"byte_end":5814,"line_start":159,"line_end":159,"column_start":10,"column_end":24},"name":"ShaderModuleId","qualname":"::Context::ShaderModuleId","value":"type ShaderModuleId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1011},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5856,"byte_end":5873,"line_start":160,"line_end":160,"column_start":10,"column_end":27},"name":"BindGroupLayoutId","qualname":"::Context::BindGroupLayoutId","value":"type BindGroupLayoutId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1012},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5915,"byte_end":5926,"line_start":161,"line_end":161,"column_start":10,"column_end":21},"name":"BindGroupId","qualname":"::Context::BindGroupId","value":"type BindGroupId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1013},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5968,"byte_end":5981,"line_start":162,"line_end":162,"column_start":10,"column_end":23},"name":"TextureViewId","qualname":"::Context::TextureViewId","value":"type TextureViewId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6023,"byte_end":6032,"line_start":163,"line_end":163,"column_start":10,"column_end":19},"name":"SamplerId","qualname":"::Context::SamplerId","value":"type SamplerId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1015},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6074,"byte_end":6082,"line_start":164,"line_end":164,"column_start":10,"column_end":18},"name":"BufferId","qualname":"::Context::BufferId","value":"type BufferId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1016},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6124,"byte_end":6133,"line_start":165,"line_end":165,"column_start":10,"column_end":19},"name":"TextureId","qualname":"::Context::TextureId","value":"type TextureId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6175,"byte_end":6185,"line_start":166,"line_end":166,"column_start":10,"column_end":20},"name":"QuerySetId","qualname":"::Context::QuerySetId","value":"type QuerySetId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6227,"byte_end":6243,"line_start":167,"line_end":167,"column_start":10,"column_end":26},"name":"PipelineLayoutId","qualname":"::Context::PipelineLayoutId","value":"type PipelineLayoutId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1019},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6285,"byte_end":6301,"line_start":168,"line_end":168,"column_start":10,"column_end":26},"name":"RenderPipelineId","qualname":"::Context::RenderPipelineId","value":"type RenderPipelineId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6343,"byte_end":6360,"line_start":169,"line_end":169,"column_start":10,"column_end":27},"name":"ComputePipelineId","qualname":"::Context::ComputePipelineId","value":"type ComputePipelineId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1021},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6402,"byte_end":6418,"line_start":170,"line_end":170,"column_start":10,"column_end":26},"name":"CommandEncoderId","qualname":"::Context::CommandEncoderId","value":"type CommandEncoderId: Debug;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6436,"byte_end":6449,"line_start":171,"line_end":171,"column_start":10,"column_end":23},"name":"ComputePassId","qualname":"::Context::ComputePassId","value":"type ComputePassId: Debug + ComputePassInner<Self>;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6492,"byte_end":6504,"line_start":172,"line_end":172,"column_start":10,"column_end":22},"name":"RenderPassId","qualname":"::Context::RenderPassId","value":"type RenderPassId: Debug + RenderPassInner<Self>;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1024},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6546,"byte_end":6561,"line_start":173,"line_end":173,"column_start":10,"column_end":25},"name":"CommandBufferId","qualname":"::Context::CommandBufferId","value":"type CommandBufferId: Debug + Send + Sync;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1025},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6593,"byte_end":6614,"line_start":174,"line_end":174,"column_start":10,"column_end":31},"name":"RenderBundleEncoderId","qualname":"::Context::RenderBundleEncoderId","value":"type RenderBundleEncoderId: Debug + RenderInner<Self>;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1026},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6652,"byte_end":6666,"line_start":175,"line_end":175,"column_start":10,"column_end":24},"name":"RenderBundleId","qualname":"::Context::RenderBundleId","value":"type RenderBundleId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1027},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6708,"byte_end":6717,"line_start":176,"line_end":176,"column_start":10,"column_end":19},"name":"SurfaceId","qualname":"::Context::SurfaceId","value":"type SurfaceId: Debug + Send + Sync + 'static;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1028},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6760,"byte_end":6779,"line_start":178,"line_end":178,"column_start":10,"column_end":29},"name":"SurfaceOutputDetail","qualname":"::Context::SurfaceOutputDetail","value":"type SurfaceOutputDetail: Send;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1029},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6797,"byte_end":6817,"line_start":180,"line_end":180,"column_start":10,"column_end":30},"name":"RequestAdapterFuture","qualname":"::Context::RequestAdapterFuture","value":"type RequestAdapterFuture: Future<Output = Option<Self::AdapterId>> + Send;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1030},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":6877,"byte_end":6896,"line_start":181,"line_end":181,"column_start":10,"column_end":29},"name":"RequestDeviceFuture","qualname":"::Context::RequestDeviceFuture","value":"type RequestDeviceFuture: Future<Output = Result<(Self::DeviceId, Self::QueueId), RequestDeviceError>>\n        + Send;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1031},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":7000,"byte_end":7014,"line_start":183,"line_end":183,"column_start":10,"column_end":24},"name":"MapAsyncFuture","qualname":"::Context::MapAsyncFuture","value":"type MapAsyncFuture: Future<Output = Result<(), BufferAsyncError>> + Send;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1032},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":7079,"byte_end":7104,"line_start":184,"line_end":184,"column_start":10,"column_end":35},"name":"OnSubmittedWorkDoneFuture","qualname":"::Context::OnSubmittedWorkDoneFuture","value":"type OnSubmittedWorkDoneFuture: Future<Output = ()> + Send;","parent":{"krate":0,"index":1006},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1510},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17405,"byte_end":17413,"line_start":491,"line_end":491,"column_start":12,"column_end":20},"name":"Instance","qualname":"::Instance","value":"Instance {  }","parent":null,"children":[{"krate":0,"index":1511}],"decl_id":null,"docs":" Context for all other wgpu objects. Instance of wgpu.","sig":null,"attributes":[{"value":"/ Context for all other wgpu objects. Instance of wgpu.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17155,"byte_end":17212,"line_start":484,"line_end":484,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17213,"byte_end":17216,"line_start":485,"line_end":485,"column_start":1,"column_end":4}},{"value":"/ This is the first thing you create when using wgpu.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17217,"byte_end":17272,"line_start":486,"line_end":486,"column_start":1,"column_end":56}},{"value":"/ Its primary use is to create [`Adapter`]s and [`Surface`]s.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17273,"byte_end":17336,"line_start":487,"line_end":487,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17337,"byte_end":17340,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ Does not have to be kept alive.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17341,"byte_end":17376,"line_start":489,"line_end":489,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1514},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17708,"byte_end":17715,"line_start":502,"line_end":502,"column_start":12,"column_end":19},"name":"Adapter","qualname":"::Adapter","value":"Adapter {  }","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1516}],"decl_id":null,"docs":" Handle to a physical graphics and/or compute device.","sig":null,"attributes":[{"value":"/ Handle to a physical graphics and/or compute device.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17440,"byte_end":17496,"line_start":495,"line_end":495,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17497,"byte_end":17500,"line_start":496,"line_end":496,"column_start":1,"column_end":4}},{"value":"/ Adapters can be used to open a connection to the corresponding [`Device`]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17501,"byte_end":17578,"line_start":497,"line_end":497,"column_start":1,"column_end":78}},{"value":"/ on the host system by using [`Adapter::request_device`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17579,"byte_end":17639,"line_start":498,"line_end":498,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17640,"byte_end":17643,"line_start":499,"line_end":499,"column_start":1,"column_end":4}},{"value":"/ Does not have to be kept alive.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17644,"byte_end":17679,"line_start":500,"line_end":500,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1519},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18247,"byte_end":18253,"line_start":522,"line_end":522,"column_start":12,"column_end":18},"name":"Device","qualname":"::Device","value":"Device {  }","parent":null,"children":[{"krate":0,"index":1520},{"krate":0,"index":1521}],"decl_id":null,"docs":" Open connection to a graphics and/or compute device.","sig":null,"attributes":[{"value":"/ Open connection to a graphics and/or compute device.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17927,"byte_end":17983,"line_start":515,"line_end":515,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17984,"byte_end":17987,"line_start":516,"line_end":516,"column_start":1,"column_end":4}},{"value":"/ Responsible for the creation of most rendering and compute resources.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17988,"byte_end":18061,"line_start":517,"line_end":517,"column_start":1,"column_end":74}},{"value":"/ These are then used in commands, which are submitted to a [`Queue`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18062,"byte_end":18134,"line_start":518,"line_end":518,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18135,"byte_end":18138,"line_start":519,"line_end":519,"column_start":1,"column_end":4}},{"value":"/ A device may be requested from an adapter with [`Adapter::request_device`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18139,"byte_end":18218,"line_start":520,"line_end":520,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1525},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18501,"byte_end":18505,"line_start":532,"line_end":532,"column_start":5,"column_end":9},"name":"Wait","qualname":"::Maintain::Wait","value":"Maintain::Wait","parent":{"krate":0,"index":1524},"children":[],"decl_id":null,"docs":" Block\n","sig":null,"attributes":[{"value":"/ Block","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18487,"byte_end":18496,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1527},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18531,"byte_end":18535,"line_start":534,"line_end":534,"column_start":5,"column_end":9},"name":"Poll","qualname":"::Maintain::Poll","value":"Maintain::Poll","parent":{"krate":0,"index":1524},"children":[],"decl_id":null,"docs":" Don't block\n","sig":null,"attributes":[{"value":"/ Don't block","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18511,"byte_end":18526,"line_start":533,"line_end":533,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":1524},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18472,"byte_end":18480,"line_start":530,"line_end":530,"column_start":10,"column_end":18},"name":"Maintain","qualname":"::Maintain","value":"pub enum Maintain { Wait, Poll, }","parent":null,"children":[{"krate":0,"index":1525},{"krate":0,"index":1527}],"decl_id":null,"docs":" Passed to [`Device::poll`] to control if it should block or not. This has no effect on\n the web.\n","sig":null,"attributes":[{"value":"/ Passed to [`Device::poll`] to control if it should block or not. This has no effect on","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18314,"byte_end":18404,"line_start":527,"line_end":527,"column_start":1,"column_end":91}},{"value":"/ the web.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18405,"byte_end":18417,"line_start":528,"line_end":528,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":1546},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20470,"byte_end":20476,"line_start":601,"line_end":601,"column_start":12,"column_end":18},"name":"Buffer","qualname":"::Buffer","value":"Buffer {  }","parent":null,"children":[{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1549},{"krate":0,"index":1550}],"decl_id":null,"docs":" Handle to a GPU-accessible buffer.","sig":null,"attributes":[{"value":"/ Handle to a GPU-accessible buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20277,"byte_end":20315,"line_start":596,"line_end":596,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20316,"byte_end":20319,"line_start":597,"line_end":597,"column_start":1,"column_end":4}},{"value":"/ Created with [`Device::create_buffer`] or","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20320,"byte_end":20365,"line_start":598,"line_end":598,"column_start":1,"column_end":46}},{"value":"/ [`DeviceExt::create_buffer_init`](util::DeviceExt::create_buffer_init).","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20366,"byte_end":20441,"line_start":599,"line_end":599,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1553},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20793,"byte_end":20804,"line_start":614,"line_end":614,"column_start":12,"column_end":23},"name":"BufferSlice","qualname":"::BufferSlice","value":"BufferSlice {  }","parent":null,"children":[{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1557}],"decl_id":null,"docs":" Slice into a [`Buffer`].","sig":null,"attributes":[{"value":"/ Slice into a [`Buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20598,"byte_end":20626,"line_start":608,"line_end":608,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20627,"byte_end":20630,"line_start":609,"line_end":609,"column_start":1,"column_end":4}},{"value":"/ Created by calling [`Buffer::slice`]. To use the whole buffer, call with unbounded slice:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20631,"byte_end":20724,"line_start":610,"line_end":610,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20725,"byte_end":20728,"line_start":611,"line_end":611,"column_start":1,"column_end":4}},{"value":"/ `buffer.slice(..)`","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20729,"byte_end":20751,"line_start":612,"line_end":612,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1566},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21013,"byte_end":21020,"line_start":624,"line_end":624,"column_start":12,"column_end":19},"name":"Texture","qualname":"::Texture","value":"Texture {  }","parent":null,"children":[{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1569}],"decl_id":null,"docs":" Handle to a texture on the GPU.","sig":null,"attributes":[{"value":"/ Handle to a texture on the GPU.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20895,"byte_end":20930,"line_start":620,"line_end":620,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20931,"byte_end":20934,"line_start":621,"line_end":621,"column_start":1,"column_end":4}},{"value":"/ Created by calling [`Device::create_texture`]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":20935,"byte_end":20984,"line_start":622,"line_end":622,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1572},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21285,"byte_end":21296,"line_start":635,"line_end":635,"column_start":12,"column_end":23},"name":"TextureView","qualname":"::TextureView","value":"TextureView {  }","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1574}],"decl_id":null,"docs":" Handle to a texture view.","sig":null,"attributes":[{"value":"/ Handle to a texture view.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21099,"byte_end":21128,"line_start":630,"line_end":630,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21129,"byte_end":21132,"line_start":631,"line_end":631,"column_start":1,"column_end":4}},{"value":"/ A `TextureView` object describes a texture and associated metadata needed by a","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21133,"byte_end":21215,"line_start":632,"line_end":632,"column_start":1,"column_end":83}},{"value":"/ [`RenderPipeline`] or [`BindGroup`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21216,"byte_end":21256,"line_start":633,"line_end":633,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1577},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21682,"byte_end":21689,"line_start":646,"line_end":646,"column_start":12,"column_end":19},"name":"Sampler","qualname":"::Sampler","value":"Sampler {  }","parent":null,"children":[{"krate":0,"index":1578},{"krate":0,"index":1579}],"decl_id":null,"docs":" Handle to a sampler.","sig":null,"attributes":[{"value":"/ Handle to a sampler.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21362,"byte_end":21386,"line_start":640,"line_end":640,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21387,"byte_end":21390,"line_start":641,"line_end":641,"column_start":1,"column_end":4}},{"value":"/ A `Sampler` object defines how a pipeline will sample from a [`TextureView`]. Samplers define","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21391,"byte_end":21488,"line_start":642,"line_end":642,"column_start":1,"column_end":98}},{"value":"/ image filters (including anisotropy) and address (wrapping) modes, among other things. See","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21489,"byte_end":21583,"line_start":643,"line_end":643,"column_start":1,"column_end":95}},{"value":"/ the documentation for [`SamplerDescriptor`] for more information.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21584,"byte_end":21653,"line_start":644,"line_end":644,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1582},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22173,"byte_end":22180,"line_start":664,"line_end":664,"column_start":12,"column_end":19},"name":"Surface","qualname":"::Surface","value":"Surface {  }","parent":null,"children":[{"krate":0,"index":1583},{"krate":0,"index":1584}],"decl_id":null,"docs":" Handle to a presentable surface.","sig":null,"attributes":[{"value":"/ Handle to a presentable surface.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21902,"byte_end":21938,"line_start":659,"line_end":659,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21939,"byte_end":21942,"line_start":660,"line_end":660,"column_start":1,"column_end":4}},{"value":"/ A `Surface` represents a platform-specific surface (e.g. a window) onto which rendered images may","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21943,"byte_end":22044,"line_start":661,"line_end":661,"column_start":1,"column_end":102}},{"value":"/ be presented. A `Surface` may be created with the unsafe function [`Instance::create_surface`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22045,"byte_end":22144,"line_start":662,"line_end":662,"column_start":1,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":1587},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22847,"byte_end":22862,"line_start":684,"line_end":684,"column_start":12,"column_end":27},"name":"BindGroupLayout","qualname":"::BindGroupLayout","value":"BindGroupLayout {  }","parent":null,"children":[{"krate":0,"index":1588},{"krate":0,"index":1589}],"decl_id":null,"docs":" Handle to a binding group layout.","sig":null,"attributes":[{"value":"/ Handle to a binding group layout.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22392,"byte_end":22429,"line_start":677,"line_end":677,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22430,"byte_end":22433,"line_start":678,"line_end":678,"column_start":1,"column_end":4}},{"value":"/ A `BindGroupLayout` is a handle to the GPU-side layout of a binding group. It can be used to","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22434,"byte_end":22530,"line_start":679,"line_end":679,"column_start":1,"column_end":97}},{"value":"/ create a [`BindGroupDescriptor`] object, which in turn can be used to create a [`BindGroup`]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22531,"byte_end":22627,"line_start":680,"line_end":680,"column_start":1,"column_end":97}},{"value":"/ object with [`Device::create_bind_group`]. A series of `BindGroupLayout`s can also be used to","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22628,"byte_end":22725,"line_start":681,"line_end":681,"column_start":1,"column_end":98}},{"value":"/ create a [`PipelineLayoutDescriptor`], which can be used to create a [`PipelineLayout`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22726,"byte_end":22818,"line_start":682,"line_end":682,"column_start":1,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":1592},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23495,"byte_end":23504,"line_start":704,"line_end":704,"column_start":12,"column_end":21},"name":"BindGroup","qualname":"::BindGroup","value":"BindGroup {  }","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1594}],"decl_id":null,"docs":" Handle to a binding group.","sig":null,"attributes":[{"value":"/ Handle to a binding group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23101,"byte_end":23131,"line_start":697,"line_end":697,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23132,"byte_end":23135,"line_start":698,"line_end":698,"column_start":1,"column_end":4}},{"value":"/ A `BindGroup` represents the set of resources bound to the bindings described by a","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23136,"byte_end":23222,"line_start":699,"line_end":699,"column_start":1,"column_end":87}},{"value":"/ [`BindGroupLayout`]. It can be created with [`Device::create_bind_group`]. A `BindGroup` can","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23223,"byte_end":23319,"line_start":700,"line_end":700,"column_start":1,"column_end":97}},{"value":"/ be bound to a particular [`RenderPass`] with [`RenderPass::set_bind_group`], or to a","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23320,"byte_end":23408,"line_start":701,"line_end":701,"column_start":1,"column_end":89}},{"value":"/ [`ComputePass`] with [`ComputePass::set_bind_group`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23409,"byte_end":23466,"line_start":702,"line_end":702,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1597},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24033,"byte_end":24045,"line_start":723,"line_end":723,"column_start":12,"column_end":24},"name":"ShaderModule","qualname":"::ShaderModule","value":"ShaderModule {  }","parent":null,"children":[{"krate":0,"index":1598},{"krate":0,"index":1599}],"decl_id":null,"docs":" Handle to a compiled shader module.","sig":null,"attributes":[{"value":"/ Handle to a compiled shader module.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23724,"byte_end":23763,"line_start":717,"line_end":717,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23764,"byte_end":23767,"line_start":718,"line_end":718,"column_start":1,"column_end":4}},{"value":"/ A `ShaderModule` represents a compiled shader module on the GPU. It can be created by passing","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23768,"byte_end":23865,"line_start":719,"line_end":719,"column_start":1,"column_end":98}},{"value":"/ valid SPIR-V source code to [`Device::create_shader_module`]. Shader modules are used to define","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23866,"byte_end":23965,"line_start":720,"line_end":720,"column_start":1,"column_end":100}},{"value":"/ programmable stages of a pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23966,"byte_end":24004,"line_start":721,"line_end":721,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1139},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24840,"byte_end":24844,"line_start":750,"line_end":750,"column_start":5,"column_end":9},"name":"Wgsl","qualname":"::ShaderSource::Wgsl","value":"ShaderSource::Wgsl(Cow)","parent":{"krate":0,"index":1137},"children":[],"decl_id":null,"docs":" WGSL module as a string slice.","sig":null,"attributes":[{"value":"/ WGSL module as a string slice.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24598,"byte_end":24632,"line_start":744,"line_end":744,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24637,"byte_end":24640,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ wgpu-rs will parse it and use for validation. It will attempt","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24645,"byte_end":24710,"line_start":746,"line_end":746,"column_start":5,"column_end":70}},{"value":"/ to build a SPIR-V module internally and panic otherwise.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24715,"byte_end":24775,"line_start":747,"line_end":747,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24780,"byte_end":24783,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ Note: WGSL is not yet supported on the Web.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24788,"byte_end":24835,"line_start":749,"line_end":749,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24314,"byte_end":24326,"line_start":737,"line_end":737,"column_start":10,"column_end":22},"name":"ShaderSource","qualname":"::ShaderSource","value":"pub enum ShaderSource<'a> { Wgsl(Cow), }","parent":null,"children":[{"krate":0,"index":1139}],"decl_id":null,"docs":" Source of a shader module.\n","sig":null,"attributes":[{"value":"/ Source of a shader module.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24274,"byte_end":24304,"line_start":736,"line_end":736,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1142},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24910,"byte_end":24932,"line_start":754,"line_end":754,"column_start":12,"column_end":34},"name":"ShaderModuleDescriptor","qualname":"::ShaderModuleDescriptor","value":"ShaderModuleDescriptor { label, source }","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1145}],"decl_id":null,"docs":" Descriptor for a shader module.\n","sig":null,"attributes":[{"value":"/ Descriptor for a shader module.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24863,"byte_end":24898,"line_start":753,"line_end":753,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1144},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25054,"byte_end":25059,"line_start":756,"line_end":756,"column_start":9,"column_end":14},"name":"label","qualname":"::ShaderModuleDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1142},"children":[],"decl_id":null,"docs":" Debug label of the shader module. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the shader module. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24943,"byte_end":25045,"line_start":755,"line_end":755,"column_start":5,"column_end":107}}]},{"kind":"Field","id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25116,"byte_end":25122,"line_start":758,"line_end":758,"column_start":9,"column_end":15},"name":"source","qualname":"::ShaderModuleDescriptor::source","value":"ShaderSource<'a>","parent":{"krate":0,"index":1142},"children":[],"decl_id":null,"docs":" Source code for the shader.\n","sig":null,"attributes":[{"value":"/ Source code for the shader.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25076,"byte_end":25107,"line_start":757,"line_end":757,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1146},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25215,"byte_end":25242,"line_start":762,"line_end":762,"column_start":12,"column_end":39},"name":"ShaderModuleDescriptorSpirV","qualname":"::ShaderModuleDescriptorSpirV","value":"ShaderModuleDescriptorSpirV { label, source }","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149}],"decl_id":null,"docs":" Descriptor for a shader module given by SPIR-V binary.\n","sig":null,"attributes":[{"value":"/ Descriptor for a shader module given by SPIR-V binary.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25145,"byte_end":25203,"line_start":761,"line_end":761,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1148},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25364,"byte_end":25369,"line_start":764,"line_end":764,"column_start":9,"column_end":14},"name":"label","qualname":"::ShaderModuleDescriptorSpirV::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1146},"children":[],"decl_id":null,"docs":" Debug label of the shader module. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the shader module. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25253,"byte_end":25355,"line_start":763,"line_end":763,"column_start":5,"column_end":107}}]},{"kind":"Field","id":{"krate":0,"index":1149},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25435,"byte_end":25441,"line_start":766,"line_end":766,"column_start":9,"column_end":15},"name":"source","qualname":"::ShaderModuleDescriptorSpirV::source","value":"std::borrow::Cow<'a, [u32]>","parent":{"krate":0,"index":1146},"children":[],"decl_id":null,"docs":" Binary SPIR-V data, in 4-byte words.\n","sig":null,"attributes":[{"value":"/ Binary SPIR-V data, in 4-byte words.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25386,"byte_end":25426,"line_start":765,"line_end":765,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1602},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25611,"byte_end":25625,"line_start":773,"line_end":773,"column_start":12,"column_end":26},"name":"PipelineLayout","qualname":"::PipelineLayout","value":"PipelineLayout {  }","parent":null,"children":[{"krate":0,"index":1603},{"krate":0,"index":1604}],"decl_id":null,"docs":" Handle to a pipeline layout.","sig":null,"attributes":[{"value":"/ Handle to a pipeline layout.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25462,"byte_end":25494,"line_start":769,"line_end":769,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25495,"byte_end":25498,"line_start":770,"line_end":770,"column_start":1,"column_end":4}},{"value":"/ A `PipelineLayout` object describes the available binding groups of a pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25499,"byte_end":25582,"line_start":771,"line_end":771,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":1607},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26133,"byte_end":26147,"line_start":791,"line_end":791,"column_start":12,"column_end":26},"name":"RenderPipeline","qualname":"::RenderPipeline","value":"RenderPipeline {  }","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1609}],"decl_id":null,"docs":" Handle to a rendering (graphics) pipeline.","sig":null,"attributes":[{"value":"/ Handle to a rendering (graphics) pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25860,"byte_end":25906,"line_start":786,"line_end":786,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25907,"byte_end":25910,"line_start":787,"line_end":787,"column_start":1,"column_end":4}},{"value":"/ A `RenderPipeline` object represents a graphics pipeline and its stages, bindings, vertex","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25911,"byte_end":26004,"line_start":788,"line_end":788,"column_start":1,"column_end":94}},{"value":"/ buffers and targets. A `RenderPipeline` may be created with [`Device::create_render_pipeline`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26005,"byte_end":26104,"line_start":789,"line_end":789,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26490,"byte_end":26511,"line_start":806,"line_end":806,"column_start":12,"column_end":33},"name":"get_bind_group_layout","qualname":"<RenderPipeline>::get_bind_group_layout","value":"pub fn get_bind_group_layout(&Self, u32) -> BindGroupLayout","parent":null,"children":[],"decl_id":null,"docs":" Get an object representing the bind group layout at a given index.\n","sig":null,"attributes":[{"value":"/ Get an object representing the bind group layout at a given index.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26408,"byte_end":26478,"line_start":805,"line_end":805,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1612},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27023,"byte_end":27038,"line_start":822,"line_end":822,"column_start":12,"column_end":27},"name":"ComputePipeline","qualname":"::ComputePipeline","value":"ComputePipeline {  }","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614}],"decl_id":null,"docs":" Handle to a compute pipeline.","sig":null,"attributes":[{"value":"/ Handle to a compute pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26786,"byte_end":26819,"line_start":817,"line_end":817,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26820,"byte_end":26823,"line_start":818,"line_end":818,"column_start":1,"column_end":4}},{"value":"/ A `ComputePipeline` object represents a compute pipeline and its single shader stage.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26824,"byte_end":26913,"line_start":819,"line_end":819,"column_start":1,"column_end":90}},{"value":"/ A `ComputePipeline` may be created with [`Device::create_compute_pipeline`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26914,"byte_end":26994,"line_start":820,"line_end":820,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27385,"byte_end":27406,"line_start":837,"line_end":837,"column_start":12,"column_end":33},"name":"get_bind_group_layout","qualname":"<ComputePipeline>::get_bind_group_layout","value":"pub fn get_bind_group_layout(&Self, u32) -> BindGroupLayout","parent":null,"children":[],"decl_id":null,"docs":" Get an object representing the bind group layout at a given index.\n","sig":null,"attributes":[{"value":"/ Get an object representing the bind group layout at a given index.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27303,"byte_end":27373,"line_start":836,"line_end":836,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1617},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28028,"byte_end":28041,"line_start":854,"line_end":854,"column_start":12,"column_end":25},"name":"CommandBuffer","qualname":"::CommandBuffer","value":"CommandBuffer {  }","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1619}],"decl_id":null,"docs":" Handle to a command buffer on the GPU.","sig":null,"attributes":[{"value":"/ Handle to a command buffer on the GPU.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27682,"byte_end":27724,"line_start":848,"line_end":848,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27725,"byte_end":27728,"line_start":849,"line_end":849,"column_start":1,"column_end":4}},{"value":"/ A `CommandBuffer` represents a complete sequence of commands that may be submitted to a command","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27729,"byte_end":27828,"line_start":850,"line_end":850,"column_start":1,"column_end":100}},{"value":"/ queue with [`Queue::submit`]. A `CommandBuffer` is obtained by recording a series of commands to","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27829,"byte_end":27929,"line_start":851,"line_end":851,"column_start":1,"column_end":101}},{"value":"/ a [`CommandEncoder`] and then calling [`CommandEncoder::finish`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27930,"byte_end":27999,"line_start":852,"line_end":852,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1622},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28712,"byte_end":28726,"line_start":877,"line_end":877,"column_start":12,"column_end":26},"name":"CommandEncoder","qualname":"::CommandEncoder","value":"CommandEncoder {  }","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625}],"decl_id":null,"docs":" Encodes a series of GPU operations.","sig":null,"attributes":[{"value":"/ Encodes a series of GPU operations.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28337,"byte_end":28376,"line_start":869,"line_end":869,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28377,"byte_end":28380,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ A command encoder can record [`RenderPass`]es, [`ComputePass`]es,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28381,"byte_end":28450,"line_start":871,"line_end":871,"column_start":1,"column_end":70}},{"value":"/ and transfer operations between driver-managed resources like [`Buffer`]s and [`Texture`]s.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28451,"byte_end":28546,"line_start":872,"line_end":872,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28547,"byte_end":28550,"line_start":873,"line_end":873,"column_start":1,"column_end":4}},{"value":"/ When finished recording, call [`CommandEncoder::finish`] to obtain a [`CommandBuffer`] which may","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28551,"byte_end":28651,"line_start":874,"line_end":874,"column_start":1,"column_end":101}},{"value":"/ be submitted for execution.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28652,"byte_end":28683,"line_start":875,"line_end":875,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1628},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29251,"byte_end":29261,"line_start":897,"line_end":897,"column_start":12,"column_end":22},"name":"RenderPass","qualname":"::RenderPass","value":"RenderPass {  }","parent":null,"children":[{"krate":0,"index":1630},{"krate":0,"index":1631}],"decl_id":null,"docs":" In-progress recording of a render pass.\n","sig":null,"attributes":[{"value":"/ In-progress recording of a render pass.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29179,"byte_end":29222,"line_start":895,"line_end":895,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1635},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29418,"byte_end":29429,"line_start":904,"line_end":904,"column_start":12,"column_end":23},"name":"ComputePass","qualname":"::ComputePass","value":"ComputePass {  }","parent":null,"children":[{"krate":0,"index":1637},{"krate":0,"index":1638}],"decl_id":null,"docs":" In-progress recording of a compute pass.\n","sig":null,"attributes":[{"value":"/ In-progress recording of a compute pass.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29345,"byte_end":29389,"line_start":902,"line_end":902,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1642},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29908,"byte_end":29927,"line_start":916,"line_end":916,"column_start":12,"column_end":31},"name":"RenderBundleEncoder","qualname":"::RenderBundleEncoder","value":"RenderBundleEncoder {  }","parent":null,"children":[{"krate":0,"index":1644},{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1647}],"decl_id":null,"docs":" Encodes a series of GPU operations into a reusable \"render bundle\".","sig":null,"attributes":[{"value":"/ Encodes a series of GPU operations into a reusable \"render bundle\".","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29514,"byte_end":29585,"line_start":909,"line_end":909,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29586,"byte_end":29589,"line_start":910,"line_end":910,"column_start":1,"column_end":4}},{"value":"/ It only supports a handful of render commands, but it makes them reusable. [`RenderBundle`]s","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29590,"byte_end":29686,"line_start":911,"line_end":911,"column_start":1,"column_end":97}},{"value":"/ can be executed onto a [`CommandEncoder`] using [`RenderPass::execute_bundles`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29687,"byte_end":29771,"line_start":912,"line_end":912,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29772,"byte_end":29775,"line_start":913,"line_end":913,"column_start":1,"column_end":4}},{"value":"/ Executing a [`RenderBundle`] is often more efficient then issuing the underlying commands manually.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":29776,"byte_end":29879,"line_start":914,"line_end":914,"column_start":1,"column_end":104}}]},{"kind":"Struct","id":{"krate":0,"index":1651},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30554,"byte_end":30566,"line_start":932,"line_end":932,"column_start":12,"column_end":24},"name":"RenderBundle","qualname":"::RenderBundle","value":"RenderBundle {  }","parent":null,"children":[{"krate":0,"index":1652},{"krate":0,"index":1653}],"decl_id":null,"docs":" Pre-prepared reusable bundle of GPU operations.","sig":null,"attributes":[{"value":"/ Pre-prepared reusable bundle of GPU operations.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30180,"byte_end":30231,"line_start":925,"line_end":925,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30232,"byte_end":30235,"line_start":926,"line_end":926,"column_start":1,"column_end":4}},{"value":"/ It only supports a handful of render commands, but it makes them reusable. [`RenderBundle`]s","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30236,"byte_end":30332,"line_start":927,"line_end":927,"column_start":1,"column_end":97}},{"value":"/ can be executed onto a [`CommandEncoder`] using [`RenderPass::execute_bundles`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30333,"byte_end":30417,"line_start":928,"line_end":928,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30418,"byte_end":30421,"line_start":929,"line_end":929,"column_start":1,"column_end":4}},{"value":"/ Executing a [`RenderBundle`] is often more efficient then issuing the underlying commands manually.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30422,"byte_end":30525,"line_start":930,"line_end":930,"column_start":1,"column_end":104}}]},{"kind":"Struct","id":{"krate":0,"index":1166},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30833,"byte_end":30841,"line_start":946,"line_end":946,"column_start":12,"column_end":20},"name":"QuerySet","qualname":"::QuerySet","value":"QuerySet {  }","parent":null,"children":[{"krate":0,"index":1167},{"krate":0,"index":1168}],"decl_id":null,"docs":" Handle to a query set.\n","sig":null,"attributes":[{"value":"/ Handle to a query set.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30795,"byte_end":30821,"line_start":945,"line_end":945,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1656},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31312,"byte_end":31317,"line_start":964,"line_end":964,"column_start":12,"column_end":17},"name":"Queue","qualname":"::Queue","value":"Queue {  }","parent":null,"children":[{"krate":0,"index":1657},{"krate":0,"index":1658}],"decl_id":null,"docs":" Handle to a command queue on a device.","sig":null,"attributes":[{"value":"/ Handle to a command queue on a device.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31058,"byte_end":31100,"line_start":959,"line_end":959,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31101,"byte_end":31104,"line_start":960,"line_end":960,"column_start":1,"column_end":4}},{"value":"/ A `Queue` executes recorded [`CommandBuffer`] objects and provides convenience methods","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31105,"byte_end":31195,"line_start":961,"line_end":961,"column_start":1,"column_end":91}},{"value":"/ for writing to [buffers](Queue::write_buffer) and [textures](Queue::write_texture).","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31196,"byte_end":31283,"line_start":962,"line_end":962,"column_start":1,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1663},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31704,"byte_end":31710,"line_start":977,"line_end":977,"column_start":5,"column_end":11},"name":"Buffer","qualname":"::BindingResource::Buffer","value":"BindingResource::Buffer(BufferBinding)","parent":{"krate":0,"index":1661},"children":[],"decl_id":null,"docs":" Binding is backed by a buffer.","sig":null,"attributes":[{"value":"/ Binding is backed by a buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31500,"byte_end":31534,"line_start":973,"line_end":973,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31539,"byte_end":31542,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Corresponds to [`wgt::BufferBindingType::Uniform`] and [`wgt::BufferBindingType::Storage`]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31547,"byte_end":31641,"line_start":975,"line_end":975,"column_start":5,"column_end":99}},{"value":"/ with [`BindGroupLayoutEntry::count`] set to None.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31646,"byte_end":31699,"line_start":976,"line_end":976,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1666},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32040,"byte_end":32051,"line_start":984,"line_end":984,"column_start":5,"column_end":16},"name":"BufferArray","qualname":"::BindingResource::BufferArray","value":"BindingResource::BufferArray(&'a [BufferBinding])","parent":{"krate":0,"index":1661},"children":[],"decl_id":null,"docs":" Binding is backed by an array of buffers.","sig":null,"attributes":[{"value":"/ Binding is backed by an array of buffers.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31735,"byte_end":31780,"line_start":978,"line_end":978,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31785,"byte_end":31788,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ [`Features::BUFFER_BINDING_ARRAY`] must be supported to use this feature.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31793,"byte_end":31870,"line_start":980,"line_end":980,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31875,"byte_end":31878,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ Corresponds to [`wgt::BufferBindingType::Uniform`] and [`wgt::BufferBindingType::Storage`]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31883,"byte_end":31977,"line_start":982,"line_end":982,"column_start":5,"column_end":99}},{"value":"/ with [`BindGroupLayoutEntry::count`] set to Some.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31982,"byte_end":32035,"line_start":983,"line_end":983,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1669},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32223,"byte_end":32230,"line_start":988,"line_end":988,"column_start":5,"column_end":12},"name":"Sampler","qualname":"::BindingResource::Sampler","value":"BindingResource::Sampler(&'a Sampler)","parent":{"krate":0,"index":1661},"children":[],"decl_id":null,"docs":" Binding is a sampler.","sig":null,"attributes":[{"value":"/ Binding is a sampler.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32082,"byte_end":32107,"line_start":985,"line_end":985,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32112,"byte_end":32115,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ Corresponds to [`wgt::BindingType::Sampler`] with [`BindGroupLayoutEntry::count`] set to None.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32120,"byte_end":32218,"line_start":987,"line_end":987,"column_start":5,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1672},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32449,"byte_end":32460,"line_start":993,"line_end":993,"column_start":5,"column_end":16},"name":"TextureView","qualname":"::BindingResource::TextureView","value":"BindingResource::TextureView(&'a TextureView)","parent":{"krate":0,"index":1661},"children":[],"decl_id":null,"docs":" Binding is backed by a texture.","sig":null,"attributes":[{"value":"/ Binding is backed by a texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32249,"byte_end":32284,"line_start":989,"line_end":989,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32289,"byte_end":32292,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ Corresponds to [`wgt::BindingType::Texture`] and [`wgt::BindingType::StorageTexture`] with","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32297,"byte_end":32391,"line_start":991,"line_end":991,"column_start":5,"column_end":99}},{"value":"/ [`BindGroupLayoutEntry::count`] set to None.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32396,"byte_end":32444,"line_start":992,"line_end":992,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1675},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32785,"byte_end":32801,"line_start":1000,"line_end":1000,"column_start":5,"column_end":21},"name":"TextureViewArray","qualname":"::BindingResource::TextureViewArray","value":"BindingResource::TextureViewArray(&'a [&'a TextureView])","parent":{"krate":0,"index":1661},"children":[],"decl_id":null,"docs":" Binding is backed by an array of textures.","sig":null,"attributes":[{"value":"/ Binding is backed by an array of textures.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32483,"byte_end":32529,"line_start":994,"line_end":994,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32534,"byte_end":32537,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ [`Features::TEXTURE_BINDING_ARRAY`] must be supported to use this feature.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32542,"byte_end":32620,"line_start":996,"line_end":996,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32625,"byte_end":32628,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ Corresponds to [`wgt::BindingType::Texture`] and [`wgt::BindingType::StorageTexture`] with","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32633,"byte_end":32727,"line_start":998,"line_end":998,"column_start":5,"column_end":99}},{"value":"/ [`BindGroupLayoutEntry::count`] set to Some.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32732,"byte_end":32780,"line_start":999,"line_end":999,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":1661},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31474,"byte_end":31489,"line_start":972,"line_end":972,"column_start":10,"column_end":25},"name":"BindingResource","qualname":"::BindingResource","value":"pub enum BindingResource<'a> {\n    Buffer(BufferBinding),\n    BufferArray(&'a [BufferBinding]),\n    Sampler(&'a Sampler),\n    TextureView(&'a TextureView),\n    TextureViewArray(&'a [&'a TextureView]),\n}","parent":null,"children":[{"krate":0,"index":1663},{"krate":0,"index":1666},{"krate":0,"index":1669},{"krate":0,"index":1672},{"krate":0,"index":1675}],"decl_id":null,"docs":" Resource that can be bound to a pipeline.\n","sig":null,"attributes":[{"value":"/ Resource that can be bound to a pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31377,"byte_end":31422,"line_start":969,"line_end":969,"column_start":1,"column_end":46}},{"value":"non_exhaustive","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":31423,"byte_end":31440,"line_start":970,"line_end":970,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1684},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32911,"byte_end":32924,"line_start":1005,"line_end":1005,"column_start":12,"column_end":25},"name":"BufferBinding","qualname":"::BufferBinding","value":"BufferBinding { buffer, offset, size }","parent":null,"children":[{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688}],"decl_id":null,"docs":" Describes the segment of a buffer to bind.\n","sig":null,"attributes":[{"value":"/ Describes the segment of a buffer to bind.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32829,"byte_end":32875,"line_start":1003,"line_end":1003,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1686},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32967,"byte_end":32973,"line_start":1007,"line_end":1007,"column_start":9,"column_end":15},"name":"buffer","qualname":"::BufferBinding::buffer","value":"&'a Buffer","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" The buffer to bind.\n","sig":null,"attributes":[{"value":"/ The buffer to bind.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32935,"byte_end":32958,"line_start":1006,"line_end":1006,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1687},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33242,"byte_end":33248,"line_start":1012,"line_end":1012,"column_start":9,"column_end":15},"name":"offset","qualname":"::BufferBinding::offset","value":"u64","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" Base offset of the buffer. For bindings with `dynamic == true`, this offset\n will be added to the dynamic offset provided in [`RenderPass::set_bind_group`].","sig":null,"attributes":[{"value":"/ Base offset of the buffer. For bindings with `dynamic == true`, this offset","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":32991,"byte_end":33070,"line_start":1008,"line_end":1008,"column_start":5,"column_end":84}},{"value":"/ will be added to the dynamic offset provided in [`RenderPass::set_bind_group`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33075,"byte_end":33158,"line_start":1009,"line_end":1009,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33163,"byte_end":33166,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ The offset has to be aligned to [`BIND_BUFFER_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33171,"byte_end":33233,"line_start":1011,"line_end":1011,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":1688},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33346,"byte_end":33350,"line_start":1014,"line_end":1014,"column_start":9,"column_end":13},"name":"size","qualname":"::BufferBinding::size","value":"std::option::Option<std::num::NonZeroU64>","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" Size of the binding, or `None` for using the rest of the buffer.\n","sig":null,"attributes":[{"value":"/ Size of the binding, or `None` for using the rest of the buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33269,"byte_end":33337,"line_start":1013,"line_end":1013,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1697},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33772,"byte_end":33777,"line_start":1025,"line_end":1025,"column_start":5,"column_end":10},"name":"Clear","qualname":"::LoadOp::Clear","value":"LoadOp::Clear(V)","parent":{"krate":0,"index":1695},"children":[],"decl_id":null,"docs":" Clear with a specified value.\n","sig":null,"attributes":[{"value":"/ Clear with a specified value.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33734,"byte_end":33767,"line_start":1024,"line_end":1024,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33812,"byte_end":33816,"line_start":1027,"line_end":1027,"column_start":5,"column_end":9},"name":"Load","qualname":"::LoadOp::Load","value":"LoadOp::Load","parent":{"krate":0,"index":1695},"children":[],"decl_id":null,"docs":" Load from memory.\n","sig":null,"attributes":[{"value":"/ Load from memory.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33786,"byte_end":33807,"line_start":1026,"line_end":1026,"column_start":5,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":1695},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33718,"byte_end":33724,"line_start":1023,"line_end":1023,"column_start":10,"column_end":16},"name":"LoadOp","qualname":"::LoadOp","value":"pub enum LoadOp<V> { Clear(V), Load, }","parent":null,"children":[{"krate":0,"index":1697},{"krate":0,"index":1700}],"decl_id":null,"docs":" Operation to perform to the output attachment at the start of a renderpass.","sig":null,"attributes":[{"value":"/ Operation to perform to the output attachment at the start of a renderpass.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33375,"byte_end":33454,"line_start":1017,"line_end":1017,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33455,"byte_end":33458,"line_start":1018,"line_end":1018,"column_start":1,"column_end":4}},{"value":"/ The render target must be cleared at least once before its content is loaded.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33459,"byte_end":33540,"line_start":1019,"line_end":1019,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1725},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34181,"byte_end":34191,"line_start":1040,"line_end":1040,"column_start":12,"column_end":22},"name":"Operations","qualname":"::Operations","value":"Operations { load, store }","parent":null,"children":[{"krate":0,"index":1727},{"krate":0,"index":1728}],"decl_id":null,"docs":" Pair of load and store operations for an attachment aspect.\n","sig":null,"attributes":[{"value":"/ Pair of load and store operations for an attachment aspect.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33938,"byte_end":34001,"line_start":1036,"line_end":1036,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1727},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34262,"byte_end":34266,"line_start":1042,"line_end":1042,"column_start":9,"column_end":13},"name":"load","qualname":"::Operations::load","value":"LoadOp<V>","parent":{"krate":0,"index":1725},"children":[],"decl_id":null,"docs":" How data should be read through this attachment.\n","sig":null,"attributes":[{"value":"/ How data should be read through this attachment.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34201,"byte_end":34253,"line_start":1041,"line_end":1041,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1728},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34352,"byte_end":34357,"line_start":1044,"line_end":1044,"column_start":9,"column_end":14},"name":"store","qualname":"::Operations::store","value":"bool","parent":{"krate":0,"index":1725},"children":[],"decl_id":null,"docs":" Whether data will be written to through this attachment.\n","sig":null,"attributes":[{"value":"/ Whether data will be written to through this attachment.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34283,"byte_end":34343,"line_start":1043,"line_end":1043,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1752},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34626,"byte_end":34651,"line_start":1058,"line_end":1058,"column_start":12,"column_end":37},"name":"RenderPassColorAttachment","qualname":"::RenderPassColorAttachment","value":"RenderPassColorAttachment { view, resolve_target, ops }","parent":null,"children":[{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756}],"decl_id":null,"docs":" Describes a color attachment to a [`RenderPass`].\n","sig":null,"attributes":[{"value":"/ Describes a color attachment to a [`RenderPass`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34537,"byte_end":34590,"line_start":1056,"line_end":1056,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1754},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34708,"byte_end":34712,"line_start":1060,"line_end":1060,"column_start":9,"column_end":13},"name":"view","qualname":"::RenderPassColorAttachment::view","value":"&'a TextureView","parent":{"krate":0,"index":1752},"children":[],"decl_id":null,"docs":" The view to use as an attachment.\n","sig":null,"attributes":[{"value":"/ The view to use as an attachment.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34662,"byte_end":34699,"line_start":1059,"line_end":1059,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1755},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34820,"byte_end":34834,"line_start":1062,"line_end":1062,"column_start":9,"column_end":23},"name":"resolve_target","qualname":"::RenderPassColorAttachment::resolve_target","value":"std::option::Option<&'a TextureView>","parent":{"krate":0,"index":1752},"children":[],"decl_id":null,"docs":" The view that will receive the resolved output if multisampling is used.\n","sig":null,"attributes":[{"value":"/ The view that will receive the resolved output if multisampling is used.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34735,"byte_end":34811,"line_start":1061,"line_end":1061,"column_start":5,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":1756},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34937,"byte_end":34940,"line_start":1064,"line_end":1064,"column_start":9,"column_end":12},"name":"ops","qualname":"::RenderPassColorAttachment::ops","value":"Operations<wgpu_types::Color>","parent":{"krate":0,"index":1752},"children":[],"decl_id":null,"docs":" What operations will be performed on this color attachment.\n","sig":null,"attributes":[{"value":"/ What operations will be performed on this color attachment.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34865,"byte_end":34928,"line_start":1063,"line_end":1063,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1763},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35061,"byte_end":35093,"line_start":1069,"line_end":1069,"column_start":12,"column_end":44},"name":"RenderPassDepthStencilAttachment","qualname":"::RenderPassDepthStencilAttachment","value":"RenderPassDepthStencilAttachment { view, depth_ops, stencil_ops }","parent":null,"children":[{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767}],"decl_id":null,"docs":" Describes a depth/stencil attachment to a [`RenderPass`].\n","sig":null,"attributes":[{"value":"/ Describes a depth/stencil attachment to a [`RenderPass`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34964,"byte_end":35025,"line_start":1067,"line_end":1067,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":1765},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35150,"byte_end":35154,"line_start":1071,"line_end":1071,"column_start":9,"column_end":13},"name":"view","qualname":"::RenderPassDepthStencilAttachment::view","value":"&'a TextureView","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" The view to use as an attachment.\n","sig":null,"attributes":[{"value":"/ The view to use as an attachment.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35104,"byte_end":35141,"line_start":1070,"line_end":1070,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1766},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35260,"byte_end":35269,"line_start":1073,"line_end":1073,"column_start":9,"column_end":18},"name":"depth_ops","qualname":"::RenderPassDepthStencilAttachment::depth_ops","value":"std::option::Option<Operations<f32>>","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" What operations will be performed on the depth part of the attachment.\n","sig":null,"attributes":[{"value":"/ What operations will be performed on the depth part of the attachment.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35177,"byte_end":35251,"line_start":1072,"line_end":1072,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":1767},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35385,"byte_end":35396,"line_start":1075,"line_end":1075,"column_start":9,"column_end":20},"name":"stencil_ops","qualname":"::RenderPassDepthStencilAttachment::stencil_ops","value":"std::option::Option<Operations<u32>>","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":" What operations will be performed on the stencil part of the attachment.\n","sig":null,"attributes":[{"value":"/ What operations will be performed on the stencil part of the attachment.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35300,"byte_end":35376,"line_start":1074,"line_end":1074,"column_start":5,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":1177},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35536,"byte_end":35541,"line_start":1081,"line_end":1081,"column_start":10,"column_end":15},"name":"Label","qualname":"::Label","value":"Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Object label.\n","sig":null,"attributes":[{"value":"/ Object label.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35509,"byte_end":35526,"line_start":1080,"line_end":1080,"column_start":1,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":1182},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35703,"byte_end":35724,"line_start":1084,"line_end":1084,"column_start":10,"column_end":31},"name":"RequestAdapterOptions","qualname":"::RequestAdapterOptions","value":"RequestAdapterOptionsBase<&'a Surface>","parent":null,"children":[],"decl_id":null,"docs":" Additional information required when requesting an adapter.\n","sig":null,"attributes":[{"value":"/ Additional information required when requesting an adapter.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35630,"byte_end":35693,"line_start":1083,"line_end":1083,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":1184},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35808,"byte_end":35824,"line_start":1086,"line_end":1086,"column_start":10,"column_end":26},"name":"DeviceDescriptor","qualname":"::DeviceDescriptor","value":"wgt::DeviceDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`Device`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Device`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35771,"byte_end":35798,"line_start":1085,"line_end":1085,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1186},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35902,"byte_end":35918,"line_start":1088,"line_end":1088,"column_start":10,"column_end":26},"name":"BufferDescriptor","qualname":"::BufferDescriptor","value":"wgt::BufferDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`Buffer`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35865,"byte_end":35892,"line_start":1087,"line_end":1087,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1188},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36004,"byte_end":36028,"line_start":1090,"line_end":1090,"column_start":10,"column_end":34},"name":"CommandEncoderDescriptor","qualname":"::CommandEncoderDescriptor","value":"wgt::CommandEncoderDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`CommandEncoder`].\n","sig":null,"attributes":[{"value":"/ Describes a [`CommandEncoder`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":35959,"byte_end":35994,"line_start":1089,"line_end":1089,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36120,"byte_end":36142,"line_start":1092,"line_end":1092,"column_start":10,"column_end":32},"name":"RenderBundleDescriptor","qualname":"::RenderBundleDescriptor","value":"wgt::RenderBundleDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`RenderBundle`].\n","sig":null,"attributes":[{"value":"/ Describes a [`RenderBundle`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36077,"byte_end":36110,"line_start":1091,"line_end":1091,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":1192},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36227,"byte_end":36244,"line_start":1094,"line_end":1094,"column_start":10,"column_end":27},"name":"TextureDescriptor","qualname":"::TextureDescriptor","value":"wgt::TextureDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`Texture`].\n","sig":null,"attributes":[{"value":"/ Describes a [`Texture`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36189,"byte_end":36217,"line_start":1093,"line_end":1093,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":1194},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36325,"byte_end":36343,"line_start":1096,"line_end":1096,"column_start":10,"column_end":28},"name":"QuerySetDescriptor","qualname":"::QuerySetDescriptor","value":"wgt::QuerySetDescriptor<Label>","parent":null,"children":[],"decl_id":null,"docs":" Describes a [`QuerySet`].\n","sig":null,"attributes":[{"value":"/ Describes a [`QuerySet`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36286,"byte_end":36315,"line_start":1095,"line_end":1095,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1774},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36475,"byte_end":36496,"line_start":1100,"line_end":1100,"column_start":12,"column_end":33},"name":"TextureViewDescriptor","qualname":"::TextureViewDescriptor","value":"TextureViewDescriptor { label, format, dimension, aspect, base_mip_level, mip_level_count, base_array_layer, array_layer_count }","parent":null,"children":[{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783}],"decl_id":null,"docs":" Describes a [`TextureView`].\n","sig":null,"attributes":[{"value":"/ Describes a [`TextureView`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36387,"byte_end":36419,"line_start":1098,"line_end":1098,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36617,"byte_end":36622,"line_start":1102,"line_end":1102,"column_start":9,"column_end":14},"name":"label","qualname":"::TextureViewDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":" Debug label of the texture view. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the texture view. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36507,"byte_end":36608,"line_start":1101,"line_end":1101,"column_start":5,"column_end":106}}]},{"kind":"Field","id":{"krate":0,"index":1777},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36754,"byte_end":36760,"line_start":1104,"line_end":1104,"column_start":9,"column_end":15},"name":"format","qualname":"::TextureViewDescriptor::format","value":"std::option::Option<wgpu_types::TextureFormat>","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":" Format of the texture view. At this time, it must be the same as the underlying format of the texture.\n","sig":null,"attributes":[{"value":"/ Format of the texture view. At this time, it must be the same as the underlying format of the texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36639,"byte_end":36745,"line_start":1103,"line_end":1103,"column_start":5,"column_end":111}}]},{"kind":"Field","id":{"krate":0,"index":1778},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36988,"byte_end":36997,"line_start":1107,"line_end":1107,"column_start":9,"column_end":18},"name":"dimension","qualname":"::TextureViewDescriptor::dimension","value":"std::option::Option<wgpu_types::TextureViewDimension>","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":" The dimension of the texture view. For 1D textures, this must be `1D`. For 2D textures it must be one of\n `D2`, `D2Array`, `Cube`, and `CubeArray`. For 3D textures it must be `3D`\n","sig":null,"attributes":[{"value":"/ The dimension of the texture view. For 1D textures, this must be `1D`. For 2D textures it must be one of","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36789,"byte_end":36897,"line_start":1105,"line_end":1105,"column_start":5,"column_end":113}},{"value":"/ `D2`, `D2Array`, `Cube`, and `CubeArray`. For 3D textures it must be `3D`","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":36902,"byte_end":36979,"line_start":1106,"line_end":1106,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37115,"byte_end":37121,"line_start":1109,"line_end":1109,"column_start":9,"column_end":15},"name":"aspect","qualname":"::TextureViewDescriptor::aspect","value":"wgpu_types::TextureAspect","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":" Aspect of the texture. Color textures must be [`TextureAspect::All`].\n","sig":null,"attributes":[{"value":"/ Aspect of the texture. Color textures must be [`TextureAspect::All`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37033,"byte_end":37106,"line_start":1108,"line_end":1108,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":1780},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37170,"byte_end":37184,"line_start":1111,"line_end":1111,"column_start":9,"column_end":23},"name":"base_mip_level","qualname":"::TextureViewDescriptor::base_mip_level","value":"u32","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":" Base mip level.\n","sig":null,"attributes":[{"value":"/ Base mip level.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37142,"byte_end":37161,"line_start":1110,"line_end":1110,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":1781},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37427,"byte_end":37442,"line_start":1115,"line_end":1115,"column_start":9,"column_end":24},"name":"mip_level_count","qualname":"::TextureViewDescriptor::mip_level_count","value":"std::option::Option<std::num::NonZeroU32>","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":" Mip level count.\n If `Some(count)`, `base_mip_level + count` must be less or equal to underlying texture mip count.\n If `None`, considered to include the rest of the mipmap levels, but at least 1 in total.\n","sig":null,"attributes":[{"value":"/ Mip level count.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37195,"byte_end":37215,"line_start":1112,"line_end":1112,"column_start":5,"column_end":25}},{"value":"/ If `Some(count)`, `base_mip_level + count` must be less or equal to underlying texture mip count.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37220,"byte_end":37321,"line_start":1113,"line_end":1113,"column_start":5,"column_end":106}},{"value":"/ If `None`, considered to include the rest of the mipmap levels, but at least 1 in total.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37326,"byte_end":37418,"line_start":1114,"line_end":1114,"column_start":5,"column_end":97}}]},{"kind":"Field","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37498,"byte_end":37514,"line_start":1117,"line_end":1117,"column_start":9,"column_end":25},"name":"base_array_layer","qualname":"::TextureViewDescriptor::base_array_layer","value":"u32","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":" Base array layer.\n","sig":null,"attributes":[{"value":"/ Base array layer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37468,"byte_end":37489,"line_start":1116,"line_end":1116,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":1783},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37752,"byte_end":37769,"line_start":1121,"line_end":1121,"column_start":9,"column_end":26},"name":"array_layer_count","qualname":"::TextureViewDescriptor::array_layer_count","value":"std::option::Option<std::num::NonZeroU32>","parent":{"krate":0,"index":1774},"children":[],"decl_id":null,"docs":" Layer count.\n If `Some(count)`, `base_array_layer + count` must be less or equal to the underlying array count.\n If `None`, considered to include the rest of the array layers, but at least 1 in total.\n","sig":null,"attributes":[{"value":"/ Layer count.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37525,"byte_end":37541,"line_start":1118,"line_end":1118,"column_start":5,"column_end":21}},{"value":"/ If `Some(count)`, `base_array_layer + count` must be less or equal to the underlying array count.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37546,"byte_end":37647,"line_start":1119,"line_end":1119,"column_start":5,"column_end":106}},{"value":"/ If `None`, considered to include the rest of the array layers, but at least 1 in total.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37652,"byte_end":37743,"line_start":1120,"line_end":1120,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":1799},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37949,"byte_end":37973,"line_start":1128,"line_end":1128,"column_start":12,"column_end":36},"name":"PipelineLayoutDescriptor","qualname":"::PipelineLayoutDescriptor","value":"PipelineLayoutDescriptor { label, bind_group_layouts, push_constant_ranges }","parent":null,"children":[{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1803}],"decl_id":null,"docs":" Describes a pipeline layout.","sig":null,"attributes":[{"value":"/ Describes a pipeline layout.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37794,"byte_end":37826,"line_start":1124,"line_end":1124,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37827,"byte_end":37830,"line_start":1125,"line_end":1125,"column_start":1,"column_end":4}},{"value":"/ A `PipelineLayoutDescriptor` can be used to create a pipeline layout.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37831,"byte_end":37904,"line_start":1126,"line_end":1126,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":1801},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38097,"byte_end":38102,"line_start":1130,"line_end":1130,"column_start":9,"column_end":14},"name":"label","qualname":"::PipelineLayoutDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":" Debug label of the pipeline layout. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the pipeline layout. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":37984,"byte_end":38088,"line_start":1129,"line_end":1129,"column_start":5,"column_end":109}}]},{"kind":"Field","id":{"krate":0,"index":1802},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38299,"byte_end":38317,"line_start":1133,"line_end":1133,"column_start":9,"column_end":27},"name":"bind_group_layouts","qualname":"::PipelineLayoutDescriptor::bind_group_layouts","value":"&'a [&'a BindGroupLayout]","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":" Bind groups that this pipeline uses. The first entry will provide all the bindings for\n \"set = 0\", second entry will provide all the bindings for \"set = 1\" etc.\n","sig":null,"attributes":[{"value":"/ Bind groups that this pipeline uses. The first entry will provide all the bindings for","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38119,"byte_end":38209,"line_start":1131,"line_end":1131,"column_start":5,"column_end":95}},{"value":"/ \"set = 0\", second entry will provide all the bindings for \"set = 1\" etc.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38214,"byte_end":38290,"line_start":1132,"line_end":1132,"column_start":5,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":1803},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38679,"byte_end":38699,"line_start":1139,"line_end":1139,"column_start":9,"column_end":29},"name":"push_constant_ranges","qualname":"::PipelineLayoutDescriptor::push_constant_ranges","value":"&'a [wgpu_types::PushConstantRange]","parent":{"krate":0,"index":1799},"children":[],"decl_id":null,"docs":" Set of push constant ranges this pipeline uses. Each shader stage that uses push constants\n must define the range in push constant memory that corresponds to its single `layout(push_constant)`\n uniform block.","sig":null,"attributes":[{"value":"/ Set of push constant ranges this pipeline uses. Each shader stage that uses push constants","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38350,"byte_end":38444,"line_start":1134,"line_end":1134,"column_start":5,"column_end":99}},{"value":"/ must define the range in push constant memory that corresponds to its single `layout(push_constant)`","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38449,"byte_end":38553,"line_start":1135,"line_end":1135,"column_start":5,"column_end":109}},{"value":"/ uniform block.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38558,"byte_end":38576,"line_start":1136,"line_end":1136,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38581,"byte_end":38584,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ If this array is non-empty, the [`Features::PUSH_CONSTANTS`] must be enabled.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38589,"byte_end":38670,"line_start":1138,"line_end":1138,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":1813},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38803,"byte_end":38820,"line_start":1144,"line_end":1144,"column_start":12,"column_end":29},"name":"SamplerDescriptor","qualname":"::SamplerDescriptor","value":"SamplerDescriptor { label, address_mode_u, address_mode_v, address_mode_w, mag_filter, min_filter, mipmap_filter, lod_min_clamp, lod_max_clamp, compare, anisotropy_clamp, border_color }","parent":null,"children":[{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826}],"decl_id":null,"docs":" Describes a [`Sampler`]\n","sig":null,"attributes":[{"value":"/ Describes a [`Sampler`]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38729,"byte_end":38756,"line_start":1142,"line_end":1142,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1815},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38936,"byte_end":38941,"line_start":1146,"line_end":1146,"column_start":9,"column_end":14},"name":"label","qualname":"::SamplerDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" Debug label of the sampler. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the sampler. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38831,"byte_end":38927,"line_start":1145,"line_end":1145,"column_start":5,"column_end":101}}]},{"kind":"Field","id":{"krate":0,"index":1816},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39038,"byte_end":39052,"line_start":1148,"line_end":1148,"column_start":9,"column_end":23},"name":"address_mode_u","qualname":"::SamplerDescriptor::address_mode_u","value":"wgpu_types::AddressMode","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" How to deal with out of bounds accesses in the u (i.e. x) direction\n","sig":null,"attributes":[{"value":"/ How to deal with out of bounds accesses in the u (i.e. x) direction","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":38958,"byte_end":39029,"line_start":1147,"line_end":1147,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1817},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39151,"byte_end":39165,"line_start":1150,"line_end":1150,"column_start":9,"column_end":23},"name":"address_mode_v","qualname":"::SamplerDescriptor::address_mode_v","value":"wgpu_types::AddressMode","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" How to deal with out of bounds accesses in the v (i.e. y) direction\n","sig":null,"attributes":[{"value":"/ How to deal with out of bounds accesses in the v (i.e. y) direction","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39071,"byte_end":39142,"line_start":1149,"line_end":1149,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1818},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39264,"byte_end":39278,"line_start":1152,"line_end":1152,"column_start":9,"column_end":23},"name":"address_mode_w","qualname":"::SamplerDescriptor::address_mode_w","value":"wgpu_types::AddressMode","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" How to deal with out of bounds accesses in the w (i.e. z) direction\n","sig":null,"attributes":[{"value":"/ How to deal with out of bounds accesses in the w (i.e. z) direction","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39184,"byte_end":39255,"line_start":1151,"line_end":1151,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1819},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39379,"byte_end":39389,"line_start":1154,"line_end":1154,"column_start":9,"column_end":19},"name":"mag_filter","qualname":"::SamplerDescriptor::mag_filter","value":"wgpu_types::FilterMode","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" How to filter the texture when it needs to be magnified (made larger)\n","sig":null,"attributes":[{"value":"/ How to filter the texture when it needs to be magnified (made larger)","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39297,"byte_end":39370,"line_start":1153,"line_end":1153,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":1820},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39489,"byte_end":39499,"line_start":1156,"line_end":1156,"column_start":9,"column_end":19},"name":"min_filter","qualname":"::SamplerDescriptor::min_filter","value":"wgpu_types::FilterMode","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" How to filter the texture when it needs to be minified (made smaller)\n","sig":null,"attributes":[{"value":"/ How to filter the texture when it needs to be minified (made smaller)","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39407,"byte_end":39480,"line_start":1155,"line_end":1155,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":1821},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39566,"byte_end":39579,"line_start":1158,"line_end":1158,"column_start":9,"column_end":22},"name":"mipmap_filter","qualname":"::SamplerDescriptor::mipmap_filter","value":"wgpu_types::FilterMode","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" How to filter between mip map levels\n","sig":null,"attributes":[{"value":"/ How to filter between mip map levels","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39517,"byte_end":39557,"line_start":1157,"line_end":1157,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1822},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39657,"byte_end":39670,"line_start":1160,"line_end":1160,"column_start":9,"column_end":22},"name":"lod_min_clamp","qualname":"::SamplerDescriptor::lod_min_clamp","value":"f32","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" Minimum level of detail (i.e. mip level) to use\n","sig":null,"attributes":[{"value":"/ Minimum level of detail (i.e. mip level) to use","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39597,"byte_end":39648,"line_start":1159,"line_end":1159,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1823},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39741,"byte_end":39754,"line_start":1162,"line_end":1162,"column_start":9,"column_end":22},"name":"lod_max_clamp","qualname":"::SamplerDescriptor::lod_max_clamp","value":"f32","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" Maximum level of detail (i.e. mip level) to use\n","sig":null,"attributes":[{"value":"/ Maximum level of detail (i.e. mip level) to use","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39681,"byte_end":39732,"line_start":1161,"line_end":1161,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1824},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39863,"byte_end":39870,"line_start":1164,"line_end":1164,"column_start":9,"column_end":16},"name":"compare","qualname":"::SamplerDescriptor::compare","value":"std::option::Option<wgpu_types::CompareFunction>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" If this is enabled, this is a comparison sampler using the given comparison function.\n","sig":null,"attributes":[{"value":"/ If this is enabled, this is a comparison sampler using the given comparison function.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39765,"byte_end":39854,"line_start":1163,"line_end":1163,"column_start":5,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":1825},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39947,"byte_end":39963,"line_start":1166,"line_end":1166,"column_start":9,"column_end":25},"name":"anisotropy_clamp","qualname":"::SamplerDescriptor::anisotropy_clamp","value":"std::option::Option<std::num::NonZeroU8>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" Valid values: 1, 2, 4, 8, and 16.\n","sig":null,"attributes":[{"value":"/ Valid values: 1, 2, 4, 8, and 16.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39901,"byte_end":39938,"line_start":1165,"line_end":1165,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1826},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":40072,"byte_end":40084,"line_start":1168,"line_end":1168,"column_start":9,"column_end":21},"name":"border_color","qualname":"::SamplerDescriptor::border_color","value":"std::option::Option<wgpu_types::SamplerBorderColor>","parent":{"krate":0,"index":1813},"children":[],"decl_id":null,"docs":" Border color to use when address_mode is [`AddressMode::ClampToBorder`]\n","sig":null,"attributes":[{"value":"/ Border color to use when address_mode is [`AddressMode::ClampToBorder`]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":39988,"byte_end":40063,"line_start":1167,"line_end":1167,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1839},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":40777,"byte_end":40791,"line_start":1192,"line_end":1192,"column_start":12,"column_end":26},"name":"BindGroupEntry","qualname":"::BindGroupEntry","value":"BindGroupEntry { binding, resource }","parent":null,"children":[{"krate":0,"index":1841},{"krate":0,"index":1842}],"decl_id":null,"docs":" Bindable resource and the slot to bind it to.\n","sig":null,"attributes":[{"value":"/ Bindable resource and the slot to bind it to.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":40692,"byte_end":40741,"line_start":1190,"line_end":1190,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":1841},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":40952,"byte_end":40959,"line_start":1195,"line_end":1195,"column_start":9,"column_end":16},"name":"binding","qualname":"::BindGroupEntry::binding","value":"u32","parent":{"krate":0,"index":1839},"children":[],"decl_id":null,"docs":" Slot for which binding provides resource. Corresponds to an entry of the same\n binding index in the [`BindGroupLayoutDescriptor`].\n","sig":null,"attributes":[{"value":"/ Slot for which binding provides resource. Corresponds to an entry of the same","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":40802,"byte_end":40883,"line_start":1193,"line_end":1193,"column_start":5,"column_end":86}},{"value":"/ binding index in the [`BindGroupLayoutDescriptor`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":40888,"byte_end":40943,"line_start":1194,"line_end":1194,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1842},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41016,"byte_end":41024,"line_start":1197,"line_end":1197,"column_start":9,"column_end":17},"name":"resource","qualname":"::BindGroupEntry::resource","value":"BindingResource<'a>","parent":{"krate":0,"index":1839},"children":[],"decl_id":null,"docs":" Resource to attach to the binding\n","sig":null,"attributes":[{"value":"/ Resource to attach to the binding","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":40970,"byte_end":41007,"line_start":1196,"line_end":1196,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1849},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41150,"byte_end":41169,"line_start":1202,"line_end":1202,"column_start":12,"column_end":31},"name":"BindGroupDescriptor","qualname":"::BindGroupDescriptor","value":"BindGroupDescriptor { label, layout, entries }","parent":null,"children":[{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1853}],"decl_id":null,"docs":" Describes a group of bindings and the resources to be bound.\n","sig":null,"attributes":[{"value":"/ Describes a group of bindings and the resources to be bound.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41050,"byte_end":41114,"line_start":1200,"line_end":1200,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":1851},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41288,"byte_end":41293,"line_start":1204,"line_end":1204,"column_start":9,"column_end":14},"name":"label","qualname":"::BindGroupDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1849},"children":[],"decl_id":null,"docs":" Debug label of the bind group. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the bind group. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41180,"byte_end":41279,"line_start":1203,"line_end":1203,"column_start":5,"column_end":104}}]},{"kind":"Field","id":{"krate":0,"index":1852},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41383,"byte_end":41389,"line_start":1206,"line_end":1206,"column_start":9,"column_end":15},"name":"layout","qualname":"::BindGroupDescriptor::layout","value":"&'a BindGroupLayout","parent":{"krate":0,"index":1849},"children":[],"decl_id":null,"docs":" The [`BindGroupLayout`] that corresponds to this bind group.\n","sig":null,"attributes":[{"value":"/ The [`BindGroupLayout`] that corresponds to this bind group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41310,"byte_end":41374,"line_start":1205,"line_end":1205,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1853},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41470,"byte_end":41477,"line_start":1208,"line_end":1208,"column_start":9,"column_end":16},"name":"entries","qualname":"::BindGroupDescriptor::entries","value":"&'a [BindGroupEntry<'a>]","parent":{"krate":0,"index":1849},"children":[],"decl_id":null,"docs":" The resources to bind to this bind group.\n","sig":null,"attributes":[{"value":"/ The resources to bind to this bind group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41416,"byte_end":41461,"line_start":1207,"line_end":1207,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1860},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41751,"byte_end":41771,"line_start":1216,"line_end":1216,"column_start":12,"column_end":32},"name":"RenderPassDescriptor","qualname":"::RenderPassDescriptor","value":"RenderPassDescriptor { label, color_attachments, depth_stencil_attachment }","parent":null,"children":[{"krate":0,"index":1863},{"krate":0,"index":1864},{"krate":0,"index":1865}],"decl_id":null,"docs":" Describes the attachments of a render pass.","sig":null,"attributes":[{"value":"/ Describes the attachments of a render pass.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41508,"byte_end":41555,"line_start":1211,"line_end":1211,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41556,"byte_end":41559,"line_start":1212,"line_end":1212,"column_start":1,"column_end":4}},{"value":"/ Note: separate lifetimes are needed because the texture views","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41560,"byte_end":41625,"line_start":1213,"line_end":1213,"column_start":1,"column_end":66}},{"value":"/ have to live as long as the pass is recorded, while everything else doesn't.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41626,"byte_end":41706,"line_start":1214,"line_end":1214,"column_start":1,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":1863},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41895,"byte_end":41900,"line_start":1218,"line_end":1218,"column_start":9,"column_end":14},"name":"label","qualname":"::RenderPassDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1860},"children":[],"decl_id":null,"docs":" Debug label of the render pass. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the render pass. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41786,"byte_end":41886,"line_start":1217,"line_end":1217,"column_start":5,"column_end":105}}]},{"kind":"Field","id":{"krate":0,"index":1864},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41971,"byte_end":41988,"line_start":1220,"line_end":1220,"column_start":9,"column_end":26},"name":"color_attachments","qualname":"::RenderPassDescriptor::color_attachments","value":"&'b [RenderPassColorAttachment<'a>]","parent":{"krate":0,"index":1860},"children":[],"decl_id":null,"docs":" The color attachments of the render pass.\n","sig":null,"attributes":[{"value":"/ The color attachments of the render pass.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":41917,"byte_end":41962,"line_start":1219,"line_end":1219,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42104,"byte_end":42128,"line_start":1222,"line_end":1222,"column_start":9,"column_end":33},"name":"depth_stencil_attachment","qualname":"::RenderPassDescriptor::depth_stencil_attachment","value":"std::option::Option<RenderPassDepthStencilAttachment<'a>>","parent":{"krate":0,"index":1860},"children":[],"decl_id":null,"docs":" The depth and stencil attachment of the render pass, if any.\n","sig":null,"attributes":[{"value":"/ The depth and stencil attachment of the render pass, if any.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42031,"byte_end":42095,"line_start":1221,"line_end":1221,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1878},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42287,"byte_end":42305,"line_start":1227,"line_end":1227,"column_start":12,"column_end":30},"name":"VertexBufferLayout","qualname":"::VertexBufferLayout","value":"VertexBufferLayout { array_stride, step_mode, attributes }","parent":null,"children":[{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1882}],"decl_id":null,"docs":" Describes how the vertex buffer is interpreted.\n","sig":null,"attributes":[{"value":"/ Describes how the vertex buffer is interpreted.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42179,"byte_end":42230,"line_start":1225,"line_end":1225,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1880},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42383,"byte_end":42395,"line_start":1229,"line_end":1229,"column_start":9,"column_end":21},"name":"array_stride","qualname":"::VertexBufferLayout::array_stride","value":"u64","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":" The stride, in bytes, between elements of this buffer.\n","sig":null,"attributes":[{"value":"/ The stride, in bytes, between elements of this buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42316,"byte_end":42374,"line_start":1228,"line_end":1228,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":1881},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42479,"byte_end":42488,"line_start":1231,"line_end":1231,"column_start":9,"column_end":18},"name":"step_mode","qualname":"::VertexBufferLayout::step_mode","value":"wgpu_types::VertexStepMode","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":" How often this vertex buffer is \"stepped\" forward.\n","sig":null,"attributes":[{"value":"/ How often this vertex buffer is \"stepped\" forward.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42416,"byte_end":42470,"line_start":1230,"line_end":1230,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1882},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42577,"byte_end":42587,"line_start":1233,"line_end":1233,"column_start":9,"column_end":19},"name":"attributes","qualname":"::VertexBufferLayout::attributes","value":"&'a [wgpu_types::VertexAttribute]","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":" The list of attributes which comprise a single vertex.\n","sig":null,"attributes":[{"value":"/ The list of attributes which comprise a single vertex.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42510,"byte_end":42568,"line_start":1232,"line_end":1232,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1904},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42705,"byte_end":42716,"line_start":1238,"line_end":1238,"column_start":12,"column_end":23},"name":"VertexState","qualname":"::VertexState","value":"VertexState { module, entry_point, buffers }","parent":null,"children":[{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908}],"decl_id":null,"docs":" Describes the vertex process in a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the vertex process in a render pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42615,"byte_end":42669,"line_start":1236,"line_end":1236,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1906},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42782,"byte_end":42788,"line_start":1240,"line_end":1240,"column_start":9,"column_end":15},"name":"module","qualname":"::VertexState::module","value":"&'a ShaderModule","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" The compiled shader module for this stage.\n","sig":null,"attributes":[{"value":"/ The compiled shader module for this stage.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42727,"byte_end":42773,"line_start":1239,"line_end":1239,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1907},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42957,"byte_end":42968,"line_start":1243,"line_end":1243,"column_start":9,"column_end":20},"name":"entry_point","qualname":"::VertexState::entry_point","value":"&'a str","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" The name of the entry point in the compiled shader. There must be a function that returns\n void with this name in the shader.\n","sig":null,"attributes":[{"value":"/ The name of the entry point in the compiled shader. There must be a function that returns","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42812,"byte_end":42905,"line_start":1241,"line_end":1241,"column_start":5,"column_end":98}},{"value":"/ void with this name in the shader.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42910,"byte_end":42948,"line_start":1242,"line_end":1242,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1908},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43053,"byte_end":43060,"line_start":1245,"line_end":1245,"column_start":9,"column_end":16},"name":"buffers","qualname":"::VertexState::buffers","value":"&'a [VertexBufferLayout<'a>]","parent":{"krate":0,"index":1904},"children":[],"decl_id":null,"docs":" The format of any vertex buffers used with this pipeline.\n","sig":null,"attributes":[{"value":"/ The format of any vertex buffers used with this pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":42983,"byte_end":43044,"line_start":1244,"line_end":1244,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1915},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43187,"byte_end":43200,"line_start":1250,"line_end":1250,"column_start":12,"column_end":25},"name":"FragmentState","qualname":"::FragmentState","value":"FragmentState { module, entry_point, targets }","parent":null,"children":[{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919}],"decl_id":null,"docs":" Describes the fragment process in a render pipeline.\n","sig":null,"attributes":[{"value":"/ Describes the fragment process in a render pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43095,"byte_end":43151,"line_start":1248,"line_end":1248,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1917},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43266,"byte_end":43272,"line_start":1252,"line_end":1252,"column_start":9,"column_end":15},"name":"module","qualname":"::FragmentState::module","value":"&'a ShaderModule","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" The compiled shader module for this stage.\n","sig":null,"attributes":[{"value":"/ The compiled shader module for this stage.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43211,"byte_end":43257,"line_start":1251,"line_end":1251,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1918},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43441,"byte_end":43452,"line_start":1255,"line_end":1255,"column_start":9,"column_end":20},"name":"entry_point","qualname":"::FragmentState::entry_point","value":"&'a str","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" The name of the entry point in the compiled shader. There must be a function that returns\n void with this name in the shader.\n","sig":null,"attributes":[{"value":"/ The name of the entry point in the compiled shader. There must be a function that returns","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43296,"byte_end":43389,"line_start":1253,"line_end":1253,"column_start":5,"column_end":98}},{"value":"/ void with this name in the shader.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43394,"byte_end":43432,"line_start":1254,"line_end":1254,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1919},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43518,"byte_end":43525,"line_start":1257,"line_end":1257,"column_start":9,"column_end":16},"name":"targets","qualname":"::FragmentState::targets","value":"&'a [wgpu_types::ColorTargetState]","parent":{"krate":0,"index":1915},"children":[],"decl_id":null,"docs":" The color state of the render targets.\n","sig":null,"attributes":[{"value":"/ The color state of the render targets.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43467,"byte_end":43509,"line_start":1256,"line_end":1256,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1926},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43633,"byte_end":43657,"line_start":1262,"line_end":1262,"column_start":12,"column_end":36},"name":"RenderPipelineDescriptor","qualname":"::RenderPipelineDescriptor","value":"RenderPipelineDescriptor { label, layout, vertex, primitive, depth_stencil, multisample, fragment }","parent":null,"children":[{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1933},{"krate":0,"index":1934}],"decl_id":null,"docs":" Describes a render (graphics) pipeline.\n","sig":null,"attributes":[{"value":"/ Describes a render (graphics) pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43554,"byte_end":43597,"line_start":1260,"line_end":1260,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1928},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43774,"byte_end":43779,"line_start":1264,"line_end":1264,"column_start":9,"column_end":14},"name":"label","qualname":"::RenderPipelineDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1926},"children":[],"decl_id":null,"docs":" Debug label of the pipeline. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the pipeline. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43668,"byte_end":43765,"line_start":1263,"line_end":1263,"column_start":5,"column_end":102}}]},{"kind":"Field","id":{"krate":0,"index":1929},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43853,"byte_end":43859,"line_start":1266,"line_end":1266,"column_start":9,"column_end":15},"name":"layout","qualname":"::RenderPipelineDescriptor::layout","value":"std::option::Option<&'a PipelineLayout>","parent":{"krate":0,"index":1926},"children":[],"decl_id":null,"docs":" The layout of bind groups for this pipeline.\n","sig":null,"attributes":[{"value":"/ The layout of bind groups for this pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43796,"byte_end":43844,"line_start":1265,"line_end":1265,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":1930},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43979,"byte_end":43985,"line_start":1268,"line_end":1268,"column_start":9,"column_end":15},"name":"vertex","qualname":"::RenderPipelineDescriptor::vertex","value":"VertexState<'a>","parent":{"krate":0,"index":1926},"children":[],"decl_id":null,"docs":" The compiled vertex stage, its entry point, and the input buffers layout.\n","sig":null,"attributes":[{"value":"/ The compiled vertex stage, its entry point, and the input buffers layout.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":43893,"byte_end":43970,"line_start":1267,"line_end":1267,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44102,"byte_end":44111,"line_start":1270,"line_end":1270,"column_start":9,"column_end":18},"name":"primitive","qualname":"::RenderPipelineDescriptor::primitive","value":"wgpu_types::PrimitiveState","parent":{"krate":0,"index":1926},"children":[],"decl_id":null,"docs":" The properties of the pipeline at the primitive assembly and rasterization level.\n","sig":null,"attributes":[{"value":"/ The properties of the pipeline at the primitive assembly and rasterization level.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44008,"byte_end":44093,"line_start":1269,"line_end":1269,"column_start":5,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":1932},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44233,"byte_end":44246,"line_start":1272,"line_end":1272,"column_start":9,"column_end":22},"name":"depth_stencil","qualname":"::RenderPipelineDescriptor::depth_stencil","value":"std::option::Option<wgpu_types::DepthStencilState>","parent":{"krate":0,"index":1926},"children":[],"decl_id":null,"docs":" The effect of draw calls on the depth and stencil aspects of the output target, if any.\n","sig":null,"attributes":[{"value":"/ The effect of draw calls on the depth and stencil aspects of the output target, if any.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44133,"byte_end":44224,"line_start":1271,"line_end":1271,"column_start":5,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":1933},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44338,"byte_end":44349,"line_start":1274,"line_end":1274,"column_start":9,"column_end":20},"name":"multisample","qualname":"::RenderPipelineDescriptor::multisample","value":"wgpu_types::MultisampleState","parent":{"krate":0,"index":1926},"children":[],"decl_id":null,"docs":" The multi-sampling properties of the pipeline.\n","sig":null,"attributes":[{"value":"/ The multi-sampling properties of the pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44279,"byte_end":44329,"line_start":1273,"line_end":1273,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1934},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44454,"byte_end":44462,"line_start":1276,"line_end":1276,"column_start":9,"column_end":17},"name":"fragment","qualname":"::RenderPipelineDescriptor::fragment","value":"std::option::Option<FragmentState<'a>>","parent":{"krate":0,"index":1926},"children":[],"decl_id":null,"docs":" The compiled fragment stage, its entry point, and the color targets.\n","sig":null,"attributes":[{"value":"/ The compiled fragment stage, its entry point, and the color targets.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44373,"byte_end":44445,"line_start":1275,"line_end":1275,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1941},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44587,"byte_end":44608,"line_start":1281,"line_end":1281,"column_start":12,"column_end":33},"name":"ComputePassDescriptor","qualname":"::ComputePassDescriptor","value":"ComputePassDescriptor { label }","parent":null,"children":[{"krate":0,"index":1943}],"decl_id":null,"docs":" Describes the attachments of a compute pass.\n","sig":null,"attributes":[{"value":"/ Describes the attachments of a compute pass.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44494,"byte_end":44542,"line_start":1279,"line_end":1279,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":1943},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44729,"byte_end":44734,"line_start":1283,"line_end":1283,"column_start":9,"column_end":14},"name":"label","qualname":"::ComputePassDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1941},"children":[],"decl_id":null,"docs":" Debug label of the compute pass. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the compute pass. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44619,"byte_end":44720,"line_start":1282,"line_end":1282,"column_start":5,"column_end":106}}]},{"kind":"Struct","id":{"krate":0,"index":1953},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44819,"byte_end":44844,"line_start":1288,"line_end":1288,"column_start":12,"column_end":37},"name":"ComputePipelineDescriptor","qualname":"::ComputePipelineDescriptor","value":"ComputePipelineDescriptor { label, layout, module, entry_point }","parent":null,"children":[{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958}],"decl_id":null,"docs":" Describes a compute pipeline.\n","sig":null,"attributes":[{"value":"/ Describes a compute pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44750,"byte_end":44783,"line_start":1286,"line_end":1286,"column_start":1,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":1955},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44961,"byte_end":44966,"line_start":1290,"line_end":1290,"column_start":9,"column_end":14},"name":"label","qualname":"::ComputePipelineDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":" Debug label of the pipeline. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the pipeline. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44855,"byte_end":44952,"line_start":1289,"line_end":1289,"column_start":5,"column_end":102}}]},{"kind":"Field","id":{"krate":0,"index":1956},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45040,"byte_end":45046,"line_start":1292,"line_end":1292,"column_start":9,"column_end":15},"name":"layout","qualname":"::ComputePipelineDescriptor::layout","value":"std::option::Option<&'a PipelineLayout>","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":" The layout of bind groups for this pipeline.\n","sig":null,"attributes":[{"value":"/ The layout of bind groups for this pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":44983,"byte_end":45031,"line_start":1291,"line_end":1291,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":1957},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45135,"byte_end":45141,"line_start":1294,"line_end":1294,"column_start":9,"column_end":15},"name":"module","qualname":"::ComputePipelineDescriptor::module","value":"&'a ShaderModule","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":" The compiled shader module for this stage.\n","sig":null,"attributes":[{"value":"/ The compiled shader module for this stage.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45080,"byte_end":45126,"line_start":1293,"line_end":1293,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1958},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45310,"byte_end":45321,"line_start":1297,"line_end":1297,"column_start":9,"column_end":20},"name":"entry_point","qualname":"::ComputePipelineDescriptor::entry_point","value":"&'a str","parent":{"krate":0,"index":1953},"children":[],"decl_id":null,"docs":" The name of the entry point in the compiled shader. There must be a function that returns\n void with this name in the shader.\n","sig":null,"attributes":[{"value":"/ The name of the entry point in the compiled shader. There must be a function that returns","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45165,"byte_end":45258,"line_start":1295,"line_end":1295,"column_start":5,"column_end":98}},{"value":"/ void with this name in the shader.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45263,"byte_end":45301,"line_start":1296,"line_end":1296,"column_start":5,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":1201},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45463,"byte_end":45478,"line_start":1302,"line_end":1302,"column_start":10,"column_end":25},"name":"ImageCopyBuffer","qualname":"::ImageCopyBuffer","value":"ImageCopyBufferBase<&'a Buffer>","parent":null,"children":[],"decl_id":null,"docs":" View of a buffer which can be used to copy to/from a texture.\n","sig":null,"attributes":[{"value":"/ View of a buffer which can be used to copy to/from a texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45388,"byte_end":45453,"line_start":1301,"line_end":1301,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":1206},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45657,"byte_end":45673,"line_start":1306,"line_end":1306,"column_start":10,"column_end":26},"name":"ImageCopyTexture","qualname":"::ImageCopyTexture","value":"ImageCopyTextureBase<&'a Texture>","parent":null,"children":[],"decl_id":null,"docs":" View of a texture which can be used to copy to/from a buffer/texture.\n","sig":null,"attributes":[{"value":"/ View of a texture which can be used to copy to/from a buffer/texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45574,"byte_end":45647,"line_start":1305,"line_end":1305,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1965},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45788,"byte_end":45813,"line_start":1310,"line_end":1310,"column_start":12,"column_end":37},"name":"BindGroupLayoutDescriptor","qualname":"::BindGroupLayoutDescriptor","value":"BindGroupLayoutDescriptor { label, entries }","parent":null,"children":[{"krate":0,"index":1967},{"krate":0,"index":1968}],"decl_id":null,"docs":" Describes a [`BindGroupLayout`].\n","sig":null,"attributes":[{"value":"/ Describes a [`BindGroupLayout`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45716,"byte_end":45752,"line_start":1308,"line_end":1308,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":1967},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45939,"byte_end":45944,"line_start":1312,"line_end":1312,"column_start":9,"column_end":14},"name":"label","qualname":"::BindGroupLayoutDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" Debug label of the bind group layout. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the bind group layout. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45824,"byte_end":45930,"line_start":1311,"line_end":1311,"column_start":5,"column_end":111}}]},{"kind":"Field","id":{"krate":0,"index":1968},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46015,"byte_end":46022,"line_start":1315,"line_end":1315,"column_start":9,"column_end":16},"name":"entries","qualname":"::BindGroupLayoutDescriptor::entries","value":"&'a [wgpu_types::BindGroupLayoutEntry]","parent":{"krate":0,"index":1965},"children":[],"decl_id":null,"docs":" Array of entries in this BindGroupLayout\n","sig":null,"attributes":[{"value":"/ Array of entries in this BindGroupLayout","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":45962,"byte_end":46006,"line_start":1314,"line_end":1314,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1975},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46161,"byte_end":46190,"line_start":1320,"line_end":1320,"column_start":12,"column_end":41},"name":"RenderBundleEncoderDescriptor","qualname":"::RenderBundleEncoderDescriptor","value":"RenderBundleEncoderDescriptor { label, color_formats, depth_stencil, sample_count }","parent":null,"children":[{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980}],"decl_id":null,"docs":" Describes a [`RenderBundleEncoder`].\n","sig":null,"attributes":[{"value":"/ Describes a [`RenderBundleEncoder`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46055,"byte_end":46095,"line_start":1318,"line_end":1318,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1977},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46320,"byte_end":46325,"line_start":1322,"line_end":1322,"column_start":9,"column_end":14},"name":"label","qualname":"::RenderBundleEncoderDescriptor::label","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":1975},"children":[],"decl_id":null,"docs":" Debug label of the render bundle encoder. This will show up in graphics debuggers for easy identification.\n","sig":null,"attributes":[{"value":"/ Debug label of the render bundle encoder. This will show up in graphics debuggers for easy identification.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46201,"byte_end":46311,"line_start":1321,"line_end":1321,"column_start":5,"column_end":115}}]},{"kind":"Field","id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46557,"byte_end":46570,"line_start":1325,"line_end":1325,"column_start":9,"column_end":22},"name":"color_formats","qualname":"::RenderBundleEncoderDescriptor::color_formats","value":"&'a [wgpu_types::TextureFormat]","parent":{"krate":0,"index":1975},"children":[],"decl_id":null,"docs":" The formats of the color attachments that this render bundle is capable to rendering to. This\n must match the formats of the color attachments in the renderpass this render bundle is executed in.\n","sig":null,"attributes":[{"value":"/ The formats of the color attachments that this render bundle is capable to rendering to. This","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46342,"byte_end":46439,"line_start":1323,"line_end":1323,"column_start":5,"column_end":102}},{"value":"/ must match the formats of the color attachments in the renderpass this render bundle is executed in.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46444,"byte_end":46548,"line_start":1324,"line_end":1324,"column_start":5,"column_end":109}}]},{"kind":"Field","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46813,"byte_end":46826,"line_start":1328,"line_end":1328,"column_start":9,"column_end":22},"name":"depth_stencil","qualname":"::RenderBundleEncoderDescriptor::depth_stencil","value":"std::option::Option<wgpu_types::RenderBundleDepthStencil>","parent":{"krate":0,"index":1975},"children":[],"decl_id":null,"docs":" Information about the depth attachment that this render bundle is capable to rendering to. This\n must match the format of the depth attachments in the renderpass this render bundle is executed in.\n","sig":null,"attributes":[{"value":"/ Information about the depth attachment that this render bundle is capable to rendering to. This","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46597,"byte_end":46696,"line_start":1326,"line_end":1326,"column_start":5,"column_end":104}},{"value":"/ must match the format of the depth attachments in the renderpass this render bundle is executed in.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46701,"byte_end":46804,"line_start":1327,"line_end":1327,"column_start":5,"column_end":108}}]},{"kind":"Field","id":{"krate":0,"index":1980},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47012,"byte_end":47024,"line_start":1331,"line_end":1331,"column_start":9,"column_end":21},"name":"sample_count","qualname":"::RenderBundleEncoderDescriptor::sample_count","value":"u32","parent":{"krate":0,"index":1975},"children":[],"decl_id":null,"docs":" Sample count this render bundle is capable of rendering to. This must match the pipelines and\n the renderpasses it is used in.\n","sig":null,"attributes":[{"value":"/ Sample count this render bundle is capable of rendering to. This must match the pipelines and","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46866,"byte_end":46963,"line_start":1329,"line_end":1329,"column_start":5,"column_end":102}},{"value":"/ the renderpasses it is used in.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":46968,"byte_end":47003,"line_start":1330,"line_end":1330,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2005},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47107,"byte_end":47121,"line_start":1336,"line_end":1336,"column_start":12,"column_end":26},"name":"SurfaceTexture","qualname":"::SurfaceTexture","value":"SurfaceTexture { texture }","parent":null,"children":[{"krate":0,"index":2006},{"krate":0,"index":2007}],"decl_id":null,"docs":" Surface texture that can be rendered to.\n","sig":null,"attributes":[{"value":"/ Surface texture that can be rendered to.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47034,"byte_end":47078,"line_start":1334,"line_end":1334,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47170,"byte_end":47177,"line_start":1338,"line_end":1338,"column_start":9,"column_end":16},"name":"texture","qualname":"::SurfaceTexture::texture","value":"Texture","parent":{"krate":0,"index":2005},"children":[],"decl_id":null,"docs":" Accessible view of the frame.\n","sig":null,"attributes":[{"value":"/ Accessible view of the frame.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47128,"byte_end":47161,"line_start":1337,"line_end":1337,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2010},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47335,"byte_end":47347,"line_start":1344,"line_end":1344,"column_start":12,"column_end":24},"name":"SurfaceFrame","qualname":"::SurfaceFrame","value":"SurfaceFrame { output, suboptimal }","parent":null,"children":[{"krate":0,"index":2011},{"krate":0,"index":2012}],"decl_id":null,"docs":" Result of a successful call to [`Surface::get_current_frame`].\n","sig":null,"attributes":[{"value":"/ Result of a successful call to [`Surface::get_current_frame`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47240,"byte_end":47306,"line_start":1342,"line_end":1342,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":2011},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47424,"byte_end":47430,"line_start":1346,"line_end":1346,"column_start":9,"column_end":15},"name":"output","qualname":"::SurfaceFrame::output","value":"SurfaceTexture","parent":{"krate":0,"index":2010},"children":[],"decl_id":null,"docs":" The texture into which the next frame should be rendered.\n","sig":null,"attributes":[{"value":"/ The texture into which the next frame should be rendered.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47354,"byte_end":47415,"line_start":1345,"line_end":1345,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2012},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47584,"byte_end":47594,"line_start":1349,"line_end":1349,"column_start":9,"column_end":19},"name":"suboptimal","qualname":"::SurfaceFrame::suboptimal","value":"bool","parent":{"krate":0,"index":2010},"children":[],"decl_id":null,"docs":" `true` if the acquired buffer can still be used for rendering,\n but should be recreated for maximum performance.\n","sig":null,"attributes":[{"value":"/ `true` if the acquired buffer can still be used for rendering,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47452,"byte_end":47518,"line_start":1347,"line_end":1347,"column_start":5,"column_end":71}},{"value":"/ but should be recreated for maximum performance.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47523,"byte_end":47575,"line_start":1348,"line_end":1348,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2016},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47816,"byte_end":47823,"line_start":1356,"line_end":1356,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::SurfaceError::Timeout","value":"SurfaceError::Timeout","parent":{"krate":0,"index":2015},"children":[],"decl_id":null,"docs":" A timeout was encountered while trying to acquire the next frame.\n","sig":null,"attributes":[{"value":"/ A timeout was encountered while trying to acquire the next frame.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47742,"byte_end":47811,"line_start":1355,"line_end":1355,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2018},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47919,"byte_end":47927,"line_start":1358,"line_end":1358,"column_start":5,"column_end":13},"name":"Outdated","qualname":"::SurfaceError::Outdated","value":"SurfaceError::Outdated","parent":{"krate":0,"index":2015},"children":[],"decl_id":null,"docs":" The underlying surface has changed, and therefore the swap chain must be updated.\n","sig":null,"attributes":[{"value":"/ The underlying surface has changed, and therefore the swap chain must be updated.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47829,"byte_end":47914,"line_start":1357,"line_end":1357,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2020},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47997,"byte_end":48001,"line_start":1360,"line_end":1360,"column_start":5,"column_end":9},"name":"Lost","qualname":"::SurfaceError::Lost","value":"SurfaceError::Lost","parent":{"krate":0,"index":2015},"children":[],"decl_id":null,"docs":" The swap chain has been lost and needs to be recreated.\n","sig":null,"attributes":[{"value":"/ The swap chain has been lost and needs to be recreated.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47933,"byte_end":47992,"line_start":1359,"line_end":1359,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2022},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48069,"byte_end":48080,"line_start":1362,"line_end":1362,"column_start":5,"column_end":16},"name":"OutOfMemory","qualname":"::SurfaceError::OutOfMemory","value":"SurfaceError::OutOfMemory","parent":{"krate":0,"index":2015},"children":[],"decl_id":null,"docs":" There is no more memory left to allocate a new frame.\n","sig":null,"attributes":[{"value":"/ There is no more memory left to allocate a new frame.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48007,"byte_end":48064,"line_start":1361,"line_end":1361,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":2015},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47723,"byte_end":47735,"line_start":1354,"line_end":1354,"column_start":10,"column_end":22},"name":"SurfaceError","qualname":"::SurfaceError","value":"pub enum SurfaceError { Timeout, Outdated, Lost, OutOfMemory, }","parent":null,"children":[{"krate":0,"index":2016},{"krate":0,"index":2018},{"krate":0,"index":2020},{"krate":0,"index":2022}],"decl_id":null,"docs":" Result of an unsuccessful call to [`Surface::get_current_frame`].\n","sig":null,"attributes":[{"value":"/ Result of an unsuccessful call to [`Surface::get_current_frame`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":47605,"byte_end":47674,"line_start":1352,"line_end":1352,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48887,"byte_end":48890,"line_start":1385,"line_end":1385,"column_start":12,"column_end":15},"name":"new","qualname":"<Instance>::new","value":"pub fn new(Backends) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an new instance of wgpu.","sig":null,"attributes":[{"value":"/ Create an new instance of wgpu.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48691,"byte_end":48726,"line_start":1379,"line_end":1379,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48731,"byte_end":48734,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48739,"byte_end":48754,"line_start":1381,"line_end":1381,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48759,"byte_end":48762,"line_start":1382,"line_end":1382,"column_start":5,"column_end":8}},{"value":"/ - `backends` - Controls from which [backends][Backends] wgpu will choose","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48767,"byte_end":48843,"line_start":1383,"line_end":1383,"column_start":5,"column_end":81}},{"value":"/   during instantiation.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48848,"byte_end":48875,"line_start":1384,"line_end":1384,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49315,"byte_end":49323,"line_start":1401,"line_end":1401,"column_start":19,"column_end":27},"name":"from_hal","qualname":"<Instance>::from_hal","value":"pub unsafe fn from_hal<A: wgc::hub::HalApi>(A::Instance) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an new instance of wgpu from a wgpu-hal instance.","sig":null,"attributes":[{"value":"/ Create an new instance of wgpu from a wgpu-hal instance.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49011,"byte_end":49071,"line_start":1391,"line_end":1391,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49076,"byte_end":49079,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49084,"byte_end":49099,"line_start":1393,"line_end":1393,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49104,"byte_end":49107,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ - `hal_instance` - wgpu-hal instance.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49112,"byte_end":49153,"line_start":1395,"line_end":1395,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49158,"byte_end":49161,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49166,"byte_end":49178,"line_start":1397,"line_end":1397,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49183,"byte_end":49186,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ Refer to the creation of wgpu-hal Instance for every backend.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49191,"byte_end":49256,"line_start":1399,"line_end":1399,"column_start":5,"column_end":70}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49261,"byte_end":49296,"line_start":1400,"line_end":1400,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49723,"byte_end":49741,"line_start":1413,"line_end":1413,"column_start":12,"column_end":30},"name":"enumerate_adapters","qualname":"<Instance>::enumerate_adapters","value":"pub fn enumerate_adapters(&Self, Backends) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Retrieves all available [`Adapter`]s that match the given [`Backends`].","sig":null,"attributes":[{"value":"/ Retrieves all available [`Adapter`]s that match the given [`Backends`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49494,"byte_end":49569,"line_start":1407,"line_end":1407,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49574,"byte_end":49577,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49582,"byte_end":49597,"line_start":1409,"line_end":1409,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49602,"byte_end":49605,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ - `backends` - Backends from which to enumerate adapters.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49610,"byte_end":49671,"line_start":1411,"line_end":1411,"column_start":5,"column_end":66}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":49676,"byte_end":49711,"line_start":1412,"line_end":1412,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50356,"byte_end":50371,"line_start":1429,"line_end":1429,"column_start":12,"column_end":27},"name":"request_adapter","qualname":"<Instance>::request_adapter","value":"pub fn request_adapter(&Self, &RequestAdapterOptions) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an [`Adapter`] which matches the given [`RequestAdapterOptions`].","sig":null,"attributes":[{"value":"/ Retrieves an [`Adapter`] which matches the given [`RequestAdapterOptions`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50078,"byte_end":50157,"line_start":1424,"line_end":1424,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50162,"byte_end":50165,"line_start":1425,"line_end":1425,"column_start":5,"column_end":8}},{"value":"/ Some options are \"soft\", so treated as non-mandatory. Others are \"hard\".","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50170,"byte_end":50246,"line_start":1426,"line_end":1426,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50251,"byte_end":50254,"line_start":1427,"line_end":1427,"column_start":5,"column_end":8}},{"value":"/ If no adapters are found that suffice all the \"hard\" options, `None` is returned.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50259,"byte_end":50344,"line_start":1428,"line_end":1428,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50915,"byte_end":50938,"line_start":1444,"line_end":1444,"column_start":19,"column_end":42},"name":"create_adapter_from_hal","qualname":"<Instance>::create_adapter_from_hal","value":"pub unsafe fn create_adapter_from_hal<A: wgc::hub::HalApi>(&Self,\n                                                           hal::ExposedAdapter<A>)\n-> Adapter","parent":null,"children":[],"decl_id":null,"docs":" Converts a wgpu-hal `ExposedAdapter` to a wgpu [`Adapter`].","sig":null,"attributes":[{"value":"/ Converts a wgpu-hal `ExposedAdapter` to a wgpu [`Adapter`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50686,"byte_end":50749,"line_start":1438,"line_end":1438,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50754,"byte_end":50757,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50762,"byte_end":50774,"line_start":1440,"line_end":1440,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50779,"byte_end":50782,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ `hal_adapter` must be created from this instance internal handle.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50787,"byte_end":50856,"line_start":1442,"line_end":1442,"column_start":5,"column_end":74}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":50861,"byte_end":50896,"line_start":1443,"line_end":1443,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":51444,"byte_end":51458,"line_start":1459,"line_end":1459,"column_start":19,"column_end":33},"name":"create_surface","qualname":"<Instance>::create_surface","value":"pub unsafe fn create_surface<W: raw_window_handle::HasRawWindowHandle>(&Self,\n                                                                       &W)\n-> Surface","parent":null,"children":[],"decl_id":null,"docs":" Creates a surface from a raw window handle.","sig":null,"attributes":[{"value":"/ Creates a surface from a raw window handle.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":51195,"byte_end":51242,"line_start":1453,"line_end":1453,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":51247,"byte_end":51250,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":51255,"byte_end":51267,"line_start":1455,"line_end":1455,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":51272,"byte_end":51275,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ - Raw Window Handle must be a valid object to create a surface upon and","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":51280,"byte_end":51355,"line_start":1457,"line_end":1457,"column_start":5,"column_end":80}},{"value":"/   must remain valid for the lifetime of the returned surface.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":51360,"byte_end":51425,"line_start":1458,"line_end":1458,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52348,"byte_end":52356,"line_start":1486,"line_end":1486,"column_start":12,"column_end":20},"name":"poll_all","qualname":"<Instance>::poll_all","value":"pub fn poll_all(&Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Polls all devices.\n If `force_wait` is true and this is not running on the web,\n then this function will block until all in-flight buffers have been mapped.\n","sig":null,"attributes":[{"value":"/ Polls all devices.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52162,"byte_end":52184,"line_start":1483,"line_end":1483,"column_start":5,"column_end":27}},{"value":"/ If `force_wait` is true and this is not running on the web,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52189,"byte_end":52252,"line_start":1484,"line_end":1484,"column_start":5,"column_end":68}},{"value":"/ then this function will block until all in-flight buffers have been mapped.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52257,"byte_end":52336,"line_start":1485,"line_end":1485,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52535,"byte_end":52550,"line_start":1492,"line_end":1492,"column_start":12,"column_end":27},"name":"generate_report","qualname":"<Instance>::generate_report","value":"pub fn generate_report(&Self) -> wgc::hub::GlobalReport","parent":null,"children":[],"decl_id":null,"docs":" Generates memory report.\n","sig":null,"attributes":[{"value":"/ Generates memory report.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52455,"byte_end":52483,"line_start":1490,"line_end":1490,"column_start":5,"column_end":33}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52488,"byte_end":52523,"line_start":1491,"line_end":1491,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":53418,"byte_end":53432,"line_start":1514,"line_end":1514,"column_start":12,"column_end":26},"name":"request_device","qualname":"<Adapter>::request_device","value":"pub fn request_device(&Self, &DeviceDescriptor, Option<&std::path::Path>)\n-> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Requests a connection to a physical device, creating a logical device.","sig":null,"attributes":[{"value":"/ Requests a connection to a physical device, creating a logical device.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52653,"byte_end":52727,"line_start":1498,"line_end":1498,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52732,"byte_end":52735,"line_start":1499,"line_end":1499,"column_start":5,"column_end":8}},{"value":"/ Returns the [`Device`] together with a [`Queue`] that executes command buffers.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52740,"byte_end":52823,"line_start":1500,"line_end":1500,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52828,"byte_end":52831,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52836,"byte_end":52851,"line_start":1502,"line_end":1502,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52856,"byte_end":52859,"line_start":1503,"line_end":1503,"column_start":5,"column_end":8}},{"value":"/ - `desc` - Description of the features and limits requested from the given device.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52864,"byte_end":52950,"line_start":1504,"line_end":1504,"column_start":5,"column_end":91}},{"value":"/ - `trace_path` - Can be used for API call tracing, if that feature is","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52955,"byte_end":53028,"line_start":1505,"line_end":1505,"column_start":5,"column_end":78}},{"value":"/   enabled in `wgpu-core`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":53033,"byte_end":53062,"line_start":1506,"line_end":1506,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":53067,"byte_end":53070,"line_start":1507,"line_end":1507,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":53075,"byte_end":53087,"line_start":1508,"line_end":1508,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":53092,"byte_end":53095,"line_start":1509,"line_end":1509,"column_start":5,"column_end":8}},{"value":"/ - Features specified by `desc` are not supported by this adapter.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":53100,"byte_end":53169,"line_start":1510,"line_end":1510,"column_start":5,"column_end":74}},{"value":"/ - Unsafe features were requested but not enabled when requesting the adapter.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":53174,"byte_end":53255,"line_start":1511,"line_end":1511,"column_start":5,"column_end":86}},{"value":"/ - Limits requested exceed the values provided by the adapter.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":53260,"byte_end":53325,"line_start":1512,"line_end":1512,"column_start":5,"column_end":70}},{"value":"/ - Adapter does not support all features wgpu requires to safely operate.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":53330,"byte_end":53406,"line_start":1513,"line_end":1513,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":54481,"byte_end":54503,"line_start":1544,"line_end":1544,"column_start":19,"column_end":41},"name":"create_device_from_hal","qualname":"<Adapter>::create_device_from_hal","value":"pub unsafe fn create_device_from_hal<A: wgc::hub::HalApi>(&Self,\n                                                          hal::OpenDevice<A>,\n                                                          &DeviceDescriptor,\n                                                          Option<&std::path::Path>)\n-> Result<(Device, Queue), RequestDeviceError>","parent":null,"children":[],"decl_id":null,"docs":" Create a wgpu [`Device`] and [`Queue`] from a wgpu-hal `OpenDevice`","sig":null,"attributes":[{"value":"/ Create a wgpu [`Device`] and [`Queue`] from a wgpu-hal `OpenDevice`","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":54175,"byte_end":54246,"line_start":1537,"line_end":1537,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":54251,"byte_end":54254,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":54259,"byte_end":54271,"line_start":1539,"line_end":1539,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":54276,"byte_end":54279,"line_start":1540,"line_end":1540,"column_start":5,"column_end":8}},{"value":"/ - `hal_device` must be created from this adapter internal handle.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":54284,"byte_end":54353,"line_start":1541,"line_end":1541,"column_start":5,"column_end":74}},{"value":"/ - `desc.features` must be a subset of `hal_device` features.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":54358,"byte_end":54422,"line_start":1542,"line_end":1542,"column_start":5,"column_end":69}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":54427,"byte_end":54462,"line_start":1543,"line_end":1543,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55313,"byte_end":55333,"line_start":1568,"line_end":1568,"column_start":12,"column_end":32},"name":"is_surface_supported","qualname":"<Adapter>::is_surface_supported","value":"pub fn is_surface_supported(&Self, &Surface) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this adapter may present to the passed surface.\n","sig":null,"attributes":[{"value":"/ Returns whether this adapter may present to the passed surface.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55234,"byte_end":55301,"line_start":1567,"line_end":1567,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55652,"byte_end":55660,"line_start":1576,"line_end":1576,"column_start":12,"column_end":20},"name":"features","qualname":"<Adapter>::features","value":"pub fn features(&Self) -> Features","parent":null,"children":[],"decl_id":null,"docs":" List all features that are supported with this adapter.","sig":null,"attributes":[{"value":"/ List all features that are supported with this adapter.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55466,"byte_end":55525,"line_start":1572,"line_end":1572,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55530,"byte_end":55533,"line_start":1573,"line_end":1573,"column_start":5,"column_end":8}},{"value":"/ Features must be explicitly requested in [`Adapter::request_device`] in order","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55538,"byte_end":55619,"line_start":1574,"line_end":1574,"column_start":5,"column_end":86}},{"value":"/ to use them.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55624,"byte_end":55640,"line_start":1575,"line_end":1575,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55965,"byte_end":55971,"line_start":1584,"line_end":1584,"column_start":12,"column_end":18},"name":"limits","qualname":"<Adapter>::limits","value":"pub fn limits(&Self) -> Limits","parent":null,"children":[],"decl_id":null,"docs":" List the \"best\" limits that are supported by this adapter.","sig":null,"attributes":[{"value":"/ List the \"best\" limits that are supported by this adapter.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55753,"byte_end":55815,"line_start":1580,"line_end":1580,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55820,"byte_end":55823,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ Limits must be explicitly requested in [`Adapter::request_device`] to set","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55828,"byte_end":55905,"line_start":1582,"line_end":1582,"column_start":5,"column_end":82}},{"value":"/ the values that you are allowed to use.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":55910,"byte_end":55953,"line_start":1583,"line_end":1583,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56110,"byte_end":56118,"line_start":1589,"line_end":1589,"column_start":12,"column_end":20},"name":"get_info","qualname":"<Adapter>::get_info","value":"pub fn get_info(&Self) -> AdapterInfo","parent":null,"children":[],"decl_id":null,"docs":" Get info about the adapter itself.\n","sig":null,"attributes":[{"value":"/ Get info about the adapter itself.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56060,"byte_end":56098,"line_start":1588,"line_end":1588,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56264,"byte_end":56288,"line_start":1594,"line_end":1594,"column_start":12,"column_end":36},"name":"get_downlevel_properties","qualname":"<Adapter>::get_downlevel_properties","value":"pub fn get_downlevel_properties(&Self) -> DownlevelCapabilities","parent":null,"children":[],"decl_id":null,"docs":" Get info about the adapter itself.\n","sig":null,"attributes":[{"value":"/ Get info about the adapter itself.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56214,"byte_end":56252,"line_start":1593,"line_end":1593,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56714,"byte_end":56741,"line_start":1602,"line_end":1602,"column_start":12,"column_end":39},"name":"get_texture_format_features","qualname":"<Adapter>::get_texture_format_features","value":"pub fn get_texture_format_features(&Self, TextureFormat)\n-> TextureFormatFeatures","parent":null,"children":[],"decl_id":null,"docs":" Returns the features supported for a given texture format by this adapter.","sig":null,"attributes":[{"value":"/ Returns the features supported for a given texture format by this adapter.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56406,"byte_end":56484,"line_start":1598,"line_end":1598,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56489,"byte_end":56492,"line_start":1599,"line_end":1599,"column_start":5,"column_end":8}},{"value":"/ Note that the WebGPU spec further restricts the available usages/features.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56497,"byte_end":56575,"line_start":1600,"line_end":1600,"column_start":5,"column_end":83}},{"value":"/ To disable these restrictions on a device, request the [`Features::TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES`] feature.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56580,"byte_end":56702,"line_start":1601,"line_end":1601,"column_start":5,"column_end":127}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57045,"byte_end":57049,"line_start":1611,"line_end":1611,"column_start":12,"column_end":16},"name":"poll","qualname":"<Device>::poll","value":"pub fn poll(&Self, Maintain)","parent":null,"children":[],"decl_id":null,"docs":" Check for resource cleanups and mapping callbacks.","sig":null,"attributes":[{"value":"/ Check for resource cleanups and mapping callbacks.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56913,"byte_end":56967,"line_start":1608,"line_end":1608,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56972,"byte_end":56975,"line_start":1609,"line_end":1609,"column_start":5,"column_end":8}},{"value":"/ no-op on the web, device is automatically polled.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56980,"byte_end":57033,"line_start":1610,"line_end":1610,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57293,"byte_end":57301,"line_start":1618,"line_end":1618,"column_start":12,"column_end":20},"name":"features","qualname":"<Device>::features","value":"pub fn features(&Self) -> Features","parent":null,"children":[],"decl_id":null,"docs":" List all features that may be used with this device.","sig":null,"attributes":[{"value":"/ List all features that may be used with this device.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57156,"byte_end":57212,"line_start":1615,"line_end":1615,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57217,"byte_end":57220,"line_start":1616,"line_end":1616,"column_start":5,"column_end":8}},{"value":"/ Functions may panic if you use unsupported features.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57225,"byte_end":57281,"line_start":1617,"line_end":1617,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57534,"byte_end":57540,"line_start":1625,"line_end":1625,"column_start":12,"column_end":18},"name":"limits","qualname":"<Device>::limits","value":"pub fn limits(&Self) -> Limits","parent":null,"children":[],"decl_id":null,"docs":" List all limits that were requested of this device.","sig":null,"attributes":[{"value":"/ List all limits that were requested of this device.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57393,"byte_end":57448,"line_start":1622,"line_end":1622,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57453,"byte_end":57456,"line_start":1623,"line_end":1623,"column_start":5,"column_end":8}},{"value":"/ If any of these limits are exceeded, functions may panic.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57461,"byte_end":57522,"line_start":1624,"line_end":1624,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57707,"byte_end":57727,"line_start":1630,"line_end":1630,"column_start":12,"column_end":32},"name":"create_shader_module","qualname":"<Device>::create_shader_module","value":"pub fn create_shader_module(&Self, &ShaderModuleDescriptor) -> ShaderModule","parent":null,"children":[],"decl_id":null,"docs":" Creates a shader module from either SPIR-V or WGSL source code.\n","sig":null,"attributes":[{"value":"/ Creates a shader module from either SPIR-V or WGSL source code.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57628,"byte_end":57695,"line_start":1629,"line_end":1629,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":58339,"byte_end":58365,"line_start":1645,"line_end":1645,"column_start":19,"column_end":45},"name":"create_shader_module_spirv","qualname":"<Device>::create_shader_module_spirv","value":"pub unsafe fn create_shader_module_spirv(&Self, &ShaderModuleDescriptorSpirV)\n-> ShaderModule","parent":null,"children":[],"decl_id":null,"docs":" Creates a shader module from SPIR-V binary directly.","sig":null,"attributes":[{"value":"/ Creates a shader module from SPIR-V binary directly.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":57962,"byte_end":58018,"line_start":1637,"line_end":1637,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":58023,"byte_end":58026,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":58031,"byte_end":58043,"line_start":1639,"line_end":1639,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":58048,"byte_end":58051,"line_start":1640,"line_end":1640,"column_start":5,"column_end":8}},{"value":"/ This function passes binary data to the backend as-is and can potentially result in a","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":58056,"byte_end":58145,"line_start":1641,"line_end":1641,"column_start":5,"column_end":94}},{"value":"/ driver crash or bogus behaviour. No attempt is made to ensure that data is valid SPIR-V.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":58150,"byte_end":58242,"line_start":1642,"line_end":1642,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":58247,"byte_end":58250,"line_start":1643,"line_end":1643,"column_start":5,"column_end":8}},{"value":"/ See also [`include_spirv_raw!`] and [`util::make_spirv_raw`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":58255,"byte_end":58320,"line_start":1644,"line_end":1644,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":58686,"byte_end":58708,"line_start":1656,"line_end":1656,"column_start":12,"column_end":34},"name":"create_command_encoder","qualname":"<Device>::create_command_encoder","value":"pub fn create_command_encoder(&Self, &CommandEncoderDescriptor)\n-> CommandEncoder","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty [`CommandEncoder`].\n","sig":null,"attributes":[{"value":"/ Creates an empty [`CommandEncoder`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":58634,"byte_end":58674,"line_start":1655,"line_end":1655,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":59113,"byte_end":59141,"line_start":1669,"line_end":1669,"column_start":12,"column_end":40},"name":"create_render_bundle_encoder","qualname":"<Device>::create_render_bundle_encoder","value":"pub fn create_render_bundle_encoder(&Self, &RenderBundleEncoderDescriptor)\n-> RenderBundleEncoder","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty [`RenderBundleEncoder`].\n","sig":null,"attributes":[{"value":"/ Creates an empty [`RenderBundleEncoder`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":59056,"byte_end":59101,"line_start":1668,"line_end":1668,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":59535,"byte_end":59552,"line_start":1682,"line_end":1682,"column_start":12,"column_end":29},"name":"create_bind_group","qualname":"<Device>::create_bind_group","value":"pub fn create_bind_group(&Self, &BindGroupDescriptor) -> BindGroup","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`BindGroup`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`BindGroup`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":59491,"byte_end":59523,"line_start":1681,"line_end":1681,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":59821,"byte_end":59845,"line_start":1690,"line_end":1690,"column_start":12,"column_end":36},"name":"create_bind_group_layout","qualname":"<Device>::create_bind_group_layout","value":"pub fn create_bind_group_layout(&Self, &BindGroupLayoutDescriptor)\n-> BindGroupLayout","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BindGroupLayout`].\n","sig":null,"attributes":[{"value":"/ Creates a [`BindGroupLayout`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":59775,"byte_end":59809,"line_start":1689,"line_end":1689,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":60138,"byte_end":60160,"line_start":1698,"line_end":1698,"column_start":12,"column_end":34},"name":"create_pipeline_layout","qualname":"<Device>::create_pipeline_layout","value":"pub fn create_pipeline_layout(&Self, &PipelineLayoutDescriptor)\n-> PipelineLayout","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`PipelineLayout`].\n","sig":null,"attributes":[{"value":"/ Creates a [`PipelineLayout`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":60093,"byte_end":60126,"line_start":1697,"line_end":1697,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":60448,"byte_end":60470,"line_start":1706,"line_end":1706,"column_start":12,"column_end":34},"name":"create_render_pipeline","qualname":"<Device>::create_render_pipeline","value":"pub fn create_render_pipeline(&Self, &RenderPipelineDescriptor)\n-> RenderPipeline","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`RenderPipeline`].\n","sig":null,"attributes":[{"value":"/ Creates a [`RenderPipeline`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":60403,"byte_end":60436,"line_start":1705,"line_end":1705,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":60759,"byte_end":60782,"line_start":1714,"line_end":1714,"column_start":12,"column_end":35},"name":"create_compute_pipeline","qualname":"<Device>::create_compute_pipeline","value":"pub fn create_compute_pipeline(&Self, &ComputePipelineDescriptor)\n-> ComputePipeline","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`ComputePipeline`].\n","sig":null,"attributes":[{"value":"/ Creates a [`ComputePipeline`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":60713,"byte_end":60747,"line_start":1713,"line_end":1713,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61066,"byte_end":61079,"line_start":1722,"line_end":1722,"column_start":12,"column_end":25},"name":"create_buffer","qualname":"<Device>::create_buffer","value":"pub fn create_buffer(&Self, &BufferDescriptor) -> Buffer","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Buffer`].\n","sig":null,"attributes":[{"value":"/ Creates a [`Buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61029,"byte_end":61054,"line_start":1721,"line_end":1721,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1256},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61639,"byte_end":61653,"line_start":1738,"line_end":1738,"column_start":12,"column_end":26},"name":"create_texture","qualname":"<Device>::create_texture","value":"pub fn create_texture(&Self, &TextureDescriptor) -> Texture","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Texture`].","sig":null,"attributes":[{"value":"/ Creates a new [`Texture`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61529,"byte_end":61559,"line_start":1735,"line_end":1735,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61564,"byte_end":61567,"line_start":1736,"line_end":1736,"column_start":5,"column_end":8}},{"value":"/ `desc` specifies the general format of the texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61572,"byte_end":61627,"line_start":1737,"line_end":1737,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":62165,"byte_end":62188,"line_start":1753,"line_end":1753,"column_start":19,"column_end":42},"name":"create_texture_from_hal","qualname":"<Device>::create_texture_from_hal","value":"pub unsafe fn create_texture_from_hal<A: wgc::hub::HalApi>(&Self, A::Texture,\n                                                           &TextureDescriptor)\n-> Texture","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Texture`] from a wgpu-hal Texture.","sig":null,"attributes":[{"value":"/ Creates a [`Texture`] from a wgpu-hal Texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61892,"byte_end":61942,"line_start":1746,"line_end":1746,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61947,"byte_end":61950,"line_start":1747,"line_end":1747,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61955,"byte_end":61967,"line_start":1748,"line_end":1748,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61972,"byte_end":61975,"line_start":1749,"line_end":1749,"column_start":5,"column_end":8}},{"value":"/ - `hal_texture` must be created from this device internal handle","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":61980,"byte_end":62048,"line_start":1750,"line_end":1750,"column_start":5,"column_end":73}},{"value":"/ - `hal_texture` must be created respecting `desc`","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":62053,"byte_end":62106,"line_start":1751,"line_end":1751,"column_start":5,"column_end":58}},{"value":"cfg(not(target_arch = \"wasm32\"))","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":62111,"byte_end":62146,"line_start":1752,"line_end":1752,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":62650,"byte_end":62664,"line_start":1770,"line_end":1770,"column_start":12,"column_end":26},"name":"create_sampler","qualname":"<Device>::create_sampler","value":"pub fn create_sampler(&Self, &SamplerDescriptor) -> Sampler","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Sampler`].","sig":null,"attributes":[{"value":"/ Creates a new [`Sampler`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":62546,"byte_end":62576,"line_start":1767,"line_end":1767,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":62581,"byte_end":62584,"line_start":1768,"line_end":1768,"column_start":5,"column_end":8}},{"value":"/ `desc` specifies the behavior of the sampler.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":62589,"byte_end":62638,"line_start":1769,"line_end":1769,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":62921,"byte_end":62937,"line_start":1778,"line_end":1778,"column_start":12,"column_end":28},"name":"create_query_set","qualname":"<Device>::create_query_set","value":"pub fn create_query_set(&Self, &QuerySetDescriptor) -> QuerySet","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`QuerySet`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`QuerySet`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":62878,"byte_end":62909,"line_start":1777,"line_end":1777,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63235,"byte_end":63254,"line_start":1786,"line_end":1786,"column_start":12,"column_end":31},"name":"on_uncaptured_error","qualname":"<Device>::on_uncaptured_error","value":"pub fn on_uncaptured_error<impl UncapturedErrorHandler: UncapturedErrorHandler>(&Self,\n                                                                                impl UncapturedErrorHandler)","parent":null,"children":[],"decl_id":null,"docs":" Set a callback for errors that are not handled in error scopes.\n","sig":null,"attributes":[{"value":"/ Set a callback for errors that are not handled in error scopes.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63156,"byte_end":63223,"line_start":1785,"line_end":1785,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63418,"byte_end":63431,"line_start":1791,"line_end":1791,"column_start":12,"column_end":25},"name":"start_capture","qualname":"<Device>::start_capture","value":"pub fn start_capture(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Starts frame capture.\n","sig":null,"attributes":[{"value":"/ Starts frame capture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63381,"byte_end":63406,"line_start":1790,"line_end":1790,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63552,"byte_end":63564,"line_start":1796,"line_end":1796,"column_start":12,"column_end":24},"name":"stop_capture","qualname":"<Device>::stop_capture","value":"pub fn stop_capture(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Stops frame capture.\n","sig":null,"attributes":[{"value":"/ Stops frame capture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63516,"byte_end":63540,"line_start":1795,"line_end":1795,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2034},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63877,"byte_end":63895,"line_start":1811,"line_end":1811,"column_start":12,"column_end":30},"name":"RequestDeviceError","qualname":"::RequestDeviceError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Requesting a device failed.\n","sig":null,"attributes":[{"value":"/ Requesting a device failed.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63795,"byte_end":63826,"line_start":1809,"line_end":1809,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2046},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64215,"byte_end":64231,"line_start":1823,"line_end":1823,"column_start":12,"column_end":28},"name":"BufferAsyncError","qualname":"::BufferAsyncError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error occurred when trying to async map a buffer.\n","sig":null,"attributes":[{"value":"/ Error occurred when trying to async map a buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64111,"byte_end":64164,"line_start":1821,"line_end":1821,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2059},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64586,"byte_end":64590,"line_start":1837,"line_end":1837,"column_start":5,"column_end":9},"name":"Read","qualname":"::MapMode::Read","value":"MapMode::Read","parent":{"krate":0,"index":2058},"children":[],"decl_id":null,"docs":" Map only for reading\n","sig":null,"attributes":[{"value":"/ Map only for reading","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64557,"byte_end":64581,"line_start":1836,"line_end":1836,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2061},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64625,"byte_end":64630,"line_start":1839,"line_end":1839,"column_start":5,"column_end":10},"name":"Write","qualname":"::MapMode::Write","value":"MapMode::Write","parent":{"krate":0,"index":2058},"children":[],"decl_id":null,"docs":" Map only for writing\n","sig":null,"attributes":[{"value":"/ Map only for writing","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64596,"byte_end":64620,"line_start":1838,"line_end":1838,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":2058},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64543,"byte_end":64550,"line_start":1835,"line_end":1835,"column_start":10,"column_end":17},"name":"MapMode","qualname":"::MapMode","value":"pub enum MapMode { Read, Write, }","parent":null,"children":[{"krate":0,"index":2059},{"krate":0,"index":2061}],"decl_id":null,"docs":" Type of buffer mapping.\n","sig":null,"attributes":[{"value":"/ Type of buffer mapping.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64465,"byte_end":64492,"line_start":1833,"line_end":1833,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2071},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":66236,"byte_end":66246,"line_start":1894,"line_end":1894,"column_start":12,"column_end":22},"name":"BufferView","qualname":"::BufferView","value":"BufferView {  }","parent":null,"children":[{"krate":0,"index":2073},{"krate":0,"index":2074}],"decl_id":null,"docs":" Read only view into a mapped buffer.\n","sig":null,"attributes":[{"value":"/ Read only view into a mapped buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":66167,"byte_end":66207,"line_start":1892,"line_end":1892,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2078},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":66381,"byte_end":66394,"line_start":1901,"line_end":1901,"column_start":12,"column_end":25},"name":"BufferViewMut","qualname":"::BufferViewMut","value":"BufferViewMut {  }","parent":null,"children":[{"krate":0,"index":2080},{"krate":0,"index":2081},{"krate":0,"index":2082}],"decl_id":null,"docs":" Write only view into mapped buffer.\n","sig":null,"attributes":[{"value":"/ Write only view into mapped buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":66313,"byte_end":66352,"line_start":1899,"line_end":1899,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67766,"byte_end":67783,"line_start":1968,"line_end":1968,"column_start":12,"column_end":29},"name":"as_entire_binding","qualname":"<Buffer>::as_entire_binding","value":"pub fn as_entire_binding(&Self) -> BindingResource","parent":null,"children":[],"decl_id":null,"docs":" Return the binding view of the entire buffer.\n","sig":null,"attributes":[{"value":"/ Return the binding view of the entire buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67705,"byte_end":67754,"line_start":1967,"line_end":1967,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67949,"byte_end":67973,"line_start":1973,"line_end":1973,"column_start":12,"column_end":36},"name":"as_entire_buffer_binding","qualname":"<Buffer>::as_entire_buffer_binding","value":"pub fn as_entire_buffer_binding(&Self) -> BufferBinding","parent":null,"children":[],"decl_id":null,"docs":" Return the binding view of the entire buffer.\n","sig":null,"attributes":[{"value":"/ Return the binding view of the entire buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67888,"byte_end":67937,"line_start":1972,"line_end":1972,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":68320,"byte_end":68325,"line_start":1983,"line_end":1983,"column_start":12,"column_end":17},"name":"slice","qualname":"<Buffer>::slice","value":"pub fn slice<S: RangeBounds<BufferAddress>>(&Self, S) -> BufferSlice","parent":null,"children":[],"decl_id":null,"docs":" Use only a portion of this Buffer for a given operation. Choosing a range with no end\n will use the rest of the buffer. Using a totally unbounded range will use the entire buffer.\n","sig":null,"attributes":[{"value":"/ Use only a portion of this Buffer for a given operation. Choosing a range with no end","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":68118,"byte_end":68207,"line_start":1981,"line_end":1981,"column_start":5,"column_end":94}},{"value":"/ will use the rest of the buffer. Using a totally unbounded range will use the entire buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":68212,"byte_end":68308,"line_start":1982,"line_end":1982,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":68650,"byte_end":68655,"line_start":1993,"line_end":1993,"column_start":12,"column_end":17},"name":"unmap","qualname":"<Buffer>::unmap","value":"pub fn unmap(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Flushes any pending write operations and unmaps the buffer from host memory.\n","sig":null,"attributes":[{"value":"/ Flushes any pending write operations and unmaps the buffer from host memory.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":68558,"byte_end":68638,"line_start":1992,"line_end":1992,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":68850,"byte_end":68857,"line_start":1999,"line_end":1999,"column_start":12,"column_end":19},"name":"destroy","qualname":"<Buffer>::destroy","value":"pub fn destroy(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Destroy the associated native resources as soon as possible.\n","sig":null,"attributes":[{"value":"/ Destroy the associated native resources as soon as possible.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":68774,"byte_end":68838,"line_start":1998,"line_end":1998,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":69526,"byte_end":69535,"line_start":2015,"line_end":2015,"column_start":12,"column_end":21},"name":"map_async","qualname":"<BufferSlice>::map_async","value":"pub fn map_async(&Self, MapMode) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Map the buffer. Buffer is ready to map once the future is resolved.","sig":null,"attributes":[{"value":"/ Map the buffer. Buffer is ready to map once the future is resolved.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":69003,"byte_end":69074,"line_start":2007,"line_end":2007,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":69079,"byte_end":69082,"line_start":2008,"line_end":2008,"column_start":5,"column_end":8}},{"value":"/ For the future to complete, `device.poll(...)` must be called elsewhere in the runtime, possibly integrated","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":69087,"byte_end":69198,"line_start":2009,"line_end":2009,"column_start":5,"column_end":116}},{"value":"/ into an event loop, run on a separate thread, or continually polled in the same task runtime that this","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":69203,"byte_end":69309,"line_start":2010,"line_end":2010,"column_start":5,"column_end":111}},{"value":"/ future will be run on.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":69314,"byte_end":69340,"line_start":2011,"line_end":2011,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":69345,"byte_end":69348,"line_start":2012,"line_end":2012,"column_start":5,"column_end":8}},{"value":"/ It's expected that wgpu will eventually supply its own event loop infrastructure that will be easy to integrate","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":69353,"byte_end":69468,"line_start":2013,"line_end":2013,"column_start":5,"column_end":120}},{"value":"/ into other event loops, like winit's.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":69473,"byte_end":69514,"line_start":2014,"line_end":2014,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":70403,"byte_end":70419,"line_start":2042,"line_end":2042,"column_start":12,"column_end":28},"name":"get_mapped_range","qualname":"<BufferSlice>::get_mapped_range","value":"pub fn get_mapped_range(&Self) -> BufferView","parent":null,"children":[],"decl_id":null,"docs":" Synchronously and immediately map a buffer for reading. If the buffer is not immediately mappable\n through [`BufferDescriptor::mapped_at_creation`] or [`BufferSlice::map_async`], will panic.\n","sig":null,"attributes":[{"value":"/ Synchronously and immediately map a buffer for reading. If the buffer is not immediately mappable","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":70190,"byte_end":70291,"line_start":2040,"line_end":2040,"column_start":5,"column_end":106}},{"value":"/ through [`BufferDescriptor::mapped_at_creation`] or [`BufferSlice::map_async`], will panic.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":70296,"byte_end":70391,"line_start":2041,"line_end":2041,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":70949,"byte_end":70969,"line_start":2054,"line_end":2054,"column_start":12,"column_end":32},"name":"get_mapped_range_mut","qualname":"<BufferSlice>::get_mapped_range_mut","value":"pub fn get_mapped_range_mut(&Self) -> BufferViewMut","parent":null,"children":[],"decl_id":null,"docs":" Synchronously and immediately map a buffer for writing. If the buffer is not immediately mappable\n through [`BufferDescriptor::mapped_at_creation`] or [`BufferSlice::map_async`], will panic.\n","sig":null,"attributes":[{"value":"/ Synchronously and immediately map a buffer for writing. If the buffer is not immediately mappable","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":70736,"byte_end":70837,"line_start":2052,"line_end":2052,"column_start":5,"column_end":106}},{"value":"/ through [`BufferDescriptor::mapped_at_creation`] or [`BufferSlice::map_async`], will panic.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":70842,"byte_end":70937,"line_start":2053,"line_end":2053,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":71612,"byte_end":71623,"line_start":2079,"line_end":2079,"column_start":12,"column_end":23},"name":"create_view","qualname":"<Texture>::create_view","value":"pub fn create_view(&Self, &TextureViewDescriptor) -> TextureView","parent":null,"children":[],"decl_id":null,"docs":" Creates a view of this texture.\n","sig":null,"attributes":[{"value":"/ Creates a view of this texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":71565,"byte_end":71600,"line_start":2078,"line_end":2078,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":71923,"byte_end":71930,"line_start":2087,"line_end":2087,"column_start":12,"column_end":19},"name":"destroy","qualname":"<Texture>::destroy","value":"pub fn destroy(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Destroy the associated native resources as soon as possible.\n","sig":null,"attributes":[{"value":"/ Destroy the associated native resources as soon as possible.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":71847,"byte_end":71911,"line_start":2086,"line_end":2086,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":72085,"byte_end":72098,"line_start":2092,"line_end":2092,"column_start":12,"column_end":25},"name":"as_image_copy","qualname":"<Texture>::as_image_copy","value":"pub fn as_image_copy(&Self) -> ImageCopyTexture","parent":null,"children":[],"decl_id":null,"docs":" Make an `ImageCopyTexture` representing the whole texture.\n","sig":null,"attributes":[{"value":"/ Make an `ImageCopyTexture` representing the whole texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":72011,"byte_end":72073,"line_start":2091,"line_end":2091,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":72757,"byte_end":72763,"line_start":2120,"line_end":2120,"column_start":12,"column_end":18},"name":"finish","qualname":"<CommandEncoder>::finish","value":"pub fn finish(Self) -> CommandBuffer","parent":null,"children":[],"decl_id":null,"docs":" Finishes recording and returns a [`CommandBuffer`] that can be submitted for execution.\n","sig":null,"attributes":[{"value":"/ Finishes recording and returns a [`CommandBuffer`] that can be submitted for execution.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":72654,"byte_end":72745,"line_start":2119,"line_end":2119,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73177,"byte_end":73194,"line_start":2133,"line_end":2133,"column_start":12,"column_end":29},"name":"begin_render_pass","qualname":"<CommandEncoder>::begin_render_pass","value":"pub fn begin_render_pass<'a>(&'a mut Self, &RenderPassDescriptor)\n-> RenderPass","parent":null,"children":[],"decl_id":null,"docs":" Begins recording of a render pass.","sig":null,"attributes":[{"value":"/ Begins recording of a render pass.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73029,"byte_end":73067,"line_start":2130,"line_end":2130,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73072,"byte_end":73075,"line_start":2131,"line_end":2131,"column_start":5,"column_end":8}},{"value":"/ This function returns a [`RenderPass`] object which records a single render pass.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73080,"byte_end":73165,"line_start":2132,"line_end":2132,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73642,"byte_end":73660,"line_start":2147,"line_end":2147,"column_start":12,"column_end":30},"name":"begin_compute_pass","qualname":"<CommandEncoder>::begin_compute_pass","value":"pub fn begin_compute_pass(&mut Self, &ComputePassDescriptor) -> ComputePass","parent":null,"children":[],"decl_id":null,"docs":" Begins recording of a compute pass.","sig":null,"attributes":[{"value":"/ Begins recording of a compute pass.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73491,"byte_end":73530,"line_start":2144,"line_end":2144,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73535,"byte_end":73538,"line_start":2145,"line_end":2145,"column_start":5,"column_end":8}},{"value":"/ This function returns a [`ComputePass`] object which records a single compute pass.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73543,"byte_end":73630,"line_start":2146,"line_end":2146,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":74125,"byte_end":74146,"line_start":2161,"line_end":2161,"column_start":12,"column_end":33},"name":"copy_buffer_to_buffer","qualname":"<CommandEncoder>::copy_buffer_to_buffer","value":"pub fn copy_buffer_to_buffer(&mut Self, &Buffer, BufferAddress, &Buffer,\n                             BufferAddress, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Copy data from one buffer to another.","sig":null,"attributes":[{"value":"/ Copy data from one buffer to another.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73919,"byte_end":73960,"line_start":2155,"line_end":2155,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73965,"byte_end":73968,"line_start":2156,"line_end":2156,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73973,"byte_end":73985,"line_start":2157,"line_end":2157,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73990,"byte_end":73993,"line_start":2158,"line_end":2158,"column_start":5,"column_end":8}},{"value":"/ - Buffer offsets or copy size not a multiple of [`COPY_BUFFER_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":73998,"byte_end":74076,"line_start":2159,"line_end":2159,"column_start":5,"column_end":83}},{"value":"/ - Copy would overrun buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":74081,"byte_end":74113,"line_start":2160,"line_end":2160,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":74879,"byte_end":74901,"line_start":2187,"line_end":2187,"column_start":12,"column_end":34},"name":"copy_buffer_to_texture","qualname":"<CommandEncoder>::copy_buffer_to_texture","value":"pub fn copy_buffer_to_texture(&mut Self, ImageCopyBuffer, ImageCopyTexture,\n                              Extent3d)","parent":null,"children":[],"decl_id":null,"docs":" Copy data from a buffer to a texture.","sig":null,"attributes":[{"value":"/ Copy data from a buffer to a texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":74625,"byte_end":74666,"line_start":2180,"line_end":2180,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":74671,"byte_end":74674,"line_start":2181,"line_end":2181,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":74679,"byte_end":74691,"line_start":2182,"line_end":2182,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":74696,"byte_end":74699,"line_start":2183,"line_end":2183,"column_start":5,"column_end":8}},{"value":"/ - Copy would overrun buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":74704,"byte_end":74736,"line_start":2184,"line_end":2184,"column_start":5,"column_end":37}},{"value":"/ - Copy would overrun texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":74741,"byte_end":74774,"line_start":2185,"line_end":2185,"column_start":5,"column_end":38}},{"value":"/ - `source.layout.bytes_per_row` isn't divisible by [`COPY_BYTES_PER_ROW_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":74779,"byte_end":74867,"line_start":2186,"line_end":2186,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75499,"byte_end":75521,"line_start":2209,"line_end":2209,"column_start":12,"column_end":34},"name":"copy_texture_to_buffer","qualname":"<CommandEncoder>::copy_texture_to_buffer","value":"pub fn copy_texture_to_buffer(&mut Self, ImageCopyTexture, ImageCopyBuffer,\n                              Extent3d)","parent":null,"children":[],"decl_id":null,"docs":" Copy data from a texture to a buffer.","sig":null,"attributes":[{"value":"/ Copy data from a texture to a buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75245,"byte_end":75286,"line_start":2202,"line_end":2202,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75291,"byte_end":75294,"line_start":2203,"line_end":2203,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75299,"byte_end":75311,"line_start":2204,"line_end":2204,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75316,"byte_end":75319,"line_start":2205,"line_end":2205,"column_start":5,"column_end":8}},{"value":"/ - Copy would overrun buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75324,"byte_end":75356,"line_start":2206,"line_end":2206,"column_start":5,"column_end":37}},{"value":"/ - Copy would overrun texture.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75361,"byte_end":75394,"line_start":2207,"line_end":2207,"column_start":5,"column_end":38}},{"value":"/ - `source.layout.bytes_per_row` isn't divisible by [`COPY_BYTES_PER_ROW_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75399,"byte_end":75487,"line_start":2208,"line_end":2208,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76128,"byte_end":76151,"line_start":2231,"line_end":2231,"column_start":12,"column_end":35},"name":"copy_texture_to_texture","qualname":"<CommandEncoder>::copy_texture_to_texture","value":"pub fn copy_texture_to_texture(&mut Self, ImageCopyTexture, ImageCopyTexture,\n                               Extent3d)","parent":null,"children":[],"decl_id":null,"docs":" Copy data from one texture to another.","sig":null,"attributes":[{"value":"/ Copy data from one texture to another.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75865,"byte_end":75907,"line_start":2224,"line_end":2224,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75912,"byte_end":75915,"line_start":2225,"line_end":2225,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75920,"byte_end":75932,"line_start":2226,"line_end":2226,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75937,"byte_end":75940,"line_start":2227,"line_end":2227,"column_start":5,"column_end":8}},{"value":"/ - Textures are not the same type","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75945,"byte_end":75981,"line_start":2228,"line_end":2228,"column_start":5,"column_end":41}},{"value":"/ - If a depth texture, or a multisampled texture, the entire texture must be copied","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":75986,"byte_end":76072,"line_start":2229,"line_end":2229,"column_start":5,"column_end":91}},{"value":"/ - Copy would overrun either texture","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76077,"byte_end":76116,"line_start":2230,"line_end":2230,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76701,"byte_end":76714,"line_start":2253,"line_end":2253,"column_start":12,"column_end":25},"name":"clear_texture","qualname":"<CommandEncoder>::clear_texture","value":"pub fn clear_texture(&mut Self, &Texture, &ImageSubresourceRange)","parent":null,"children":[],"decl_id":null,"docs":" Clears texture to zero.","sig":null,"attributes":[{"value":"/ Clears texture to zero.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76497,"byte_end":76524,"line_start":2246,"line_end":2246,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76529,"byte_end":76532,"line_start":2247,"line_end":2247,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76537,"byte_end":76549,"line_start":2248,"line_end":2248,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76554,"byte_end":76557,"line_start":2249,"line_end":2249,"column_start":5,"column_end":8}},{"value":"/ - `CLEAR_COMMANDS` extension not enabled","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76562,"byte_end":76606,"line_start":2250,"line_end":2250,"column_start":5,"column_end":49}},{"value":"/ - Texture does not have `COPY_DST` usage.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76611,"byte_end":76656,"line_start":2251,"line_end":2251,"column_start":5,"column_end":50}},{"value":"/ - Range it out of bounds","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76661,"byte_end":76689,"line_start":2252,"line_end":2252,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77179,"byte_end":77191,"line_start":2269,"line_end":2269,"column_start":12,"column_end":24},"name":"clear_buffer","qualname":"<CommandEncoder>::clear_buffer","value":"pub fn clear_buffer(&mut Self, &Buffer, BufferAddress, Option<BufferSize>)","parent":null,"children":[],"decl_id":null,"docs":" Clears buffer to zero.","sig":null,"attributes":[{"value":"/ Clears buffer to zero.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":76977,"byte_end":77003,"line_start":2262,"line_end":2262,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77008,"byte_end":77011,"line_start":2263,"line_end":2263,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77016,"byte_end":77028,"line_start":2264,"line_end":2264,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77033,"byte_end":77036,"line_start":2265,"line_end":2265,"column_start":5,"column_end":8}},{"value":"/ - `CLEAR_COMMANDS` extension not enabled","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77041,"byte_end":77085,"line_start":2266,"line_end":2266,"column_start":5,"column_end":49}},{"value":"/ - Buffer does not have `COPY_DST` usage.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77090,"byte_end":77134,"line_start":2267,"line_end":2267,"column_start":5,"column_end":49}},{"value":"/ - Range it out of bounds","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77139,"byte_end":77167,"line_start":2268,"line_end":2268,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77541,"byte_end":77560,"line_start":2285,"line_end":2285,"column_start":12,"column_end":31},"name":"insert_debug_marker","qualname":"<CommandEncoder>::insert_debug_marker","value":"pub fn insert_debug_marker(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Inserts debug marker.\n","sig":null,"attributes":[{"value":"/ Inserts debug marker.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77504,"byte_end":77529,"line_start":2284,"line_end":2284,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77798,"byte_end":77814,"line_start":2291,"line_end":2291,"column_start":12,"column_end":28},"name":"push_debug_group","qualname":"<CommandEncoder>::push_debug_group","value":"pub fn push_debug_group(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Start record commands and group it into debug marker group.\n","sig":null,"attributes":[{"value":"/ Start record commands and group it into debug marker group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77723,"byte_end":77786,"line_start":2290,"line_end":2290,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78038,"byte_end":78053,"line_start":2297,"line_end":2297,"column_start":12,"column_end":27},"name":"pop_debug_group","qualname":"<CommandEncoder>::pop_debug_group","value":"pub fn pop_debug_group(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Stops command recording and creates debug group.\n","sig":null,"attributes":[{"value":"/ Stops command recording and creates debug group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":77974,"byte_end":78026,"line_start":2296,"line_end":2296,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78731,"byte_end":78746,"line_start":2312,"line_end":2312,"column_start":12,"column_end":27},"name":"write_timestamp","qualname":"<CommandEncoder>::write_timestamp","value":"pub fn write_timestamp(&mut Self, &QuerySet, u32)","parent":null,"children":[],"decl_id":null,"docs":" Issue a timestamp command at this point in the queue.\n The timestamp will be written to the specified query set, at the specified index.","sig":null,"attributes":[{"value":"/ Issue a timestamp command at this point in the queue.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78314,"byte_end":78371,"line_start":2305,"line_end":2305,"column_start":5,"column_end":62}},{"value":"/ The timestamp will be written to the specified query set, at the specified index.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78376,"byte_end":78461,"line_start":2306,"line_end":2306,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78466,"byte_end":78469,"line_start":2307,"line_end":2307,"column_start":5,"column_end":8}},{"value":"/ Must be multiplied by [`Queue::get_timestamp_period`] to get","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78474,"byte_end":78538,"line_start":2308,"line_end":2308,"column_start":5,"column_end":69}},{"value":"/ the value in nanoseconds. Absolute values have no meaning,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78543,"byte_end":78605,"line_start":2309,"line_end":2309,"column_start":5,"column_end":67}},{"value":"/ but timestamps can be subtracted to get the time it takes","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78610,"byte_end":78671,"line_start":2310,"line_end":2310,"column_start":5,"column_end":66}},{"value":"/ for a string of operations to complete.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78676,"byte_end":78719,"line_start":2311,"line_end":2311,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":79363,"byte_end":79380,"line_start":2327,"line_end":2327,"column_start":12,"column_end":29},"name":"resolve_query_set","qualname":"<CommandEncoder>::resolve_query_set","value":"pub fn resolve_query_set(&mut Self, &QuerySet, Range<u32>, &Buffer,\n                         BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Resolve a query set, writing the results into the supplied destination buffer.","sig":null,"attributes":[{"value":"/ Resolve a query set, writing the results into the supplied destination buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":79155,"byte_end":79237,"line_start":2324,"line_end":2324,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":79242,"byte_end":79245,"line_start":2325,"line_end":2325,"column_start":5,"column_end":8}},{"value":"/ Queries may be between 8 and 40 bytes each. See [`PipelineStatisticsTypes`] for more information.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":79250,"byte_end":79351,"line_start":2326,"line_end":2326,"column_start":5,"column_end":106}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80256,"byte_end":80270,"line_start":2352,"line_end":2352,"column_start":12,"column_end":26},"name":"set_bind_group","qualname":"<RenderPass>::set_bind_group","value":"pub fn set_bind_group(&mut Self, u32, &'a BindGroup, &[DynamicOffset])","parent":null,"children":[],"decl_id":null,"docs":" Sets the active bind group for a given bind group index. The bind group layout\n in the active pipeline when any `draw()` function is called must match the layout of this bind group.","sig":null,"attributes":[{"value":"/ Sets the active bind group for a given bind group index. The bind group layout","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":79881,"byte_end":79963,"line_start":2347,"line_end":2347,"column_start":5,"column_end":87}},{"value":"/ in the active pipeline when any `draw()` function is called must match the layout of this bind group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":79968,"byte_end":80073,"line_start":2348,"line_end":2348,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80078,"byte_end":80081,"line_start":2349,"line_end":2349,"column_start":5,"column_end":8}},{"value":"/ If the bind group have dynamic offsets, provide them in order of their declaration.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80086,"byte_end":80173,"line_start":2350,"line_end":2350,"column_start":5,"column_end":92}},{"value":"/ These offsets have to be aligned to [`BIND_BUFFER_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80178,"byte_end":80244,"line_start":2351,"line_end":2351,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80617,"byte_end":80629,"line_start":2364,"line_end":2364,"column_start":12,"column_end":24},"name":"set_pipeline","qualname":"<RenderPass>::set_pipeline","value":"pub fn set_pipeline(&mut Self, &'a RenderPipeline)","parent":null,"children":[],"decl_id":null,"docs":" Sets the active render pipeline.","sig":null,"attributes":[{"value":"/ Sets the active render pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80482,"byte_end":80518,"line_start":2361,"line_end":2361,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80523,"byte_end":80526,"line_start":2362,"line_end":2362,"column_start":5,"column_end":8}},{"value":"/ Subsequent draw calls will exhibit the behavior defined by `pipeline`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80531,"byte_end":80605,"line_start":2363,"line_end":2363,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80893,"byte_end":80911,"line_start":2371,"line_end":2371,"column_start":12,"column_end":30},"name":"set_blend_constant","qualname":"<RenderPass>::set_blend_constant","value":"pub fn set_blend_constant(&mut Self, Color)","parent":null,"children":[],"decl_id":null,"docs":" Sets the blend color as used by some of the blending modes.","sig":null,"attributes":[{"value":"/ Sets the blend color as used by some of the blending modes.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80746,"byte_end":80809,"line_start":2368,"line_end":2368,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80814,"byte_end":80817,"line_start":2369,"line_end":2369,"column_start":5,"column_end":8}},{"value":"/ Subsequent blending tests will test against this value.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80822,"byte_end":80881,"line_start":2370,"line_end":2370,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81193,"byte_end":81209,"line_start":2379,"line_end":2379,"column_start":12,"column_end":28},"name":"set_index_buffer","qualname":"<RenderPass>::set_index_buffer","value":"pub fn set_index_buffer(&mut Self, BufferSlice, IndexFormat)","parent":null,"children":[],"decl_id":null,"docs":" Sets the active index buffer.","sig":null,"attributes":[{"value":"/ Sets the active index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":80992,"byte_end":81025,"line_start":2375,"line_end":2375,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81030,"byte_end":81033,"line_start":2376,"line_end":2376,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw_indexed`](RenderPass::draw_indexed) on this [`RenderPass`] will","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81038,"byte_end":81132,"line_start":2377,"line_end":2377,"column_start":5,"column_end":99}},{"value":"/ use `buffer` as the source index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81137,"byte_end":81181,"line_start":2378,"line_end":2378,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81900,"byte_end":81917,"line_start":2399,"line_end":2399,"column_start":12,"column_end":29},"name":"set_vertex_buffer","qualname":"<RenderPass>::set_vertex_buffer","value":"pub fn set_vertex_buffer(&mut Self, u32, BufferSlice)","parent":null,"children":[],"decl_id":null,"docs":" Assign a vertex buffer to a slot.","sig":null,"attributes":[{"value":"/ Assign a vertex buffer to a slot.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81494,"byte_end":81531,"line_start":2389,"line_end":2389,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81536,"byte_end":81539,"line_start":2390,"line_end":2390,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw`] and [`draw_indexed`] on this","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81544,"byte_end":81605,"line_start":2391,"line_end":2391,"column_start":5,"column_end":66}},{"value":"/ [`RenderPass`] will use `buffer` as one of the source vertex buffers.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81610,"byte_end":81683,"line_start":2392,"line_end":2392,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81688,"byte_end":81691,"line_start":2393,"line_end":2393,"column_start":5,"column_end":8}},{"value":"/ The `slot` refers to the index of the matching descriptor in","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81696,"byte_end":81760,"line_start":2394,"line_end":2394,"column_start":5,"column_end":69}},{"value":"/ [`VertexState::buffers`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81765,"byte_end":81794,"line_start":2395,"line_end":2395,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81799,"byte_end":81802,"line_start":2396,"line_end":2396,"column_start":5,"column_end":8}},{"value":"/ [`draw`]: RenderPass::draw","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81807,"byte_end":81837,"line_start":2397,"line_end":2397,"column_start":5,"column_end":35}},{"value":"/ [`draw_indexed`]: RenderPass::draw_indexed","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":81842,"byte_end":81888,"line_start":2398,"line_end":2398,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82315,"byte_end":82331,"line_start":2412,"line_end":2412,"column_start":12,"column_end":28},"name":"set_scissor_rect","qualname":"<RenderPass>::set_scissor_rect","value":"pub fn set_scissor_rect(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Sets the scissor region.","sig":null,"attributes":[{"value":"/ Sets the scissor region.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82179,"byte_end":82207,"line_start":2409,"line_end":2409,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82212,"byte_end":82215,"line_start":2410,"line_end":2410,"column_start":5,"column_end":8}},{"value":"/ Subsequent draw calls will discard any fragments that fall outside this region.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82220,"byte_end":82303,"line_start":2411,"line_end":2411,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82571,"byte_end":82583,"line_start":2419,"line_end":2419,"column_start":12,"column_end":24},"name":"set_viewport","qualname":"<RenderPass>::set_viewport","value":"pub fn set_viewport(&mut Self, f32, f32, f32, f32, f32, f32)","parent":null,"children":[],"decl_id":null,"docs":" Sets the viewport region.","sig":null,"attributes":[{"value":"/ Sets the viewport region.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82452,"byte_end":82481,"line_start":2416,"line_end":2416,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82486,"byte_end":82489,"line_start":2417,"line_end":2417,"column_start":5,"column_end":8}},{"value":"/ Subsequent draw calls will draw any fragments in this region.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82494,"byte_end":82559,"line_start":2418,"line_end":2418,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82850,"byte_end":82871,"line_start":2426,"line_end":2426,"column_start":12,"column_end":33},"name":"set_stencil_reference","qualname":"<RenderPass>::set_stencil_reference","value":"pub fn set_stencil_reference(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Sets the stencil reference.","sig":null,"attributes":[{"value":"/ Sets the stencil reference.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82736,"byte_end":82767,"line_start":2423,"line_end":2423,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82772,"byte_end":82775,"line_start":2424,"line_end":2424,"column_start":5,"column_end":8}},{"value":"/ Subsequent stencil tests will test against this value.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82780,"byte_end":82838,"line_start":2425,"line_end":2425,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83121,"byte_end":83125,"line_start":2433,"line_end":2433,"column_start":12,"column_end":16},"name":"draw","qualname":"<RenderPass>::draw","value":"pub fn draw(&mut Self, Range<u32>, Range<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s).","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s).","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":82962,"byte_end":83016,"line_start":2430,"line_end":2430,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83021,"byte_end":83024,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83029,"byte_end":83109,"line_start":2432,"line_end":2432,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83293,"byte_end":83312,"line_start":2438,"line_end":2438,"column_start":12,"column_end":31},"name":"insert_debug_marker","qualname":"<RenderPass>::insert_debug_marker","value":"pub fn insert_debug_marker(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Inserts debug marker.\n","sig":null,"attributes":[{"value":"/ Inserts debug marker.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83256,"byte_end":83281,"line_start":2437,"line_end":2437,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83469,"byte_end":83485,"line_start":2443,"line_end":2443,"column_start":12,"column_end":28},"name":"push_debug_group","qualname":"<RenderPass>::push_debug_group","value":"pub fn push_debug_group(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Start record commands and group it into debug marker group.\n","sig":null,"attributes":[{"value":"/ Start record commands and group it into debug marker group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83394,"byte_end":83457,"line_start":2442,"line_end":2442,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83628,"byte_end":83643,"line_start":2448,"line_end":2448,"column_start":12,"column_end":27},"name":"pop_debug_group","qualname":"<RenderPass>::pop_debug_group","value":"pub fn pop_debug_group(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Stops command recording and creates debug group.\n","sig":null,"attributes":[{"value":"/ Stops command recording and creates debug group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83564,"byte_end":83616,"line_start":2447,"line_end":2447,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83985,"byte_end":83997,"line_start":2456,"line_end":2456,"column_start":12,"column_end":24},"name":"draw_indexed","qualname":"<RenderPass>::draw_indexed","value":"pub fn draw_indexed(&mut Self, Range<u32>, i32, Range<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83703,"byte_end":83792,"line_start":2452,"line_end":2452,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83797,"byte_end":83800,"line_start":2453,"line_end":2453,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderPass::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83805,"byte_end":83899,"line_start":2454,"line_end":2454,"column_start":5,"column_end":99}},{"value":"/ vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":83904,"byte_end":83973,"line_start":2455,"line_end":2455,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84834,"byte_end":84847,"line_start":2475,"line_end":2475,"column_start":12,"column_end":25},"name":"draw_indirect","qualname":"<RenderPass>::draw_indirect","value":"pub fn draw_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84166,"byte_end":84267,"line_start":2460,"line_end":2460,"column_start":5,"column_end":106}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84272,"byte_end":84275,"line_start":2461,"line_end":2461,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84280,"byte_end":84360,"line_start":2462,"line_end":2462,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84365,"byte_end":84368,"line_start":2463,"line_end":2463,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84373,"byte_end":84438,"line_start":2464,"line_end":2464,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84443,"byte_end":84446,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84451,"byte_end":84462,"line_start":2466,"line_end":2466,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84467,"byte_end":84481,"line_start":2467,"line_end":2467,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirect {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84486,"byte_end":84511,"line_start":2468,"line_end":2468,"column_start":5,"column_end":30}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84516,"byte_end":84577,"line_start":2469,"line_end":2469,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84582,"byte_end":84646,"line_start":2470,"line_end":2470,"column_start":5,"column_end":69}},{"value":"/     base_vertex: u32, // The Index of the first vertex to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84651,"byte_end":84718,"line_start":2471,"line_end":2471,"column_start":5,"column_end":72}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84723,"byte_end":84800,"line_start":2472,"line_end":2472,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84805,"byte_end":84810,"line_start":2473,"line_end":2473,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":84815,"byte_end":84822,"line_start":2474,"line_end":2474,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85920,"byte_end":85941,"line_start":2497,"line_end":2497,"column_start":12,"column_end":33},"name":"draw_indexed_indirect","qualname":"<RenderPass>::draw_indexed_indirect","value":"pub fn draw_indexed_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers,\n based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85002,"byte_end":85091,"line_start":2479,"line_end":2479,"column_start":5,"column_end":94}},{"value":"/ based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85096,"byte_end":85147,"line_start":2480,"line_end":2480,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85152,"byte_end":85155,"line_start":2481,"line_end":2481,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderPass::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85160,"byte_end":85254,"line_start":2482,"line_end":2482,"column_start":5,"column_end":99}},{"value":"/ vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85259,"byte_end":85328,"line_start":2483,"line_end":2483,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85333,"byte_end":85336,"line_start":2484,"line_end":2484,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85341,"byte_end":85406,"line_start":2485,"line_end":2485,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85411,"byte_end":85414,"line_start":2486,"line_end":2486,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85419,"byte_end":85430,"line_start":2487,"line_end":2487,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85435,"byte_end":85449,"line_start":2488,"line_end":2488,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirect {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85454,"byte_end":85486,"line_start":2489,"line_end":2489,"column_start":5,"column_end":37}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85491,"byte_end":85552,"line_start":2490,"line_end":2490,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85557,"byte_end":85621,"line_start":2491,"line_end":2491,"column_start":5,"column_end":69}},{"value":"/     base_index: u32, // The base index within the index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85626,"byte_end":85693,"line_start":2492,"line_end":2492,"column_start":5,"column_end":72}},{"value":"/     vertex_offset: i32, // The value added to the vertex index before indexing into the vertex buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85698,"byte_end":85804,"line_start":2493,"line_end":2493,"column_start":5,"column_end":111}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85809,"byte_end":85886,"line_start":2494,"line_end":2494,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85891,"byte_end":85896,"line_start":2495,"line_end":2495,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":85901,"byte_end":85908,"line_start":2496,"line_end":2496,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86278,"byte_end":86293,"line_start":2508,"line_end":2508,"column_start":12,"column_end":27},"name":"execute_bundles","qualname":"<RenderPass>::execute_bundles","value":"pub fn execute_bundles<I: Iterator<Item = &'a RenderBundle>>(&mut Self, I)","parent":null,"children":[],"decl_id":null,"docs":" Execute a [render bundle][RenderBundle], which is a set of pre-recorded commands\n that can be run together.\n","sig":null,"attributes":[{"value":"/ Execute a [render bundle][RenderBundle], which is a set of pre-recorded commands","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86148,"byte_end":86232,"line_start":2506,"line_end":2506,"column_start":5,"column_end":89}},{"value":"/ that can be run together.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86237,"byte_end":86266,"line_start":2507,"line_end":2507,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87389,"byte_end":87408,"line_start":2534,"line_end":2534,"column_start":12,"column_end":31},"name":"multi_draw_indirect","qualname":"<RenderPass>::multi_draw_indirect","value":"pub fn multi_draw_indirect(&mut Self, &'a Buffer, BufferAddress, u32)","parent":null,"children":[],"decl_id":null,"docs":" Dispatches multiple draw calls from the active vertex buffer(s) based on the contents of the `indirect_buffer`.\n `count` draw calls are issued.","sig":null,"attributes":[{"value":"/ Dispatches multiple draw calls from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86595,"byte_end":86710,"line_start":2516,"line_end":2516,"column_start":5,"column_end":120}},{"value":"/ `count` draw calls are issued.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86715,"byte_end":86749,"line_start":2517,"line_end":2517,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86754,"byte_end":86757,"line_start":2518,"line_end":2518,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86762,"byte_end":86842,"line_start":2519,"line_end":2519,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86847,"byte_end":86850,"line_start":2520,"line_end":2520,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86855,"byte_end":86920,"line_start":2521,"line_end":2521,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86925,"byte_end":86928,"line_start":2522,"line_end":2522,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86933,"byte_end":86944,"line_start":2523,"line_end":2523,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86949,"byte_end":86963,"line_start":2524,"line_end":2524,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirect {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86968,"byte_end":86993,"line_start":2525,"line_end":2525,"column_start":5,"column_end":30}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86998,"byte_end":87059,"line_start":2526,"line_end":2526,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87064,"byte_end":87128,"line_start":2527,"line_end":2527,"column_start":5,"column_end":69}},{"value":"/     base_vertex: u32, // The Index of the first vertex to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87133,"byte_end":87200,"line_start":2528,"line_end":2528,"column_start":5,"column_end":72}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87205,"byte_end":87282,"line_start":2529,"line_end":2529,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87287,"byte_end":87292,"line_start":2530,"line_end":2530,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87297,"byte_end":87304,"line_start":2531,"line_end":2531,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87309,"byte_end":87312,"line_start":2532,"line_end":2532,"column_start":5,"column_end":8}},{"value":"/ These draw structures are expected to be tightly packed.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87317,"byte_end":87377,"line_start":2533,"line_end":2533,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88667,"byte_end":88694,"line_start":2564,"line_end":2564,"column_start":12,"column_end":39},"name":"multi_draw_indexed_indirect","qualname":"<RenderPass>::multi_draw_indexed_indirect","value":"pub fn multi_draw_indexed_indirect(&mut Self, &'a Buffer, BufferAddress, u32)","parent":null,"children":[],"decl_id":null,"docs":" Dispatches multiple draw calls from the active index buffer and the active vertex buffers,\n based on the contents of the `indirect_buffer`. `count` draw calls are issued.","sig":null,"attributes":[{"value":"/ Dispatches multiple draw calls from the active index buffer and the active vertex buffers,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87640,"byte_end":87734,"line_start":2544,"line_end":2544,"column_start":5,"column_end":99}},{"value":"/ based on the contents of the `indirect_buffer`. `count` draw calls are issued.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87739,"byte_end":87821,"line_start":2545,"line_end":2545,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87826,"byte_end":87829,"line_start":2546,"line_end":2546,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderPass::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87834,"byte_end":87928,"line_start":2547,"line_end":2547,"column_start":5,"column_end":99}},{"value":"/ vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":87933,"byte_end":88002,"line_start":2548,"line_end":2548,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88007,"byte_end":88010,"line_start":2549,"line_end":2549,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88015,"byte_end":88080,"line_start":2550,"line_end":2550,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88085,"byte_end":88088,"line_start":2551,"line_end":2551,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88093,"byte_end":88104,"line_start":2552,"line_end":2552,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88109,"byte_end":88123,"line_start":2553,"line_end":2553,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirect {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88128,"byte_end":88160,"line_start":2554,"line_end":2554,"column_start":5,"column_end":37}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88165,"byte_end":88226,"line_start":2555,"line_end":2555,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88231,"byte_end":88295,"line_start":2556,"line_end":2556,"column_start":5,"column_end":69}},{"value":"/     base_index: u32, // The base index within the index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88300,"byte_end":88367,"line_start":2557,"line_end":2557,"column_start":5,"column_end":72}},{"value":"/     vertex_offset: i32, // The value added to the vertex index before indexing into the vertex buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88372,"byte_end":88478,"line_start":2558,"line_end":2558,"column_start":5,"column_end":111}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88483,"byte_end":88560,"line_start":2559,"line_end":2559,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88565,"byte_end":88570,"line_start":2560,"line_end":2560,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88575,"byte_end":88582,"line_start":2561,"line_end":2561,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88587,"byte_end":88590,"line_start":2562,"line_end":2562,"column_start":5,"column_end":8}},{"value":"/ These draw structures are expected to be tightly packed.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":88595,"byte_end":88655,"line_start":2563,"line_end":2563,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90339,"byte_end":90364,"line_start":2607,"line_end":2607,"column_start":12,"column_end":37},"name":"multi_draw_indirect_count","qualname":"<RenderPass>::multi_draw_indirect_count","value":"pub fn multi_draw_indirect_count(&mut Self, &'a Buffer, BufferAddress,\n                                 &'a Buffer, BufferAddress, u32)","parent":null,"children":[],"decl_id":null,"docs":" Disptaches multiple draw calls from the active vertex buffer(s) based on the contents of the `indirect_buffer`.\n The count buffer is read to determine how many draws to issue.","sig":null,"attributes":[{"value":"/ Disptaches multiple draw calls from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89070,"byte_end":89185,"line_start":2577,"line_end":2577,"column_start":5,"column_end":120}},{"value":"/ The count buffer is read to determine how many draws to issue.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89190,"byte_end":89256,"line_start":2578,"line_end":2578,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89261,"byte_end":89264,"line_start":2579,"line_end":2579,"column_start":5,"column_end":8}},{"value":"/ The indirect buffer must be long enough to account for `max_count` draws, however only `count` will","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89269,"byte_end":89372,"line_start":2580,"line_end":2580,"column_start":5,"column_end":108}},{"value":"/ draws will be read. If `count` is greater than `max_count`, `max_count` will be used.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89377,"byte_end":89466,"line_start":2581,"line_end":2581,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89471,"byte_end":89474,"line_start":2582,"line_end":2582,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89479,"byte_end":89559,"line_start":2583,"line_end":2583,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89564,"byte_end":89567,"line_start":2584,"line_end":2584,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89572,"byte_end":89637,"line_start":2585,"line_end":2585,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89642,"byte_end":89645,"line_start":2586,"line_end":2586,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89650,"byte_end":89661,"line_start":2587,"line_end":2587,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89666,"byte_end":89680,"line_start":2588,"line_end":2588,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirect {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89685,"byte_end":89710,"line_start":2589,"line_end":2589,"column_start":5,"column_end":30}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89715,"byte_end":89776,"line_start":2590,"line_end":2590,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89781,"byte_end":89845,"line_start":2591,"line_end":2591,"column_start":5,"column_end":69}},{"value":"/     base_vertex: u32, // The Index of the first vertex to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89850,"byte_end":89917,"line_start":2592,"line_end":2592,"column_start":5,"column_end":72}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89922,"byte_end":89999,"line_start":2593,"line_end":2593,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90004,"byte_end":90009,"line_start":2594,"line_end":2594,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90014,"byte_end":90021,"line_start":2595,"line_end":2595,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90026,"byte_end":90029,"line_start":2596,"line_end":2596,"column_start":5,"column_end":8}},{"value":"/ These draw structures are expected to be tightly packed.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90034,"byte_end":90094,"line_start":2597,"line_end":2597,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90099,"byte_end":90102,"line_start":2598,"line_end":2598,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `count_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90107,"byte_end":90169,"line_start":2599,"line_end":2599,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90174,"byte_end":90177,"line_start":2600,"line_end":2600,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90182,"byte_end":90193,"line_start":2601,"line_end":2601,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90198,"byte_end":90212,"line_start":2602,"line_end":2602,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirectCount {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90217,"byte_end":90247,"line_start":2603,"line_end":2603,"column_start":5,"column_end":35}},{"value":"/     count: u32, // Number of draw calls to issue.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90252,"byte_end":90305,"line_start":2604,"line_end":2604,"column_start":5,"column_end":58}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90310,"byte_end":90315,"line_start":2605,"line_end":2605,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90320,"byte_end":90327,"line_start":2606,"line_end":2606,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92280,"byte_end":92313,"line_start":2656,"line_end":2656,"column_start":12,"column_end":45},"name":"multi_draw_indexed_indirect_count","qualname":"<RenderPass>::multi_draw_indexed_indirect_count","value":"pub fn multi_draw_indexed_indirect_count(&mut Self, &'a Buffer, BufferAddress,\n                                         &'a Buffer, BufferAddress, u32)","parent":null,"children":[],"decl_id":null,"docs":" Dispatches multiple draw calls from the active index buffer and the active vertex buffers,\n based on the contents of the `indirect_buffer`. The count buffer is read to determine how many draws to issue.","sig":null,"attributes":[{"value":"/ Dispatches multiple draw calls from the active index buffer and the active vertex buffers,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90771,"byte_end":90865,"line_start":2624,"line_end":2624,"column_start":5,"column_end":99}},{"value":"/ based on the contents of the `indirect_buffer`. The count buffer is read to determine how many draws to issue.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90870,"byte_end":90984,"line_start":2625,"line_end":2625,"column_start":5,"column_end":119}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90989,"byte_end":90992,"line_start":2626,"line_end":2626,"column_start":5,"column_end":8}},{"value":"/ The indirect buffer must be long enough to account for `max_count` draws, however only `count` will","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":90997,"byte_end":91100,"line_start":2627,"line_end":2627,"column_start":5,"column_end":108}},{"value":"/ draws will be read. If `count` is greater than `max_count`, `max_count` will be used.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91105,"byte_end":91194,"line_start":2628,"line_end":2628,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91199,"byte_end":91202,"line_start":2629,"line_end":2629,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderPass::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91207,"byte_end":91301,"line_start":2630,"line_end":2630,"column_start":5,"column_end":99}},{"value":"/ vertex buffers can be set with [`RenderPass::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91306,"byte_end":91375,"line_start":2631,"line_end":2631,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91380,"byte_end":91383,"line_start":2632,"line_end":2632,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91388,"byte_end":91453,"line_start":2633,"line_end":2633,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91458,"byte_end":91461,"line_start":2634,"line_end":2634,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91466,"byte_end":91477,"line_start":2635,"line_end":2635,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91482,"byte_end":91496,"line_start":2636,"line_end":2636,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirect {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91501,"byte_end":91533,"line_start":2637,"line_end":2637,"column_start":5,"column_end":37}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91538,"byte_end":91599,"line_start":2638,"line_end":2638,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91604,"byte_end":91668,"line_start":2639,"line_end":2639,"column_start":5,"column_end":69}},{"value":"/     base_index: u32, // The base index within the index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91673,"byte_end":91740,"line_start":2640,"line_end":2640,"column_start":5,"column_end":72}},{"value":"/     vertex_offset: i32, // The value added to the vertex index before indexing into the vertex buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91745,"byte_end":91851,"line_start":2641,"line_end":2641,"column_start":5,"column_end":111}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91856,"byte_end":91933,"line_start":2642,"line_end":2642,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91938,"byte_end":91943,"line_start":2643,"line_end":2643,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91948,"byte_end":91955,"line_start":2644,"line_end":2644,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91960,"byte_end":91963,"line_start":2645,"line_end":2645,"column_start":5,"column_end":8}},{"value":"/ These draw structures are expected to be tightly packed.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":91968,"byte_end":92028,"line_start":2646,"line_end":2646,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92033,"byte_end":92036,"line_start":2647,"line_end":2647,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `count_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92041,"byte_end":92103,"line_start":2648,"line_end":2648,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92108,"byte_end":92111,"line_start":2649,"line_end":2649,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92116,"byte_end":92127,"line_start":2650,"line_end":2650,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92132,"byte_end":92146,"line_start":2651,"line_end":2651,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirectCount {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92151,"byte_end":92188,"line_start":2652,"line_end":2652,"column_start":5,"column_end":42}},{"value":"/     count: u32, // Number of draw calls to issue.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92193,"byte_end":92246,"line_start":2653,"line_end":2653,"column_start":5,"column_end":58}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92251,"byte_end":92256,"line_start":2654,"line_end":2654,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92261,"byte_end":92268,"line_start":2655,"line_end":2655,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94063,"byte_end":94081,"line_start":2704,"line_end":2704,"column_start":12,"column_end":30},"name":"set_push_constants","qualname":"<RenderPass>::set_push_constants","value":"pub fn set_push_constants(&mut Self, ShaderStages, u32, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Set push constant data.","sig":null,"attributes":[{"value":"/ Set push constant data.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92853,"byte_end":92880,"line_start":2676,"line_end":2676,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92885,"byte_end":92888,"line_start":2677,"line_end":2677,"column_start":5,"column_end":8}},{"value":"/ Offset is measured in bytes, but must be a multiple of [`PUSH_CONSTANT_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92893,"byte_end":92980,"line_start":2678,"line_end":2678,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92985,"byte_end":92988,"line_start":2679,"line_end":2679,"column_start":5,"column_end":8}},{"value":"/ Data size must be a multiple of 4 and must be aligned to the 4s, so we take an array of u32.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92993,"byte_end":93089,"line_start":2680,"line_end":2680,"column_start":5,"column_end":101}},{"value":"/ For example, with an offset of 4 and an array of `[u32; 3]`, that will write to the range","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93094,"byte_end":93187,"line_start":2681,"line_end":2681,"column_start":5,"column_end":98}},{"value":"/ of 4..16.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93192,"byte_end":93205,"line_start":2682,"line_end":2682,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93210,"byte_end":93213,"line_start":2683,"line_end":2683,"column_start":5,"column_end":8}},{"value":"/ For each byte in the range of push constant data written, the union of the stages of all push constant","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93218,"byte_end":93324,"line_start":2684,"line_end":2684,"column_start":5,"column_end":111}},{"value":"/ ranges that covers that byte must be exactly `stages`. There's no good way of explaining this simply,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93329,"byte_end":93434,"line_start":2685,"line_end":2685,"column_start":5,"column_end":110}},{"value":"/ so here are some examples:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93439,"byte_end":93469,"line_start":2686,"line_end":2686,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93474,"byte_end":93477,"line_start":2687,"line_end":2687,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93482,"byte_end":93493,"line_start":2688,"line_end":2688,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93498,"byte_end":93523,"line_start":2689,"line_end":2689,"column_start":5,"column_end":30}},{"value":"/ - 0..4 Vertex","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93528,"byte_end":93545,"line_start":2690,"line_end":2690,"column_start":5,"column_end":22}},{"value":"/ - 4..8 Fragment","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93550,"byte_end":93569,"line_start":2691,"line_end":2691,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93574,"byte_end":93581,"line_start":2692,"line_end":2692,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93586,"byte_end":93589,"line_start":2693,"line_end":2693,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in two set_push_constants calls. First for the `Vertex` range, second for the `Fragment` range.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93594,"byte_end":93723,"line_start":2694,"line_end":2694,"column_start":5,"column_end":134}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93728,"byte_end":93731,"line_start":2695,"line_end":2695,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93736,"byte_end":93747,"line_start":2696,"line_end":2696,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93752,"byte_end":93777,"line_start":2697,"line_end":2697,"column_start":5,"column_end":30}},{"value":"/ - 0..8  Vertex","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93782,"byte_end":93800,"line_start":2698,"line_end":2698,"column_start":5,"column_end":23}},{"value":"/ - 4..12 Fragment","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93805,"byte_end":93825,"line_start":2699,"line_end":2699,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93830,"byte_end":93837,"line_start":2700,"line_end":2700,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93842,"byte_end":93845,"line_start":2701,"line_end":2701,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in three set_push_constants calls. First for the `Vertex` only range 0..4, second","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93850,"byte_end":93965,"line_start":2702,"line_end":2702,"column_start":5,"column_end":120}},{"value":"/ for the `Vertex | Fragment` range 4..8, third for the `Fragment` range 8..12.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":93970,"byte_end":94051,"line_start":2703,"line_end":2703,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94755,"byte_end":94770,"line_start":2718,"line_end":2718,"column_start":12,"column_end":27},"name":"write_timestamp","qualname":"<RenderPass>::write_timestamp","value":"pub fn write_timestamp(&mut Self, &QuerySet, u32)","parent":null,"children":[],"decl_id":null,"docs":" Issue a timestamp command at this point in the queue. The\n timestamp will be written to the specified query set, at the specified index.","sig":null,"attributes":[{"value":"/ Issue a timestamp command at this point in the queue. The","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94338,"byte_end":94399,"line_start":2711,"line_end":2711,"column_start":5,"column_end":66}},{"value":"/ timestamp will be written to the specified query set, at the specified index.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94404,"byte_end":94485,"line_start":2712,"line_end":2712,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94490,"byte_end":94493,"line_start":2713,"line_end":2713,"column_start":5,"column_end":8}},{"value":"/ Must be multiplied by [`Queue::get_timestamp_period`] to get","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94498,"byte_end":94562,"line_start":2714,"line_end":2714,"column_start":5,"column_end":69}},{"value":"/ the value in nanoseconds. Absolute values have no meaning,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94567,"byte_end":94629,"line_start":2715,"line_end":2715,"column_start":5,"column_end":67}},{"value":"/ but timestamps can be subtracted to get the time it takes","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94634,"byte_end":94695,"line_start":2716,"line_end":2716,"column_start":5,"column_end":66}},{"value":"/ for a string of operations to complete.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94700,"byte_end":94743,"line_start":2717,"line_end":2717,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95210,"byte_end":95241,"line_start":2727,"line_end":2727,"column_start":12,"column_end":43},"name":"begin_pipeline_statistics_query","qualname":"<RenderPass>::begin_pipeline_statistics_query","value":"pub fn begin_pipeline_statistics_query(&mut Self, &QuerySet, u32)","parent":null,"children":[],"decl_id":null,"docs":" Start a pipeline statistics query on this render pass. It can be ended with\n `end_pipeline_statistics_query`. Pipeline statistics queries may not be nested.\n","sig":null,"attributes":[{"value":"/ Start a pipeline statistics query on this render pass. It can be ended with","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95031,"byte_end":95110,"line_start":2725,"line_end":2725,"column_start":5,"column_end":84}},{"value":"/ `end_pipeline_statistics_query`. Pipeline statistics queries may not be nested.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95115,"byte_end":95198,"line_start":2726,"line_end":2726,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95579,"byte_end":95608,"line_start":2734,"line_end":2734,"column_start":12,"column_end":41},"name":"end_pipeline_statistics_query","qualname":"<RenderPass>::end_pipeline_statistics_query","value":"pub fn end_pipeline_statistics_query(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" End the pipeline statistics query on this render pass. It can be started with\n `begin_pipeline_statistics_query`. Pipeline statistics queries may not be nested.\n","sig":null,"attributes":[{"value":"/ End the pipeline statistics query on this render pass. It can be started with","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95396,"byte_end":95477,"line_start":2732,"line_end":2732,"column_start":5,"column_end":86}},{"value":"/ `begin_pipeline_statistics_query`. Pipeline statistics queries may not be nested.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95482,"byte_end":95567,"line_start":2733,"line_end":2733,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96389,"byte_end":96403,"line_start":2756,"line_end":2756,"column_start":12,"column_end":26},"name":"set_bind_group","qualname":"<ComputePass>::set_bind_group","value":"pub fn set_bind_group(&mut Self, u32, &'a BindGroup, &[DynamicOffset])","parent":null,"children":[],"decl_id":null,"docs":" Sets the active bind group for a given bind group index. The bind group layout\n in the active pipeline when the `dispatch()` function is called must match the layout of this bind group.","sig":null,"attributes":[{"value":"/ Sets the active bind group for a given bind group index. The bind group layout","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96010,"byte_end":96092,"line_start":2751,"line_end":2751,"column_start":5,"column_end":87}},{"value":"/ in the active pipeline when the `dispatch()` function is called must match the layout of this bind group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96097,"byte_end":96206,"line_start":2752,"line_end":2752,"column_start":5,"column_end":114}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96211,"byte_end":96214,"line_start":2753,"line_end":2753,"column_start":5,"column_end":8}},{"value":"/ If the bind group have dynamic offsets, provide them in order of their declaration.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96219,"byte_end":96306,"line_start":2754,"line_end":2754,"column_start":5,"column_end":92}},{"value":"/ These offsets have to be aligned to [`BIND_BUFFER_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96311,"byte_end":96377,"line_start":2755,"line_end":2755,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96670,"byte_end":96682,"line_start":2766,"line_end":2766,"column_start":12,"column_end":24},"name":"set_pipeline","qualname":"<ComputePass>::set_pipeline","value":"pub fn set_pipeline(&mut Self, &'a ComputePipeline)","parent":null,"children":[],"decl_id":null,"docs":" Sets the active compute pipeline.\n","sig":null,"attributes":[{"value":"/ Sets the active compute pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96621,"byte_end":96658,"line_start":2765,"line_end":2765,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96843,"byte_end":96862,"line_start":2771,"line_end":2771,"column_start":12,"column_end":31},"name":"insert_debug_marker","qualname":"<ComputePass>::insert_debug_marker","value":"pub fn insert_debug_marker(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Inserts debug marker.\n","sig":null,"attributes":[{"value":"/ Inserts debug marker.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96806,"byte_end":96831,"line_start":2770,"line_end":2770,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97019,"byte_end":97035,"line_start":2776,"line_end":2776,"column_start":12,"column_end":28},"name":"push_debug_group","qualname":"<ComputePass>::push_debug_group","value":"pub fn push_debug_group(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Start record commands and group it into debug marker group.\n","sig":null,"attributes":[{"value":"/ Start record commands and group it into debug marker group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":96944,"byte_end":97007,"line_start":2775,"line_end":2775,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97178,"byte_end":97193,"line_start":2781,"line_end":2781,"column_start":12,"column_end":27},"name":"pop_debug_group","qualname":"<ComputePass>::pop_debug_group","value":"pub fn pop_debug_group(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Stops command recording and creates debug group.\n","sig":null,"attributes":[{"value":"/ Stops command recording and creates debug group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97114,"byte_end":97166,"line_start":2780,"line_end":2780,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97401,"byte_end":97409,"line_start":2788,"line_end":2788,"column_start":12,"column_end":20},"name":"dispatch","qualname":"<ComputePass>::dispatch","value":"pub fn dispatch(&mut Self, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Dispatches compute work operations.","sig":null,"attributes":[{"value":"/ Dispatches compute work operations.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97253,"byte_end":97292,"line_start":2785,"line_end":2785,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97297,"byte_end":97300,"line_start":2786,"line_end":2786,"column_start":5,"column_end":8}},{"value":"/ `x`, `y` and `z` denote the number of work groups to dispatch in each dimension.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97305,"byte_end":97389,"line_start":2787,"line_end":2787,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1385},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97616,"byte_end":97633,"line_start":2793,"line_end":2793,"column_start":12,"column_end":29},"name":"dispatch_indirect","qualname":"<ComputePass>::dispatch_indirect","value":"pub fn dispatch_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Dispatches compute work operations, based on the contents of the `indirect_buffer`.\n","sig":null,"attributes":[{"value":"/ Dispatches compute work operations, based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97517,"byte_end":97604,"line_start":2792,"line_end":2792,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98337,"byte_end":98355,"line_start":2811,"line_end":2811,"column_start":12,"column_end":30},"name":"set_push_constants","qualname":"<ComputePass>::set_push_constants","value":"pub fn set_push_constants(&mut Self, u32, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Set push constant data.","sig":null,"attributes":[{"value":"/ Set push constant data.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97973,"byte_end":98000,"line_start":2804,"line_end":2804,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98005,"byte_end":98008,"line_start":2805,"line_end":2805,"column_start":5,"column_end":8}},{"value":"/ Offset is measured in bytes, but must be a multiple of [`PUSH_CONSTANT_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98013,"byte_end":98100,"line_start":2806,"line_end":2806,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98105,"byte_end":98108,"line_start":2807,"line_end":2807,"column_start":5,"column_end":8}},{"value":"/ Data size must be a multiple of 4 and must be aligned to the 4s, so we take an array of u32.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98113,"byte_end":98209,"line_start":2808,"line_end":2808,"column_start":5,"column_end":101}},{"value":"/ For example, with an offset of 4 and an array of `[u32; 3]`, that will write to the range","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98214,"byte_end":98307,"line_start":2809,"line_end":2809,"column_start":5,"column_end":98}},{"value":"/ of 4..16.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98312,"byte_end":98325,"line_start":2810,"line_end":2810,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98992,"byte_end":99007,"line_start":2824,"line_end":2824,"column_start":12,"column_end":27},"name":"write_timestamp","qualname":"<ComputePass>::write_timestamp","value":"pub fn write_timestamp(&mut Self, &QuerySet, u32)","parent":null,"children":[],"decl_id":null,"docs":" Issue a timestamp command at this point in the queue. The timestamp will be written to the specified query set, at the specified index.","sig":null,"attributes":[{"value":"/ Issue a timestamp command at this point in the queue. The timestamp will be written to the specified query set, at the specified index.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98583,"byte_end":98722,"line_start":2818,"line_end":2818,"column_start":5,"column_end":144}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98727,"byte_end":98730,"line_start":2819,"line_end":2819,"column_start":5,"column_end":8}},{"value":"/ Must be multiplied by [`Queue::get_timestamp_period`] to get","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98735,"byte_end":98799,"line_start":2820,"line_end":2820,"column_start":5,"column_end":69}},{"value":"/ the value in nanoseconds. Absolute values have no meaning,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98804,"byte_end":98866,"line_start":2821,"line_end":2821,"column_start":5,"column_end":67}},{"value":"/ but timestamps can be subtracted to get the time it takes","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98871,"byte_end":98932,"line_start":2822,"line_end":2822,"column_start":5,"column_end":66}},{"value":"/ for a string of operations to complete.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98937,"byte_end":98980,"line_start":2823,"line_end":2823,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":99448,"byte_end":99479,"line_start":2833,"line_end":2833,"column_start":12,"column_end":43},"name":"begin_pipeline_statistics_query","qualname":"<ComputePass>::begin_pipeline_statistics_query","value":"pub fn begin_pipeline_statistics_query(&mut Self, &QuerySet, u32)","parent":null,"children":[],"decl_id":null,"docs":" Start a pipeline statistics query on this render pass. It can be ended with\n `end_pipeline_statistics_query`. Pipeline statistics queries may not be nested.\n","sig":null,"attributes":[{"value":"/ Start a pipeline statistics query on this render pass. It can be ended with","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":99269,"byte_end":99348,"line_start":2831,"line_end":2831,"column_start":5,"column_end":84}},{"value":"/ `end_pipeline_statistics_query`. Pipeline statistics queries may not be nested.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":99353,"byte_end":99436,"line_start":2832,"line_end":2832,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":99817,"byte_end":99846,"line_start":2840,"line_end":2840,"column_start":12,"column_end":41},"name":"end_pipeline_statistics_query","qualname":"<ComputePass>::end_pipeline_statistics_query","value":"pub fn end_pipeline_statistics_query(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" End the pipeline statistics query on this render pass. It can be started with\n `begin_pipeline_statistics_query`. Pipeline statistics queries may not be nested.\n","sig":null,"attributes":[{"value":"/ End the pipeline statistics query on this render pass. It can be started with","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":99634,"byte_end":99715,"line_start":2838,"line_end":2838,"column_start":5,"column_end":86}},{"value":"/ `begin_pipeline_statistics_query`. Pipeline statistics queries may not be nested.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":99720,"byte_end":99805,"line_start":2839,"line_end":2839,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":100368,"byte_end":100374,"line_start":2858,"line_end":2858,"column_start":12,"column_end":18},"name":"finish","qualname":"<RenderBundleEncoder>::finish","value":"pub fn finish(Self, &RenderBundleDescriptor) -> RenderBundle","parent":null,"children":[],"decl_id":null,"docs":" Finishes recording and returns a [`RenderBundle`] that can be executed in other render passes.\n","sig":null,"attributes":[{"value":"/ Finishes recording and returns a [`RenderBundle`] that can be executed in other render passes.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":100258,"byte_end":100356,"line_start":2857,"line_end":2857,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":100912,"byte_end":100926,"line_start":2869,"line_end":2869,"column_start":12,"column_end":26},"name":"set_bind_group","qualname":"<RenderBundleEncoder>::set_bind_group","value":"pub fn set_bind_group(&mut Self, u32, &'a BindGroup, &[DynamicOffset])","parent":null,"children":[],"decl_id":null,"docs":" Sets the active bind group for a given bind group index. The bind group layout\n in the active pipeline when any `draw()` function is called must match the layout of this bind group.","sig":null,"attributes":[{"value":"/ Sets the active bind group for a given bind group index. The bind group layout","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":100608,"byte_end":100690,"line_start":2865,"line_end":2865,"column_start":5,"column_end":87}},{"value":"/ in the active pipeline when any `draw()` function is called must match the layout of this bind group.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":100695,"byte_end":100800,"line_start":2866,"line_end":2866,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":100805,"byte_end":100808,"line_start":2867,"line_end":2867,"column_start":5,"column_end":8}},{"value":"/ If the bind group have dynamic offsets, provide them in order of their declaration.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":100813,"byte_end":100900,"line_start":2868,"line_end":2868,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101273,"byte_end":101285,"line_start":2881,"line_end":2881,"column_start":12,"column_end":24},"name":"set_pipeline","qualname":"<RenderBundleEncoder>::set_pipeline","value":"pub fn set_pipeline(&mut Self, &'a RenderPipeline)","parent":null,"children":[],"decl_id":null,"docs":" Sets the active render pipeline.","sig":null,"attributes":[{"value":"/ Sets the active render pipeline.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101138,"byte_end":101174,"line_start":2878,"line_end":2878,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101179,"byte_end":101182,"line_start":2879,"line_end":2879,"column_start":5,"column_end":8}},{"value":"/ Subsequent draw calls will exhibit the behavior defined by `pipeline`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101187,"byte_end":101261,"line_start":2880,"line_end":2880,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101621,"byte_end":101637,"line_start":2889,"line_end":2889,"column_start":12,"column_end":28},"name":"set_index_buffer","qualname":"<RenderBundleEncoder>::set_index_buffer","value":"pub fn set_index_buffer(&mut Self, BufferSlice, IndexFormat)","parent":null,"children":[],"decl_id":null,"docs":" Sets the active index buffer.","sig":null,"attributes":[{"value":"/ Sets the active index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101402,"byte_end":101435,"line_start":2885,"line_end":2885,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101440,"byte_end":101443,"line_start":2886,"line_end":2886,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw_indexed`](RenderBundleEncoder::draw_indexed) on this [`RenderBundleEncoder`] will","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101448,"byte_end":101560,"line_start":2887,"line_end":2887,"column_start":5,"column_end":117}},{"value":"/ use `buffer` as the source index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101565,"byte_end":101609,"line_start":2888,"line_end":2888,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102355,"byte_end":102372,"line_start":2909,"line_end":2909,"column_start":12,"column_end":29},"name":"set_vertex_buffer","qualname":"<RenderBundleEncoder>::set_vertex_buffer","value":"pub fn set_vertex_buffer(&mut Self, u32, BufferSlice)","parent":null,"children":[],"decl_id":null,"docs":" Assign a vertex buffer to a slot.","sig":null,"attributes":[{"value":"/ Assign a vertex buffer to a slot.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101922,"byte_end":101959,"line_start":2899,"line_end":2899,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101964,"byte_end":101967,"line_start":2900,"line_end":2900,"column_start":5,"column_end":8}},{"value":"/ Subsequent calls to [`draw`] and [`draw_indexed`] on this","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":101972,"byte_end":102033,"line_start":2901,"line_end":2901,"column_start":5,"column_end":66}},{"value":"/ [`RenderBundleEncoder`] will use `buffer` as one of the source vertex buffers.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102038,"byte_end":102120,"line_start":2902,"line_end":2902,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102125,"byte_end":102128,"line_start":2903,"line_end":2903,"column_start":5,"column_end":8}},{"value":"/ The `slot` refers to the index of the matching descriptor in","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102133,"byte_end":102197,"line_start":2904,"line_end":2904,"column_start":5,"column_end":69}},{"value":"/ [`VertexState::buffers`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102202,"byte_end":102231,"line_start":2905,"line_end":2905,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102236,"byte_end":102239,"line_start":2906,"line_end":2906,"column_start":5,"column_end":8}},{"value":"/ [`draw`]: RenderBundleEncoder::draw","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102244,"byte_end":102283,"line_start":2907,"line_end":2907,"column_start":5,"column_end":44}},{"value":"/ [`draw_indexed`]: RenderBundleEncoder::draw_indexed","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102288,"byte_end":102343,"line_start":2908,"line_end":2908,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102802,"byte_end":102806,"line_start":2922,"line_end":2922,"column_start":12,"column_end":16},"name":"draw","qualname":"<RenderBundleEncoder>::draw","value":"pub fn draw(&mut Self, Range<u32>, Range<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s).","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s).","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102634,"byte_end":102688,"line_start":2919,"line_end":2919,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102693,"byte_end":102696,"line_start":2920,"line_end":2920,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderBundleEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102701,"byte_end":102790,"line_start":2921,"line_end":2921,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103237,"byte_end":103249,"line_start":2930,"line_end":2930,"column_start":12,"column_end":24},"name":"draw_indexed","qualname":"<RenderBundleEncoder>::draw_indexed","value":"pub fn draw_indexed(&mut Self, Range<u32>, i32, Range<u32>)","parent":null,"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":102937,"byte_end":103026,"line_start":2926,"line_end":2926,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103031,"byte_end":103034,"line_start":2927,"line_end":2927,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderBundleEncoder::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103039,"byte_end":103142,"line_start":2928,"line_end":2928,"column_start":5,"column_end":108}},{"value":"/ vertex buffers can be set with [`RenderBundleEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103147,"byte_end":103225,"line_start":2929,"line_end":2929,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104095,"byte_end":104108,"line_start":2949,"line_end":2949,"column_start":12,"column_end":25},"name":"draw_indirect","qualname":"<RenderBundleEncoder>::draw_indirect","value":"pub fn draw_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws primitives from the active vertex buffer(s) based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103418,"byte_end":103519,"line_start":2934,"line_end":2934,"column_start":5,"column_end":106}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103524,"byte_end":103527,"line_start":2935,"line_end":2935,"column_start":5,"column_end":8}},{"value":"/ The active vertex buffers can be set with [`RenderBundleEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103532,"byte_end":103621,"line_start":2936,"line_end":2936,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103626,"byte_end":103629,"line_start":2937,"line_end":2937,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103634,"byte_end":103699,"line_start":2938,"line_end":2938,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103704,"byte_end":103707,"line_start":2939,"line_end":2939,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103712,"byte_end":103723,"line_start":2940,"line_end":2940,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103728,"byte_end":103742,"line_start":2941,"line_end":2941,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndirect {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103747,"byte_end":103772,"line_start":2942,"line_end":2942,"column_start":5,"column_end":30}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103777,"byte_end":103838,"line_start":2943,"line_end":2943,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103843,"byte_end":103907,"line_start":2944,"line_end":2944,"column_start":5,"column_end":69}},{"value":"/     base_vertex: u32, // The Index of the first vertex to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103912,"byte_end":103979,"line_start":2945,"line_end":2945,"column_start":5,"column_end":72}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":103984,"byte_end":104061,"line_start":2946,"line_end":2946,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104066,"byte_end":104071,"line_start":2947,"line_end":2947,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104076,"byte_end":104083,"line_start":2948,"line_end":2948,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105199,"byte_end":105220,"line_start":2971,"line_end":2971,"column_start":12,"column_end":33},"name":"draw_indexed_indirect","qualname":"<RenderBundleEncoder>::draw_indexed_indirect","value":"pub fn draw_indexed_indirect(&mut Self, &'a Buffer, BufferAddress)","parent":null,"children":[],"decl_id":null,"docs":" Draws indexed primitives using the active index buffer and the active vertex buffers,\n based on the contents of the `indirect_buffer`.","sig":null,"attributes":[{"value":"/ Draws indexed primitives using the active index buffer and the active vertex buffers,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104263,"byte_end":104352,"line_start":2953,"line_end":2953,"column_start":5,"column_end":94}},{"value":"/ based on the contents of the `indirect_buffer`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104357,"byte_end":104408,"line_start":2954,"line_end":2954,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104413,"byte_end":104416,"line_start":2955,"line_end":2955,"column_start":5,"column_end":8}},{"value":"/ The active index buffer can be set with [`RenderBundleEncoder::set_index_buffer`], while the active","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104421,"byte_end":104524,"line_start":2956,"line_end":2956,"column_start":5,"column_end":108}},{"value":"/ vertex buffers can be set with [`RenderBundleEncoder::set_vertex_buffer`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104529,"byte_end":104607,"line_start":2957,"line_end":2957,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104612,"byte_end":104615,"line_start":2958,"line_end":2958,"column_start":5,"column_end":8}},{"value":"/ The structure expected in `indirect_buffer` is the following:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104620,"byte_end":104685,"line_start":2959,"line_end":2959,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104690,"byte_end":104693,"line_start":2960,"line_end":2960,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104698,"byte_end":104709,"line_start":2961,"line_end":2961,"column_start":5,"column_end":16}},{"value":"/ #[repr(C)]","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104714,"byte_end":104728,"line_start":2962,"line_end":2962,"column_start":5,"column_end":19}},{"value":"/ struct DrawIndexedIndirect {","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104733,"byte_end":104765,"line_start":2963,"line_end":2963,"column_start":5,"column_end":37}},{"value":"/     vertex_count: u32, // The number of vertices to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104770,"byte_end":104831,"line_start":2964,"line_end":2964,"column_start":5,"column_end":66}},{"value":"/     instance_count: u32, // The number of instances to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104836,"byte_end":104900,"line_start":2965,"line_end":2965,"column_start":5,"column_end":69}},{"value":"/     base_index: u32, // The base index within the index buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104905,"byte_end":104972,"line_start":2966,"line_end":2966,"column_start":5,"column_end":72}},{"value":"/     vertex_offset: i32, // The value added to the vertex index before indexing into the vertex buffer.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":104977,"byte_end":105083,"line_start":2967,"line_end":2967,"column_start":5,"column_end":111}},{"value":"/     base_instance: u32, // The instance ID of the first instance to draw.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105088,"byte_end":105165,"line_start":2968,"line_end":2968,"column_start":5,"column_end":82}},{"value":"/ }","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105170,"byte_end":105175,"line_start":2969,"line_end":2969,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105180,"byte_end":105187,"line_start":2970,"line_end":2970,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106771,"byte_end":106789,"line_start":3011,"line_end":3011,"column_start":12,"column_end":30},"name":"set_push_constants","qualname":"<RenderBundleEncoder>::set_push_constants","value":"pub fn set_push_constants(&mut Self, ShaderStages, u32, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Set push constant data.","sig":null,"attributes":[{"value":"/ Set push constant data.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105561,"byte_end":105588,"line_start":2983,"line_end":2983,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105593,"byte_end":105596,"line_start":2984,"line_end":2984,"column_start":5,"column_end":8}},{"value":"/ Offset is measured in bytes, but must be a multiple of [`PUSH_CONSTANT_ALIGNMENT`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105601,"byte_end":105688,"line_start":2985,"line_end":2985,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105693,"byte_end":105696,"line_start":2986,"line_end":2986,"column_start":5,"column_end":8}},{"value":"/ Data size must be a multiple of 4 and must be aligned to the 4s, so we take an array of u32.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105701,"byte_end":105797,"line_start":2987,"line_end":2987,"column_start":5,"column_end":101}},{"value":"/ For example, with an offset of 4 and an array of `[u32; 3]`, that will write to the range","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105802,"byte_end":105895,"line_start":2988,"line_end":2988,"column_start":5,"column_end":98}},{"value":"/ of 4..16.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105900,"byte_end":105913,"line_start":2989,"line_end":2989,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105918,"byte_end":105921,"line_start":2990,"line_end":2990,"column_start":5,"column_end":8}},{"value":"/ For each byte in the range of push constant data written, the union of the stages of all push constant","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105926,"byte_end":106032,"line_start":2991,"line_end":2991,"column_start":5,"column_end":111}},{"value":"/ ranges that covers that byte must be exactly `stages`. There's no good way of explaining this simply,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106037,"byte_end":106142,"line_start":2992,"line_end":2992,"column_start":5,"column_end":110}},{"value":"/ so here are some examples:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106147,"byte_end":106177,"line_start":2993,"line_end":2993,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106182,"byte_end":106185,"line_start":2994,"line_end":2994,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106190,"byte_end":106201,"line_start":2995,"line_end":2995,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106206,"byte_end":106231,"line_start":2996,"line_end":2996,"column_start":5,"column_end":30}},{"value":"/ - 0..4 Vertex","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106236,"byte_end":106253,"line_start":2997,"line_end":2997,"column_start":5,"column_end":22}},{"value":"/ - 4..8 Fragment","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106258,"byte_end":106277,"line_start":2998,"line_end":2998,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106282,"byte_end":106289,"line_start":2999,"line_end":2999,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106294,"byte_end":106297,"line_start":3000,"line_end":3000,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in two set_push_constants calls. First for the `Vertex` range, second for the `Fragment` range.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106302,"byte_end":106431,"line_start":3001,"line_end":3001,"column_start":5,"column_end":134}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106436,"byte_end":106439,"line_start":3002,"line_end":3002,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106444,"byte_end":106455,"line_start":3003,"line_end":3003,"column_start":5,"column_end":16}},{"value":"/ For the given ranges:","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106460,"byte_end":106485,"line_start":3004,"line_end":3004,"column_start":5,"column_end":30}},{"value":"/ - 0..8  Vertex","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106490,"byte_end":106508,"line_start":3005,"line_end":3005,"column_start":5,"column_end":23}},{"value":"/ - 4..12 Fragment","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106513,"byte_end":106533,"line_start":3006,"line_end":3006,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106538,"byte_end":106545,"line_start":3007,"line_end":3007,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106550,"byte_end":106553,"line_start":3008,"line_end":3008,"column_start":5,"column_end":8}},{"value":"/ You would need to upload this in three set_push_constants calls. First for the `Vertex` only range 0..4, second","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106558,"byte_end":106673,"line_start":3009,"line_end":3009,"column_start":5,"column_end":120}},{"value":"/ for the `Vertex | Fragment` range 4..8, third for the `Fragment` range 8..12.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106678,"byte_end":106759,"line_start":3010,"line_end":3010,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107228,"byte_end":107240,"line_start":3022,"line_end":3022,"column_start":12,"column_end":24},"name":"write_buffer","qualname":"<Queue>::write_buffer","value":"pub fn write_buffer(&Self, &Buffer, BufferAddress, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Schedule a data write into `buffer` starting at `offset`.","sig":null,"attributes":[{"value":"/ Schedule a data write into `buffer` starting at `offset`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106935,"byte_end":106996,"line_start":3017,"line_end":3017,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107001,"byte_end":107004,"line_start":3018,"line_end":3018,"column_start":5,"column_end":8}},{"value":"/ This method is intended to have low performance costs.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107009,"byte_end":107067,"line_start":3019,"line_end":3019,"column_start":5,"column_end":63}},{"value":"/ As such, the write is not immediately submitted, and instead enqueued","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107072,"byte_end":107145,"line_start":3020,"line_end":3020,"column_start":5,"column_end":78}},{"value":"/ internally to happen at the start of the next `submit()` call.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107150,"byte_end":107216,"line_start":3021,"line_end":3021,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107675,"byte_end":107688,"line_start":3031,"line_end":3031,"column_start":12,"column_end":25},"name":"write_texture","qualname":"<Queue>::write_texture","value":"pub fn write_texture(&Self, ImageCopyTexture, &[u8], ImageDataLayout,\n                     Extent3d)","parent":null,"children":[],"decl_id":null,"docs":" Schedule a data write into `texture`.","sig":null,"attributes":[{"value":"/ Schedule a data write into `texture`.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107402,"byte_end":107443,"line_start":3026,"line_end":3026,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107448,"byte_end":107451,"line_start":3027,"line_end":3027,"column_start":5,"column_end":8}},{"value":"/ This method is intended to have low performance costs.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107456,"byte_end":107514,"line_start":3028,"line_end":3028,"column_start":5,"column_end":63}},{"value":"/ As such, the write is not immediately submitted, and instead enqueued","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107519,"byte_end":107592,"line_start":3029,"line_end":3029,"column_start":5,"column_end":78}},{"value":"/ internally to happen at the start of the next `submit()` call.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107597,"byte_end":107663,"line_start":3030,"line_end":3030,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":108014,"byte_end":108020,"line_start":3042,"line_end":3042,"column_start":12,"column_end":18},"name":"submit","qualname":"<Queue>::submit","value":"pub fn submit<I: IntoIterator<Item = CommandBuffer>>(&Self, I)","parent":null,"children":[],"decl_id":null,"docs":" Submits a series of finished command buffers for execution.\n","sig":null,"attributes":[{"value":"/ Submits a series of finished command buffers for execution.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":107939,"byte_end":108002,"line_start":3041,"line_end":3041,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":108463,"byte_end":108483,"line_start":3055,"line_end":3055,"column_start":12,"column_end":32},"name":"get_timestamp_period","qualname":"<Queue>::get_timestamp_period","value":"pub fn get_timestamp_period(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the amount of nanoseconds each tick of a timestamp query represents.","sig":null,"attributes":[{"value":"/ Gets the amount of nanoseconds each tick of a timestamp query represents.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":108307,"byte_end":108384,"line_start":3052,"line_end":3052,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":108389,"byte_end":108392,"line_start":3053,"line_end":3053,"column_start":5,"column_end":8}},{"value":"/ Returns zero if timestamp queries are unsupported.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":108397,"byte_end":108451,"line_start":3054,"line_end":3054,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":108704,"byte_end":108726,"line_start":3061,"line_end":3061,"column_start":12,"column_end":34},"name":"on_submitted_work_done","qualname":"<Queue>::on_submitted_work_done","value":"pub fn on_submitted_work_done(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns a future that resolves once all the work submitted by this point\n is done processing on GPU.\n","sig":null,"attributes":[{"value":"/ Returns a future that resolves once all the work submitted by this point","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":108581,"byte_end":108657,"line_start":3059,"line_end":3059,"column_start":5,"column_end":81}},{"value":"/ is done processing on GPU.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":108662,"byte_end":108692,"line_start":3060,"line_end":3060,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109247,"byte_end":109267,"line_start":3078,"line_end":3078,"column_start":12,"column_end":32},"name":"get_preferred_format","qualname":"<Surface>::get_preferred_format","value":"pub fn get_preferred_format(&Self, &Adapter) -> Option<TextureFormat>","parent":null,"children":[],"decl_id":null,"docs":" Returns an optimal texture format to use for the [`Surface`] with this adapter.","sig":null,"attributes":[{"value":"/ Returns an optimal texture format to use for the [`Surface`] with this adapter.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109074,"byte_end":109157,"line_start":3075,"line_end":3075,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109162,"byte_end":109165,"line_start":3076,"line_end":3076,"column_start":5,"column_end":8}},{"value":"/ Returns None if the surface is incompatible with the adapter.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109170,"byte_end":109235,"line_start":3077,"line_end":3077,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109649,"byte_end":109658,"line_start":3088,"line_end":3088,"column_start":12,"column_end":21},"name":"configure","qualname":"<Surface>::configure","value":"pub fn configure(&Self, &Device, &SurfaceConfiguration)","parent":null,"children":[],"decl_id":null,"docs":" Initializes [`Surface`] for presentation.","sig":null,"attributes":[{"value":"/ Initializes [`Surface`] for presentation.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109417,"byte_end":109462,"line_start":3082,"line_end":3082,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109467,"byte_end":109470,"line_start":3083,"line_end":3083,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109475,"byte_end":109487,"line_start":3084,"line_end":3084,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109492,"byte_end":109495,"line_start":3085,"line_end":3085,"column_start":5,"column_end":8}},{"value":"/ - A old [`SurfaceFrame`] is still alive referencing an old surface.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109500,"byte_end":109571,"line_start":3086,"line_end":3086,"column_start":5,"column_end":76}},{"value":"/ - Texture format requested is unsupported on the surface.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109576,"byte_end":109637,"line_start":3087,"line_end":3087,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":110196,"byte_end":110213,"line_start":3099,"line_end":3099,"column_start":12,"column_end":29},"name":"get_current_frame","qualname":"<Surface>::get_current_frame","value":"pub fn get_current_frame(&Self) -> Result<SurfaceFrame, SurfaceError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next texture to be presented by the swapchain for drawing.","sig":null,"attributes":[{"value":"/ Returns the next texture to be presented by the swapchain for drawing.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109808,"byte_end":109882,"line_start":3092,"line_end":3092,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109887,"byte_end":109890,"line_start":3093,"line_end":3093,"column_start":5,"column_end":8}},{"value":"/ When the [`SurfaceFrame`] returned by this method is dropped, the swapchain will present","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109895,"byte_end":109987,"line_start":3094,"line_end":3094,"column_start":5,"column_end":97}},{"value":"/ the texture to the associated [`Surface`].","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109992,"byte_end":110038,"line_start":3095,"line_end":3095,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":110043,"byte_end":110046,"line_start":3096,"line_end":3096,"column_start":5,"column_end":8}},{"value":"/ If a SurfaceFrame referencing this surface is alive when the swapchain is recreated,","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":110051,"byte_end":110139,"line_start":3097,"line_end":3097,"column_start":5,"column_end":93}},{"value":"/ recreating the swapchain will panic.","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":110144,"byte_end":110184,"line_start":3098,"line_end":3098,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":1429},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111214,"byte_end":111236,"line_start":3128,"line_end":3128,"column_start":11,"column_end":33},"name":"UncapturedErrorHandler","qualname":"::UncapturedErrorHandler","value":"UncapturedErrorHandler: Fn(Error) -> () + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Type for the callback of uncaptured error handler\n","sig":null,"attributes":[{"value":"/ Type for the callback of uncaptured error handler","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111150,"byte_end":111203,"line_start":3127,"line_end":3127,"column_start":1,"column_end":54}}]},{"kind":"StructVariant","id":{"krate":0,"index":2087},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111426,"byte_end":111442,"line_start":3135,"line_end":3135,"column_start":5,"column_end":21},"name":"OutOfMemoryError","qualname":"::Error::OutOfMemoryError","value":"Error::OutOfMemoryError { source }","parent":{"krate":0,"index":2086},"children":[],"decl_id":null,"docs":" Out of memory error\n","sig":null,"attributes":[{"value":"/ Out of memory error","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111398,"byte_end":111421,"line_start":3134,"line_end":3134,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":2089},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111583,"byte_end":111598,"line_start":3140,"line_end":3140,"column_start":5,"column_end":20},"name":"ValidationError","qualname":"::Error::ValidationError","value":"Error::ValidationError { source, description }","parent":{"krate":0,"index":2086},"children":[],"decl_id":null,"docs":" Validation error, signifying a bug in code or data\n","sig":null,"attributes":[{"value":"/ Validation error, signifying a bug in code or data","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111524,"byte_end":111578,"line_start":3139,"line_end":3139,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2086},"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111386,"byte_end":111391,"line_start":3133,"line_end":3133,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"pub enum Error {\n    OutOfMemoryError {\n        source: Box<dyn error::Error + Send + 'static>,\n    },\n    ValidationError {\n        source: Box<dyn error::Error + Send + 'static>,\n        description: String,\n    },\n}","parent":null,"children":[{"krate":0,"index":2087},{"krate":0,"index":2089}],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[{"value":"/ Error type","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111345,"byte_end":111359,"line_start":3131,"line_end":3131,"column_start":1,"column_end":15}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":113720,"byte_end":113727,"line_start":28,"line_end":28,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":113802,"byte_end":113809,"line_start":34,"line_end":34,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":113957,"byte_end":113964,"line_start":40,"line_end":40,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":119489,"byte_end":119500,"line_start":216,"line_end":216,"column_start":61,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":122046,"byte_end":122056,"line_start":291,"line_end":291,"column_start":56,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":126733,"byte_end":126743,"line_start":430,"line_end":430,"column_start":60,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":129204,"byte_end":129223,"line_start":501,"line_end":501,"column_start":56,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":135536,"byte_end":135543,"line_start":712,"line_end":712,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":304},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":185054,"byte_end":185066,"line_start":2138,"line_end":2138,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":185323,"byte_end":185335,"line_start":2150,"line_end":2150,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":185706,"byte_end":185723,"line_start":2168,"line_end":2168,"column_start":22,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":185748,"byte_end":185765,"line_start":2169,"line_end":2169,"column_start":22,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":185809,"byte_end":185826,"line_start":2171,"line_end":2171,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":186061,"byte_end":186078,"line_start":2181,"line_end":2181,"column_start":15,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\native_gpu_future.rs","byte_start":186829,"byte_end":186838,"line_start":27,"line_end":27,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\native_gpu_future.rs","byte_start":187304,"byte_end":187323,"line_start":43,"line_end":43,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":192401,"byte_end":192405,"line_start":14,"line_end":14,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194266,"byte_end":194277,"line_start":70,"line_end":70,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199698,"byte_end":199704,"line_start":40,"line_end":40,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209613,"byte_end":209623,"line_start":123,"line_end":123,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":211304,"byte_end":211323,"line_start":174,"line_end":174,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":190529,"byte_end":190543,"line_start":76,"line_end":76,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":191877,"byte_end":191891,"line_start":111,"line_end":111,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17791,"byte_end":17798,"line_start":507,"line_end":507,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18850,"byte_end":18860,"line_start":546,"line_end":546,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21765,"byte_end":21772,"line_start":651,"line_end":651,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22256,"byte_end":22263,"line_start":669,"line_end":669,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22946,"byte_end":22961,"line_start":689,"line_end":689,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23582,"byte_end":23591,"line_start":709,"line_end":709,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1134}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24126,"byte_end":24138,"line_start":728,"line_end":728,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25708,"byte_end":25722,"line_start":778,"line_end":778,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1151}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26230,"byte_end":26244,"line_start":796,"line_end":796,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26387,"byte_end":26401,"line_start":804,"line_end":804,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1155}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27122,"byte_end":27137,"line_start":827,"line_end":827,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1157}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27281,"byte_end":27296,"line_start":835,"line_end":835,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28131,"byte_end":28144,"line_start":859,"line_end":859,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28967,"byte_end":28981,"line_start":885,"line_end":885,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30647,"byte_end":30659,"line_start":937,"line_end":937,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1165}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30918,"byte_end":30926,"line_start":951,"line_end":951,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33850,"byte_end":33856,"line_start":1030,"line_end":1030,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1173}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34397,"byte_end":34407,"line_start":1047,"line_end":1047,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":40134,"byte_end":40151,"line_start":1171,"line_end":1171,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48102,"byte_end":48114,"line_start":1365,"line_end":1365,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48654,"byte_end":48666,"line_start":1376,"line_end":1376,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48676,"byte_end":48684,"line_start":1378,"line_end":1378,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1215},{"krate":0,"index":1218},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52639,"byte_end":52646,"line_start":1497,"line_end":1497,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1229},{"krate":0,"index":1233},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56900,"byte_end":56906,"line_start":1607,"line_end":1607,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63660,"byte_end":63666,"line_start":1801,"line_end":1801,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63915,"byte_end":63933,"line_start":1813,"line_end":1813,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64088,"byte_end":64106,"line_start":1819,"line_end":1819,"column_start":23,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64251,"byte_end":64267,"line_start":1825,"line_end":1825,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64444,"byte_end":64460,"line_start":1831,"line_end":1831,"column_start":23,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":66506,"byte_end":66516,"line_start":1907,"line_end":1907,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":66639,"byte_end":66652,"line_start":1915,"line_end":1915,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1283},{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":66937,"byte_end":66950,"line_start":1928,"line_end":1928,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1286}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67068,"byte_end":67078,"line_start":1934,"line_end":1934,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67173,"byte_end":67186,"line_start":1940,"line_end":1940,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67286,"byte_end":67296,"line_start":1946,"line_end":1946,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67492,"byte_end":67505,"line_start":1956,"line_end":1956,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1294}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67692,"byte_end":67698,"line_start":1966,"line_end":1966,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1300},{"krate":0,"index":1301}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":68944,"byte_end":68955,"line_start":2004,"line_end":2004,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1306},{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":71411,"byte_end":71417,"line_start":2069,"line_end":2069,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":71551,"byte_end":71558,"line_start":2077,"line_end":2077,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":72317,"byte_end":72324,"line_start":2102,"line_end":2102,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":72482,"byte_end":72493,"line_start":2110,"line_end":2110,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":72633,"byte_end":72647,"line_start":2118,"line_end":2118,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78293,"byte_end":78307,"line_start":2304,"line_end":2304,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":79134,"byte_end":79148,"line_start":2323,"line_end":2323,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":79860,"byte_end":79870,"line_start":2346,"line_end":2346,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86574,"byte_end":86584,"line_start":2515,"line_end":2515,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1358},{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89049,"byte_end":89059,"line_start":2576,"line_end":2576,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1362},{"krate":0,"index":1363}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92832,"byte_end":92842,"line_start":2675,"line_end":2675,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94317,"byte_end":94327,"line_start":2710,"line_end":2710,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95010,"byte_end":95020,"line_start":2724,"line_end":2724,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1372},{"krate":0,"index":1373}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95698,"byte_end":95708,"line_start":2739,"line_end":2739,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95988,"byte_end":95999,"line_start":2750,"line_end":2750,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97951,"byte_end":97962,"line_start":2803,"line_end":2803,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98561,"byte_end":98572,"line_start":2817,"line_end":2817,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":99247,"byte_end":99258,"line_start":2830,"line_end":2830,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":99936,"byte_end":99947,"line_start":2845,"line_end":2845,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":100228,"byte_end":100247,"line_start":2856,"line_end":2856,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105531,"byte_end":105550,"line_start":2982,"line_end":2982,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106923,"byte_end":106928,"line_start":3016,"line_end":3016,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1419},{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":108866,"byte_end":108880,"line_start":3066,"line_end":3066,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109060,"byte_end":109067,"line_start":3074,"line_end":3074,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111303,"byte_end":111304,"line_start":3129,"line_end":3129,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111742,"byte_end":111747,"line_start":3148,"line_end":3148,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":112020,"byte_end":112025,"line_start":3157,"line_end":3157,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1435}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":294,"byte_end":298,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":451}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":113720,"byte_end":113727,"line_start":28,"line_end":28,"column_start":15,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":126},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":113802,"byte_end":113809,"line_start":34,"line_end":34,"column_start":21,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":126},"to":{"krate":2,"index":8894}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":113957,"byte_end":113964,"line_start":40,"line_end":40,"column_start":6,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":119489,"byte_end":119500,"line_start":216,"line_end":216,"column_start":61,"column_end":72},"kind":{"Impl":{"id":3}},"from":{"krate":23,"index":678},"to":{"krate":0,"index":963}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":122046,"byte_end":122056,"line_start":291,"line_end":291,"column_start":56,"column_end":66},"kind":{"Impl":{"id":4}},"from":{"krate":23,"index":1103},"to":{"krate":0,"index":976}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":126733,"byte_end":126743,"line_start":430,"line_end":430,"column_start":60,"column_end":70},"kind":{"Impl":{"id":5}},"from":{"krate":23,"index":1103},"to":{"krate":0,"index":991}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":129204,"byte_end":129223,"line_start":501,"line_end":501,"column_start":56,"column_end":75},"kind":{"Impl":{"id":6}},"from":{"krate":23,"index":4429},"to":{"krate":0,"index":976}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":135536,"byte_end":135543,"line_start":712,"line_end":712,"column_start":25,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":126},"to":{"krate":0,"index":1006}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":185054,"byte_end":185066,"line_start":2138,"line_end":2138,"column_start":6,"column_end":18},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":378},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":185323,"byte_end":185335,"line_start":2150,"line_end":2150,"column_start":21,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":378},"to":{"krate":2,"index":8894}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":185706,"byte_end":185723,"line_start":2168,"line_end":2168,"column_start":22,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1479},"to":{"krate":2,"index":2853}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":185748,"byte_end":185765,"line_start":2169,"line_end":2169,"column_start":22,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1479},"to":{"krate":2,"index":2865}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":185809,"byte_end":185826,"line_start":2171,"line_end":2171,"column_start":40,"column_end":57},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1479},"to":{"krate":0,"index":1276}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\direct.rs","byte_start":186061,"byte_end":186078,"line_start":2181,"line_end":2181,"column_start":15,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1479},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\native_gpu_future.rs","byte_start":186829,"byte_end":186838,"line_start":27,"line_end":27,"column_start":20,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":433},"to":{"krate":2,"index":12108}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\backend\\native_gpu_future.rs","byte_start":187304,"byte_end":187323,"line_start":43,"line_end":43,"column_start":9,"column_end":28},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":437},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":192401,"byte_end":192405,"line_start":14,"line_end":14,"column_start":41,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":498},"to":{"krate":2,"index":12108}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\belt.rs","byte_start":194266,"byte_end":194277,"line_start":70,"line_end":70,"column_start":6,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\device.rs","byte_start":199698,"byte_end":199704,"line_start":40,"line_end":40,"column_start":27,"column_end":33},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1519},"to":{"krate":0,"index":531}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":209613,"byte_end":209623,"line_start":123,"line_end":123,"column_start":32,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1628},"to":{"krate":0,"index":570}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\encoder.rs","byte_start":211304,"byte_end":211323,"line_start":174,"line_end":174,"column_start":32,"column_end":51},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1642},"to":{"krate":0,"index":570}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":190529,"byte_end":190543,"line_start":76,"line_end":76,"column_start":6,"column_end":20},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\util\\mod.rs","byte_start":191877,"byte_end":191891,"line_start":111,"line_end":111,"column_start":26,"column_end":40},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":672},"to":{"krate":2,"index":3064}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":4723,"byte_end":4734,"line_start":130,"line_end":130,"column_start":38,"column_end":49},"kind":"SuperTrait","from":{"krate":0,"index":976},"to":{"krate":0,"index":991}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5611,"byte_end":5616,"line_start":155,"line_end":155,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":2,"index":8894},"to":{"krate":0,"index":1006}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5619,"byte_end":5623,"line_start":155,"line_end":155,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":2853},"to":{"krate":0,"index":1006}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5626,"byte_end":5631,"line_start":155,"line_end":155,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":2858},"to":{"krate":0,"index":1006}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":5634,"byte_end":5638,"line_start":155,"line_end":155,"column_start":39,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":2865},"to":{"krate":0,"index":1006}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":17791,"byte_end":17798,"line_start":507,"line_end":507,"column_start":15,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1514},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":18850,"byte_end":18860,"line_start":546,"line_end":546,"column_start":6,"column_end":16},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1540},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":21765,"byte_end":21772,"line_start":651,"line_end":651,"column_start":15,"column_end":22},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1577},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22256,"byte_end":22263,"line_start":669,"line_end":669,"column_start":15,"column_end":22},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1582},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":22946,"byte_end":22961,"line_start":689,"line_end":689,"column_start":15,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1587},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":23582,"byte_end":23591,"line_start":709,"line_end":709,"column_start":15,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":24126,"byte_end":24138,"line_start":728,"line_end":728,"column_start":15,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1597},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":25708,"byte_end":25722,"line_start":778,"line_end":778,"column_start":15,"column_end":29},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1602},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26230,"byte_end":26244,"line_start":796,"line_end":796,"column_start":15,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1607},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":26387,"byte_end":26401,"line_start":804,"line_end":804,"column_start":6,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27122,"byte_end":27137,"line_start":827,"line_end":827,"column_start":15,"column_end":30},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":27281,"byte_end":27296,"line_start":835,"line_end":835,"column_start":6,"column_end":21},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28131,"byte_end":28144,"line_start":859,"line_end":859,"column_start":15,"column_end":28},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1617},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":28967,"byte_end":28981,"line_start":885,"line_end":885,"column_start":15,"column_end":29},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1622},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30647,"byte_end":30659,"line_start":937,"line_end":937,"column_start":15,"column_end":27},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1651},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":30918,"byte_end":30926,"line_start":951,"line_end":951,"column_start":15,"column_end":23},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1166},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":33850,"byte_end":33856,"line_start":1030,"line_end":1030,"column_start":30,"column_end":36},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1695},"to":{"krate":2,"index":2831}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":34397,"byte_end":34407,"line_start":1047,"line_end":1047,"column_start":30,"column_end":40},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1725},"to":{"krate":2,"index":2831}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":40134,"byte_end":40151,"line_start":1171,"line_end":1171,"column_start":18,"column_end":35},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1813},"to":{"krate":2,"index":2831}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48102,"byte_end":48114,"line_start":1365,"line_end":1365,"column_start":18,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2015},"to":{"krate":2,"index":8901}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48654,"byte_end":48666,"line_start":1376,"line_end":1376,"column_start":23,"column_end":35},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2015},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":48676,"byte_end":48684,"line_start":1378,"line_end":1378,"column_start":6,"column_end":14},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":52639,"byte_end":52646,"line_start":1497,"line_end":1497,"column_start":6,"column_end":13},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":56900,"byte_end":56906,"line_start":1607,"line_end":1607,"column_start":6,"column_end":12},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63660,"byte_end":63666,"line_start":1801,"line_end":1801,"column_start":15,"column_end":21},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1519},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":63915,"byte_end":63933,"line_start":1813,"line_end":1813,"column_start":18,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2034},"to":{"krate":2,"index":8901}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64088,"byte_end":64106,"line_start":1819,"line_end":1819,"column_start":23,"column_end":41},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2034},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64251,"byte_end":64267,"line_start":1825,"line_end":1825,"column_start":18,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2046},"to":{"krate":2,"index":8901}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":64444,"byte_end":64460,"line_start":1831,"line_end":1831,"column_start":23,"column_end":39},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2046},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":66506,"byte_end":66516,"line_start":1907,"line_end":1907,"column_start":26,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2071},"to":{"krate":2,"index":3064}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":66639,"byte_end":66652,"line_start":1915,"line_end":1915,"column_start":26,"column_end":39},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2078},"to":{"krate":2,"index":3064}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":66937,"byte_end":66950,"line_start":1928,"line_end":1928,"column_start":29,"column_end":42},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2078},"to":{"krate":2,"index":3077}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67068,"byte_end":67078,"line_start":1934,"line_end":1934,"column_start":22,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2071},"to":{"krate":2,"index":2750}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67173,"byte_end":67186,"line_start":1940,"line_end":1940,"column_start":22,"column_end":35},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2078},"to":{"krate":2,"index":2753}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67286,"byte_end":67296,"line_start":1946,"line_end":1946,"column_start":15,"column_end":25},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2071},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67492,"byte_end":67505,"line_start":1956,"line_end":1956,"column_start":15,"column_end":28},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2078},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":67692,"byte_end":67698,"line_start":1966,"line_end":1966,"column_start":6,"column_end":12},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":68944,"byte_end":68955,"line_start":2004,"line_end":2004,"column_start":10,"column_end":21},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1553},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":71411,"byte_end":71417,"line_start":2069,"line_end":2069,"column_start":15,"column_end":21},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1546},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":71551,"byte_end":71558,"line_start":2077,"line_end":2077,"column_start":6,"column_end":13},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":72317,"byte_end":72324,"line_start":2102,"line_end":2102,"column_start":15,"column_end":22},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1566},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":72482,"byte_end":72493,"line_start":2110,"line_end":2110,"column_start":15,"column_end":26},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1572},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":72633,"byte_end":72647,"line_start":2118,"line_end":2118,"column_start":6,"column_end":20},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":78293,"byte_end":78307,"line_start":2304,"line_end":2304,"column_start":6,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":79134,"byte_end":79148,"line_start":2323,"line_end":2323,"column_start":6,"column_end":20},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":79860,"byte_end":79870,"line_start":2346,"line_end":2346,"column_start":10,"column_end":20},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":86574,"byte_end":86584,"line_start":2515,"line_end":2515,"column_start":10,"column_end":20},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":89049,"byte_end":89059,"line_start":2576,"line_end":2576,"column_start":10,"column_end":20},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":92832,"byte_end":92842,"line_start":2675,"line_end":2675,"column_start":10,"column_end":20},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":94317,"byte_end":94327,"line_start":2710,"line_end":2710,"column_start":10,"column_end":20},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95010,"byte_end":95020,"line_start":2724,"line_end":2724,"column_start":10,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95698,"byte_end":95708,"line_start":2739,"line_end":2739,"column_start":19,"column_end":29},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1628},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":95988,"byte_end":95999,"line_start":2750,"line_end":2750,"column_start":10,"column_end":21},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":97951,"byte_end":97962,"line_start":2803,"line_end":2803,"column_start":10,"column_end":21},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":98561,"byte_end":98572,"line_start":2817,"line_end":2817,"column_start":10,"column_end":21},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":99247,"byte_end":99258,"line_start":2830,"line_end":2830,"column_start":10,"column_end":21},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":99936,"byte_end":99947,"line_start":2845,"line_end":2845,"column_start":19,"column_end":30},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1635},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":100228,"byte_end":100247,"line_start":2856,"line_end":2856,"column_start":10,"column_end":29},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":105531,"byte_end":105550,"line_start":2982,"line_end":2982,"column_start":10,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":106923,"byte_end":106928,"line_start":3016,"line_end":3016,"column_start":6,"column_end":11},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":108866,"byte_end":108880,"line_start":3066,"line_end":3066,"column_start":15,"column_end":29},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2005},"to":{"krate":2,"index":3088}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":109060,"byte_end":109067,"line_start":3074,"line_end":3074,"column_start":6,"column_end":13},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111238,"byte_end":111240,"line_start":3128,"line_end":3128,"column_start":35,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":3091},"to":{"krate":0,"index":1429}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111250,"byte_end":111254,"line_start":3128,"line_end":3128,"column_start":47,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":2853},"to":{"krate":0,"index":1429}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111303,"byte_end":111304,"line_start":3129,"line_end":3129,"column_start":36,"column_end":37},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1431},"to":{"krate":0,"index":1429}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":111742,"byte_end":111747,"line_start":3148,"line_end":3148,"column_start":23,"column_end":28},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2086},"to":{"krate":1,"index":2326}},{"span":{"file_name":"C:\\Users\\Joe\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wgpu-0.10.1\\src\\lib.rs","byte_start":112020,"byte_end":112025,"line_start":3157,"line_end":3157,"column_start":18,"column_end":23},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2086},"to":{"krate":2,"index":8901}}]}